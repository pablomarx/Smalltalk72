
;//FILE MAINTENANCE --  OPEN.SR
;//OPEN ROUTINE CHECKS FONT FOR PROPORTIONAL WIDTH.
;//IF FONT NON-PROPROTIONAL EXTRACTS WIDTH FOR QUICK ACCESS.
;//IN ANY EVENT THE ENTRY "GETWD"  RETURNS A WIDTH FOR ANY 
;//GIVEN 8-BIT CODE PASSED IN AC0. THE WDTH IS RETURNED IN AC0.
;//AC1 AND AC2 ARE PRESERVED.  PROPORTIONAL FONTS ARE SEARCHED 
;//DYNAMICALLY FOR WDTHS. THE CALLER NEED NOT KNOW WHETHER OR NOT
;//A FONT IS PPTNAL--THE PROPER WDTH IS RTRNED IN EITHER CASE.
;//"GETHT" RTRNS THE FONT HEIGHT IN AC0, PRESERVING AC1 AND AC2.
;//OPEN RTNE ALSO PUTS A MSK TBL IN PAGE 1 FOR CONVERT ROUTINE,
;//AND SETS UP CONTROL TABLE FOR CONVERT ROUTINE 


.TITL OPEN

.GETNOLIST	"SMALL.OPS"
.GETNOLIST	"SMALL.SYMS"
.GETNOLIST 	"SMALL.PARMS"
.GETNOLIST	"SMDISP.SYMS"

.SREL

OPEN:	OPENC
DSPX:	0		;//DISPLAY PARAMETERS
DSPWD:	DWIDB		;//DISPLAY WIDTH IN BITS
DSPY:	0
DSPHT:	DHITE		;//DISPLAY HEIGHT IN SCANLINES
DSPVL:	0
DWDTH:	DWIDE		;//DISPLAY WIDTH IN WORDS
SVFNT:	0		;//PLACE TO SAVE PTR TO DEFAULT FNT
GETWD:	GETWDC
GETHT:	GETHTC
SVACS:	SVACSC
RSACS:	RSACSC
GTMES:	GTMESC
SVALL:	SVALLC
RSALL:	RSALLC


.NREL

OPRTN:	0		;//PLACE FOR RETURN FROM OPEN
.DWDTH:	DWDTH
.SVFNT:	SVFNT

OFIFN:	17		;//UTILITY 15
.CNTB:	CTB0		;//AD OF CONTROL TABLE--IN SCAN
.OPSW:	OPNSW		;//AD OF OPEN SWITCH
 
 
OPENC:
	ISZ @.OPSW	;//INC OPEN SWITCH
	STA 3,OPRTN	;//SAVE RETURN
	LDA 2,.CNTB	;//SET UP DISP WIDTH IN CONTROL TABLE
	LDA 0,@.DWDTH
	STA 0,0,2
	LDA 1,@XYBITS	;//USE FIRST AD OF BTMP AS BASIS FOR DWA
	SUBZ 0,1	;//SUB FROM DEST. WORD AD
	STA 0,2,2	;//SAVE DWA MINUS DISP WIDTH
	LDA 0,OFIFN	;//SET UP FIRST DBA
	STA 0,1,2

;//SAVE PTR TO DEFAULT FONT SO DISPFRAME NEVER WITHOUT
;//A FONT
	LDA 0, .FONT	;//PTR IN PAGE ZERO
	STA 0, @.SVFNT

	JMP @OPRTN	;//AND RETURN TO CALLER



;//WIDTH ROUTINES AND OTHER UTILS


AC1:	0		;//PLACE FOR SAVING AC1
AC2:	0		;//DITTO AC2
AC0:	0
WDTMP:	0		;//TEMP WIDTH FOR WHEN EXTENTIONS
WDSXN:	20		;//UTILITY 16

SVALLC:
	STA 0,AC0	;//SOMETIMES NEED TO SAVE AC0 TOO
SVACSC:			;//WDTH,GETWD AND GETHT 
			;//CALLS SAV AC1 AND AC2
	STA 1,AC1
	STA 2,AC2
	JMP 0,3

RSALLC:
	LDA 0,AC0
RSACSC:
	LDA 1,AC1
	LDA 2,AC2
	JMP 0,3


GETWDC:	STA 3,OPRTN	;//CALL FOR PROPORTIONAL WIDTH GETS HERE
	JSR SVACSC	;//SAVE AC1 AND AC2
	JSR FECHW	;//DO FONT CRAWL
	JMP EXT		;//DO EXT STUFF IF NECESSARY
	JMP RETRN	;//RETURN TO CALLER--WIDTH IN AC0
FECHW:
	LDA 2,.FONT	;//GET FIRST AD OF FONT PTRS
	ADD 0,2		;//ADD CHAR CODE TO THAT
	LDA 1,0,2	;//GET VALUE IN FONT PTR
	ADD 1,2		;//ADD THAT TO ADDRESS OF FONT PTR
	LDA 0,0,2	;//TO POINT AT WIDTH WORD, WHICH GET
	MOVZR 0,0 SNC	;//ZERO LOW ORDER BIT MEANS EXT
	JMP 0,3		;//NON-ZERO MEANS EXT
	JMP 1,3		;//OTHERWISE FINISHED

EXT:
	LDA 1,WDSXN	;//FIRST PART OF CHAR IS 16
	LDA 2,WDTMP	;//GET TEMP WIDTH WORD
	ADD 1,2		;//ADD 16 TO IT
	STA 2,WDTMP	;//SAVE TEMP WIDTH
	JSR FECHW	;//AC0 PSEUDO-CODE FOR EXTENTION OF CHAR
	JMP EXT		;//DO ANOTHER EXTENTION LOOP IF SO
	LDA 1,WDTMP	;//OTHERWISE ADD VALUE TO WIDTH TEMP
	ADD 1,0		;//WIDTH GETS PASSED TO CALLER IN AC0
	ZER 2,2		;//REFRESH WIDTH TEMP
	STA 2,WDTMP
RETRN:
	JSR RSACSC	;//RESTORE AC1 AND AC2
	JMP @OPRTN	;//RETURN TO CALLER 


GETHTC:
	STA 3,OPRTN	;//RETURN HEIGHT OF FONT--SAVE RETURN
	LDA 3,.FONT
	LDA 0,-2,3
	JMP @OPRTN	;//HEIGHT RETURNED IN AC0

;//UTILITY FOR GRABBING INTEGER VALUES OUT OF MESSAGE STREAM
;//THE CALL SHOULD LOOK LIKE:
	;//JSRII .GTMS
	;//#			;//NO OF MESSAGES TO BE FETCHED
	;//LABEL:	0	;//NO. OF LABELS = NO OF ARGS
	;//JMP CONTINUE ....
 
MSCNT:	0
MSTBL:	0
 
GTMESC:
	LDA 0,0,3	;//SQUIRREL AWAY NO. OF ARGS
	STA 0,MSCNT
	INC 3,3		;//SAVE PTR TO PLACE FOR STORING MESSAGES
	LDA 0,0,3	;//GET PTR TO MSG TBL
	STA 0,MSTBL
	INC 3,3
	STA 3,OPRTN	;//SAVE RETRN **** ALTO CONV. CHANGE
MESLP:
	JSR @.FECH	;//GET MESSAGE OUT OF MESSAGE STREAM
	JSR @.IVAL	;//MAKE IT INTO AN INTEGER
	STA 0,@MSTBL	;//HAND IT TO USER
	ISZ MSTBL	;//GET READY FOR NEXT GO OR SET UP RETURN
	DSZ MSCNT	;//DONE
	JMP MESLP	;//LOOP
	JMP @OPRTN	;//RETURN
	.END
