	.TITL	TURT
	.GETNOLIST	"SMALL.OPS"
	.GETNOLIST	"SMALL.SYMS"
	.GETNOLIST	"SMALL.PARMS"
	.GETNOLIST	"PAGE1.PARMS"
	.BEXT	DSPX,	INSEC	;DISPLAY STUFF

	.SREL	;ENTRY POINTS
DPLOT:	DPLOTC
TURTL:	TURTLC

TABLE:	TABLC
DNEG:	DNEGC
WHITS:	WHITE
BLAKS:	BLACK
XORS:	XOR
THICKS:	THICK
CINIT:	CINITC
DOGO:	DOGOC
DOGOTO:	GOTOC
TFONT:	TFONTC
CVTAB:	CVTABC
XBLOK:	0
	0
	X
	FX
	NEGX
	COS
	XMIN
YBLOK:	0
	0
	Y
	FY
	NEGY
	SIN
	YMIN
;
	.NREL
;
;
;	/* SUB OR ADD FRAME BASE TO X OR Y
RELF:	LDA	2,0,3
	ADD	3,2	;AC2 POINTS TO X OR Y
	LDA	1,XMIN-X,2	;THIS IS THE FRAME BASE
	LDA	0,1,3
	SP	0,0
	 NEG	1,1	;2ND ARG <0 MEANS SUBTRACT
	LDA	0,0,2	;THIS IS X OR Y
	ADD	1,0
	STA	0,0,2	;STORE ALTERED VALUE BACK
	JMP	2,3
;
;	/* GET OR PUT INSTANCE STATE
GTINS:	STA	3,GPIX
	LDAF	INST
	ZER	1,1
	JSR	@.LSI	;GET INTEGER STATE VARS
	PENDN-.
	PENDN-STATE
	FY-PENDN+1
	LDAF	INST
	LDA	1,FRMOFF
	ADD	0,1
	LOAD
	ZER	1,1	;GET FRAME PARAMETERS
	JSR	@.LSI
	FRAME-.
	5
	4
	JSR	RELF	;FRAME-RELATIVE X,Y -> ABSOLUTE
	X-.
	1
	JSR	RELF
	Y-.
	1
	JMP	@GPIX
;
PTINS:	STA	3,GPIX
	JSR	RELF	;ABSOLUTE X,Y -> FRAME-RELATIVE
	X-.
	-1
	JSR	RELF
	Y-.
	-1
	LDAF	INST
	ONE	1,1
	JSR	@.LSI	;UPDATE POSITION STATE VARS
	X-.
	X-STATE
	FY-X+1
	JMP	@GPIX
GPIX:	0
FRMOFF:	FRM-STATE
;
;	/* GO */
GO:	JSR	@.AMPC
	JSR	GTINS	;LOAD STATE
	JSR	GTINCS
	JSR	@.FECH	;FETCH LENGTH
	JSR	@.IVAL
	JSR	DOGOC	;DRAW LINE OF THAT LENGTH
	JSR	PTINS
	JMP	TURTLC
;
;	/* GO TO */ - DRAW VECTOR TO ABSOLUTE COORDS
GOTO:	JSR	@.AMPC
	JSR	GTINS
	JSRII	.GOTO	;GOTO CODE - CALLS ON DOGOC
	JSR	PTINS
	JMP	TURTLC
.GOTO:	DOGOTO
;
;	/* TURN */
TURN:	JSR	@.AMPC
	JSR	@.FECH	;FETCH TURN
	JSR	@.IVAL
	STA	0,TRN
	JSR	@.LINS
	DIROFF		;DIR
	LDA	1,TRN
	ADD	0,1	; + TURN
	LDA	2,C360
	JSRII	.MOD	;MOD 360
	JSR	@.SINS
	DIROFF		;UPDATE DIR
	JMP	TURTLC
TRN:	0
.MOD:	MOD
;
;	/* CALC INCREMENTS FROM DIREC
GTIX:	0
GTINCS:	STA	3,GTIX
	ZER	2,2
	ZER	3,3	;NEGX AC2,    NEGY AC3
	LDA	0,C180
	LDA	1,DIREC
	SGE	1,0	;SKIP TDIR GE 180
	JMP	R1
	COM	3,3	;COMP NEGY
	COM	2,2	;COMP NEGX
	SUB	0,1	;TDIR=TDIR-180
R1:	LDA	0,C90
	SGE	1,0	;SKIP TDIR GE 90    TDIR IN AC1
	JMP	R2
	COM	2,2	;COMP NEGX
	ADD	0,0	;PUT 180 IN AC0
	SUB	0,1	;TDIR=180-TDIR IN AC1
	NEG	1,1	;
; TDIR NOW NORMALIZED TO FIRST QUADRANT.
;      SO CALCULATE SINE, COSINE
R2:	STA	2,NEGX
	STA	3,NEGY
	MOV	1,0	;MOVING TDIR TO AC0 !!!!
	LDA	2,@.TABLE
	ADD	0,2
	LDA	1,0,2	;TABLE(TDIR)=SIN
	SZE	3,3	;SKIP IF NEGY=0
	NEG	1,1	;SIN=-SIN
	STA	1,SIN
	LDA	3,NEGX
	SZE	0,0	;SKIP IF TDIR=0
	JMP	R3
	ZER	1,1
	STA	1,NEGY	;0 OR 180 DEG   SIN=0
	SZE	3,3	;SKIP IF NEGX=0       NEGX CAN'T STAY 0
	JMP	R3	;180 DEG COS=-1
	ONE	1,1
	STA	1,NEGX	;0 DEG     COS=1
;  CALCULATE COS, TEST TDIR=90
R3:	LDA	2,C90
	SUB	0,2	;TDIR=90-TDIR   AC2
	LDA	0,@.TABLE
	ADD	0,2
	LDA	1,0,2	;COS
	SZE	3,3	;SKIP NEGX=0
	NEG	1,1	;COS=-COS
	STA	1,COS
	SUB	0,2,SZR	;RESTORE 90-TDIR TO AC2,    SKIP TDIR=90
	JMP	R4
	LDA	3,NEGY
	ZER	1,1
	STA	1,NEGX	;90 OR 270 DEG     COS=0
	SZE	3,3	;SKIP IF NEGY=0      NEGY CAN'T STAY 0
	JMP	R4	;270 DEG    SIN=-1
	ONE	1,1
	STA	1,NEGY	;90 DEG      SIN=1
;   DIR,SIN,COS,NEGX,NEGY    ALL STORED.
R4:	JMP	@GTIX	;RETURN
.TABLE:	TABLE
;
;	CONSTANTS
	.RDX	10
C360:	360
C180:	180
C90:	90
	.RDX	8
.QGO:	QGO
.QGOTO:	QGOTO
.QTURN:	QTURN
;
;
;	/* TURTLE CLASS */
TURTLC:	LDAF	INST
	SNN	0,0
	JMP	@.EVAL	;OUT TO SMALLTK FOR ISNEW
	LDA	0,.QPER
	JSR	@.PEEK	;PEEK NEXT TOKEN
	JMP	PARET		;PERIOD - PASSIVE RETURN
	SNN	0,0
	JMP	PARET		;NIL - SAME
	LDA	1,.QGO
	SNE	0,1
	JMP	GO		;GO
	LDA	1,.QGOTO
	SNE	0,1
	JMP	GOTO		;GOTO
	LDA	1,.QTURN
	SNE	0,1
	JMP	TURN		;TURN
	JMP	@.EVAL	;NO MATCH - OUT TO SMALLTK
;
PARET:	LDAF	INST	;PASSIVE RETURN THIS INSTANCE
	JSR	@.SVAL
	JMP	@.ERET
;
;
;	/* DOGOC - VECTOR GUTS */
DOGOC:	STA	3,GORET	;SUBROUTINE TO DRAW A VECTOR
	STA	0,SDIST
	STA	0,DIST
	SN	0,0	;SKIP IF DIST NEG
	JMP	G1
	; DIST IS NEG   REVERSE INCREMENTS
	NEG	0,0	;DIST=-DIST
	STA	0,DIST	;STORE DIST
	JSR	COMP
	JMP	G1
;
;	COMPLEMENT INCREMENTS FOR NEG DIST
COMP:	STA	3,RETCO
	LDA	1,COS
	LDA	0,NEGX
	JSRII	.DNEG	;DOUBLE-PREC NEGATE
	STA	1,COS
	STA	0,NEGX
	LDA	1,SIN
	LDA	0,NEGY
	JSRII	.DNEG	;DOUBLE-PREC NEGATE
	STA	1,SIN
	STA	0,NEGY
	JMP	@RETCO
RETCO:	0
;
.DNEG:	DNEG
.THICK:	THICKS
.TFONT:	TFONT
.INSC:	INSEC
.CINIT:	CINIT
C8:	10
;
;
;	/* INSTANCE FORMAT */
STATE:	0
PENDN:	0	;=0 MEANS PEN UP
COLOR:	0	;INK COLOR 0=WHITE, 1=BLACK, 2=XOR
WIDTH:	0	;PEN THICKNESS 1 TO 8
DIREC:	0	;CURRENT DIRECTION TURT POINTS (UP=270 DEG)
X:	0	;INTEGER PART OF X
FX:	0	;FRACTIONAL PARTOF X
Y:	0	;INTEGER PART OF Y
FY:	0	;FRACTIONAL PART OF Y.
FRM:	0	;CLIPPING FRAME
DIROFF=	DIREC-STATE
DIST:	0	;DISTANCE TO GO
SDIST:	0	;SIGNED DISTANCE TO REMEMBER IF NEG
GORET:	0
;
;	TEMPORARY VARIABLES
FRAME:		;ENCLOSING FRAME SPECS
XMIN:	0
XMAX:	0
YMIN:	0
YMAX:	0
NEGX:	0	;INTEGER PART OF DELTA X
COS:	0	;FRACTIONAL PART OF DELTA X
NEGY:	0	;INTEGER PART OF DELTA Y
SIN:	0	;FRACTIONAL PART OF DELTA Y
TDIR:	0	;USED IN NORMALIZING DIRECTION
.DSPX:	DSPX
;
;
;
;	PREPARE FOR LOOP     X,Y IN REG 2,3
G1:	JSR	@.PNT	;INTERSECT FRAME WITH SCREEN
	FRAME-.
	STA	0,FRM1
	STA	0,FRM2
	JSR	@.PNT
	CFRAME-.	;OR WITH COLOR FRAME (256 BY 240)
	LDA	1,COLOR
	SP	1,1
	 LDA	0,.DSPX
	STA	0,.+2
	JSRII	.INSC
	.-.
FRM1:	0
FRM2:	0
	JMP	TURTLC	;NON-INTERSECTING CASE
	LDA	0,COLOR
	JSRII	.CINIT	;COLOR-RELATED INITS
	LDA	0,XMIN
	LDA	1,XMAX
	ADD	0,1
	STA	1,XMAX	;CONVERT FRAME-SPECS TO MIN/MAX
	LDA	0,YMIN
	LDA	1,YMAX
	ADD	0,1
	STA	1,YMAX
	LDA	0,WIDTH	;CHECK WIDTH
	SP	0,0
	NEG	0,0
	LDA	1,C8
	SLE	0,1
	MOV	1,0	;BOUND WIDTH 0 TO 8
	STA	0,WIDTH
	STA	0,WID	;DISTANT COPY
	ONE	1,1
	SNE	0,1
	 JMP	GOPLOT	;WIDTH=1 SKIPS CONVRT INITS
	LDA	2,@.TFONT
	ADD	0,2
	STA	2,FPTR	;INSTALL FONT-POINTER TO SPOT
	LDA	1,XMAX
	SUB	0,1	;HAVE TO SUB WIDTH FROM MAX X,Y
	INC	1,1	;(ACTUALLY WID-1)
	STA	1,XMAX
	LDA	1,YMAX
	SUB	0,1
	INC	1,1
	STA	1,YMAX
	MOVZR	0,0	;AND SUB WIDTH/2 FROM X,Y FOR THICK LINES
	LDA	1,X
	SUB	0,1
	STA	1,X
	LDA	1,Y
	SUB	0,1
	STA	1,Y
	LDA	2,@.THICK
	STA	2,INKING
GOPLOT:	JSR	@.PNT	;SET RETURN FOR SUBROUTINIZED PLOTTING
	PLOT2-.
	STA	0,PLOTX
	LDA	2,X	;AC2=X
	LDA	3,Y	;AC3=Y
	ISZ	DIST	;PLOT AT BOTH ENDS     NEVER ZERO
	JMP	G2	;PLOT POINT BEFORE MOVING TURTLE
;
PLOT2:	LDA	2,X	;RESTORE X AND Y TO REGS
	LDA	3,Y
PL2A:	DSZ	DIST
	JMP	LOOP
	LDA	0,WIDTH
	ONE	1,1
	SNE	0,1
	 JMP	STAXY
	MOVZR	0,0	;HAVE TO FIX X,Y AFTER THICK LINES
	ADD	0,2
	ADD	0,3
STAXY:	STA	2,X
	STA	3,Y
	JMP	@GORET     
;
;	INCREMENT X AND Y BY COS AND SIN
LOOP:	LDA	1,FX
	LDA	0,COS
	ADDZ	0,1,SZC	;FX=FX+COS
	INC	2,2	;WAS CARRY, INC X
	STA	1,FX
	LDA	1,NEGX
	ADD	1,2	;X=X+NEGX
	LDA	1,FY
	LDA	0,SIN
	ADDZ	0,1,SZC	;FY=FY+SIN
	INC	3,3	;WAS CARRY,. INC Y
	STA	1,FY
	LDA 	1,NEGY
	ADD	1,3	;Y=Y+NEGY
G2:	LDA	0,PENDN
	SNZ	0,0	;SKIP	IF PEN DOWN
	JMP	PL2A	;PEN IS UP
	STA	2,X
	STA	3,Y
;
;	CHECK BOUNDS
PLOT1:	LDA	0,XMAX
	SLT	2,0	;SKIP X LT XMAX
	JMP	@PLOTX
	LDA	0,YMAX
	SLT	3,0	;SKIP Y LT YMAX
	JMP	@PLOTX
	LDA	0,XMIN	;
	SGE	2,0	;SKIP X GE XMIN
	JMP	@PLOTX
	LDA	1,YMIN
	SGE	3,1	;SKIP Y GE YMIN
	JMP	@PLOTX
;
;	PLOT A POINT
	LDA	0,COLR
	SN	0,0
	 JMP	COLRPT
	LDA	0,C17
	AND	2,0	;AC0 HAS LOW ORDER BITS OF X
	MOVZR	2,2	;X/16
	MOVZR	2,2
	MOVZR	2,2
	MOVZR	2,2
	MOVZL	3,3	;Y*32
	ADDZL	3,3
	ADDZL	3,3
	ADD	2,3	;WORD ADDRESS= (X/16) + Y*32
	LDA	2,.LMSK
	SUB	0,2	;INDEX INTO MASKS
	LDA	2,0,2
	INCZR	2,2	;GET SINGLE BIT
	LDA	1,XYBITS
	ADD	1,3	;TRUE WORD LOC IN CORE
	LDA	1,0,3	;LOAD WORD
	JMP	@INKING	;HERE AC3=ADDR OF WORD, AC1=OLD WORD,
			;AC0=BIT NUMBER, AC2=MASK FOR THAT BIT
INKING:	.-.
.LMSK:	LSTMSK	;PAGE1 PTR TO MASKS
C17:	17
PLOTX:	.-.
;
;	*INKING
BLACK:	AND#	2,1,SZR
	JMP	@PLOTX	;BIT WAS BLACK
BL1:	ADD	2,1
	STA	1,0,3	;MAKE IT BLACK
JPX:	JMP	@PLOTX
;
WHITE:	AND#	2,1,SNR
	JMP	@PLOTX	;BIT WAS WHITE
WH1:	SUB	2,1
	STA	1,0,3	;MAKE IT WHITE
	JMP	@PLOTX
;
XOR:	AND#	2,1,SNR
	JMP	BL1	;WAS WHITE - MAKE BLACK
	JMP	WH1	;WAS BLACK - MAKE WHITE
;
WID:	0	;COPIED FOR ADDRESSING!
COLR:	0	; "
.CVTAB:	CVTAB
FPTR:	0
C32:
CVTABC:	40	;*CONTIGUOUS
DBA:	0	;*
CVOFF:	-40
;
THICK:	LDA	1,C17
	SUB	0,1
	STA	1,DBA	;COMPLEMENT BIT NUMBER FOR CONVERT
	LDA	0,CVOFF
	ADD	3,0	;AC0 _ WORD ADDR OFFSET
	 JSR	IFWHIT
	LDA	3,FPTR
	LDA	2,@.CVTAB
	CONVERT	0
	NOP
	 JSR	IFWHIT
	JMP	@PLOTX
;
IFWHIT:	LDA	2,COLR
	SNL	2,2
	 JMP	0,3
	STA	3,COMBX	;PRE/POST COMPLEMENT FOR WHITE LINES
	LDA	1,WID
	SNZ	1,1
	 JMP	@PLOTX
	STA	1,CCNT
	LDA	3,C32
	MOV	0,2
	ADD	3,2
CLP:	LDA	1,0,2
	COM	1,1
	STA	1,0,2
	LDA	1,1,2
	COM	1,1
	STA	1,1,2
	ADD	3,2
	DSZ	CCNT
	JMP	CLP
	JMP	@COMBX
CCNT:	0
COMBX:	0
.WHITE:	WHITS
.BLACK:	BLAKS
.XOR:	XORS
;
;	/* DPLOT - PLOT ONE POINT */
DPLOTC:	STA	3,PLOTX	;ENTER HERE WITH X IN AC0, Y IN AC1
	MOV	0,2
	MOV	1,3
	JMP	PLOT1	;NOTE INK AND FRAME ARE LEFT FROM PREV
;	**WANT TO BLT THESE FIELDS IN***
;
;	/* COLOR-RELATED INITS */
CINITC:	STA	0,COLR	;COPY NEARBY
	SN	0,0
	 JMP	DOCOLR
	LDA	2,@.WHITE	;-1=WHITE
	INC	0,0,SNR
	 JMP	STINK
	LDA	2,@.XOR	;-2=XOR
	INC	0,0,SZR
	LDA	2,@.BLACK	;-3=BLACK
STINK:	STA	2,INKING
	JMP	0,3	;RETURN
;
DOCOLR:	LDA	1,C17
	AND	0,1	;4 BITS OF COLOR
	LDA	2,MAGIC
	ZER	0,0
	MUL		;MAGICALLY COPIED INTO ALL 4 POSITIONS
	STA	1,COLR4
	JMP	0,3	;RETURN
MAGIC:	10421	;HINT:  THIS = 1111 IN HEX
;
;	/* PLOT POINT IN COLOR */
;	;4 BITS (NIBBLE) PER POINT - 4 PER WORD
COLRPT:	LDA	0,WID
	SNZ	0,0
	 JMP	JPX
	STA	0,YCNT
	STA	0,XCNT
	LDA	0,C17
	MOVZR	2,2,SZC
	 JMP	.+3
	ADDZL	0,0	;NIBBLES 0,2 - SHIFT 4
	ADDZL	0,0
	MOVZR	2,2,SNC
	MOVS	0,0	;NIBBLES 0,1 - SHIFT 8
;			;NOW AC0 = NIBBLE MASK, AND AC2 = X/4
	ADDZL	3,3
	ADDZL	3,3
	ADDZL	3,3
	ADD	2,3	;WORD ADDR = (X/4) + Y*64
	LDA	1,XYBITS
	ADD	1,3	;TRUE WORD LOC
	STA	3,SWA	;SAVE WORD ADDR
	JMP	NIBL
;
NEXTX:	CYCLE	20-4	;CYCLE MASK TO MOVE RIGHT
	LDA	1,LNIBL
	SNE	0,1
	 ISZ	SWA	;INC ADDR AT WORD BOUND
	LDA	3,SWA
	LDA	1,WID
	STA	1,YCNT
	JMP	NIBL
;
NEXTY:	LDA	1,C100
	ADD	1,3	;INC 64 PER SCAN LINE
;
NIBL:	LDA	1,0,3	;OLD WORD
	COM	0,2
	AND	2,1	;KNOCK OUT OLD NIBBLE
	LDA	2,COLR4
	AND	0,2
	ADD	2,1	;ADD IN NEW NIBBLE
	STA	1,0,3
;
	DSZ	YCNT
	 JMP	NEXTY
	DSZ	XCNT
	 JMP	NEXTX
	JMP	JPX	;ADD IN NEW NIBBLE AND DONE
COLR4:	0
XCNT:	0
YCNT:	0
C100:	100
SWA:	0
LNIBL:	170000	;LEFTMOST NIBBLE
;
CFRAME:	;COLOR FRAME (512 BY 480)/2 - HALF RESOLN
	.RDX	10
	0
	255
	0
	239
	.RDX	8
;
;
;	/* GOTO CODE */
GOTOC:	STA	3,GTX
	JSR	GTINX	;GET X ARG, CALC DELTA-X
	JSR	GTINY	;   AND Y
	JSR	SQRT	;CALCULATE HYPOTENUSE
	JSR	GINCX	;DIVIDE INTO DELTA-X TO GET X-INC
	JSR	GINCY	;   AND Y
	LDA	0,HYPOT
	JSRII	.DOGO	;NOW DO A REGULAR TURTLE GO
	JSR	GFINX	;WRAP-UP (RESTORE XINC, CLEAN UP X)
	JSR	GFINY	;   AND Y
	JMP	@GTX
GTX:	0
.DOGO:	DOGO
;
;		*GET DESTINATION COORD, CALCULATE DELTA
GTINX:	LDA	2,.XB
	SKIP
GTINY:	LDA	2,.YB
	STA	2,BP	;STORE BLOCK-POINTER
	STA	3,SUBRT	;AND RETURN
	JSR	@.FECH
	JSR	@.IVAL	;GET ARG
	LDA	2,BP
	LDA	1,@.FMIN,2
	ADD	1,0	;MAKE DEST REL TO FRAME
	STA	0,DEST,2	;STORE IN DEST
	LDA	1,@.POS,2
	LDA	3,@.POSF,2	;ROUND OLD COORD
	SP	3,3
	INC	1,1
	SUB	1,0
	STA	0,DELTA,2	;DELTA _ DIFFERENCE
	JMP	@SUBRT
SUBRT:	0	;RETURN ADDRESS
BP:	0	;Y OR Y BLOCK POINTER
.XB:	XBLOK
.YB:	YBLOK
;		*CALCULATE VECTOR INCREMENTS
GINCX:	LDA	2,.XB
	SKIP
GINCY:	LDA	2,.YB
	STA	2,BP	;STORE BLOCK-POINTER
	STA	3,SUBRT	;AND RETURN
	ZER	1,1
	LDA	0,DELTA,2	;DIVIDE DELTA
	SP	0,0	;(ABS)
	NEG	0,0
	LDA	2,HYPOT	;BY HYPOTENUSE
	JSR	@.DIV	;TO GET VECTOR INCS
	SUBC	0,0,SZC	;CLEAR AC0 AND TEST CARRY
	ONE	0,0,SKP	;OV - SET TO 1
	SKIP
	ZER	1,1
	LDA	2,BP
	LDA	3,DELTA,2
	SP	3,3
	JSR	DNEGC	;FIX SIGNS AFTER DIV
	STA	0,@.INC,2	;INSTALL NEW INCREMENTS
	STA	1,@.INCF,2
	JMP	@SUBRT
;		*WRAP-UP; RESTORE INCS, FORCE COORD TO DEST
GFINX:	LDA	2,.XB
	SKIP
GFINY:	LDA	2,.YB
	LDA	1,DEST,2	;FORCE COORD TO BE DEST
	STA	1,@.POS,2
	ZER	1,1
	STA	1,@.POSF,2	;ZERO FRACT PART
	JMP	0,3
HYPOT:	0
;		*DOUBLE-PREC NEGATE OF AC0,AC1
DNEGC:	NEG	1,1,SZR	;NEGATE LOW PART
	COM	0,0,SKP	;COMP HIGH
	NEG	0,0	;OR NEGATE IF CARRY
	JMP	0,3
;		*THE GREAT DOUBLE-PRECIOUS SQUIRT ROUTINE
SQRT:	STA	3,SUBRT
	LDA	2,.XB
	LDA	1,DELTA,2
	SP	1,1
	NEG	1,1
	MOV	1,2
	ZER	0,0
	JSR	@.MUL	;X^2
	STA	0,TX
	STA	1,TX+1
	LDA	2,.YB
	LDA	1,DELTA,2
	SP	1,1
	NEG	1,1
	MOV	1,2
	ZER	0,0
	JSR	@.MUL	;Y^2
	JSR	DADD
	TX-.		;SUMMED
	STA	0,TX
	STA	1,TX+1	;STORE IN TX
	ONE	2,2	;HYPOT_1.  NOW HYPOT MEANS HYPOTHESIS
GLOOP:	MOVZR	0,0
	MOVR	1,1	;WHILE Z/4 # 0
	MOVZR	0,0
	MOVR	1,1,SNR
	MOV	0,0,SZR
	MOVZL	2,2,SKP	;HYPOT _ HYPOT*2
	SKIP
	JMP	GLOOP
	STA	2,HYPOT	;START NEWTON'S METHOD WITH HYPOT
NEWTN:	MOV	2,1
	ZER	0,0
	JSR	@.MUL	;HYPOT*HYPOT
	JSR	DNEGC
	JSR	DADD
	TX-.		;SUBTRACTED FROM TX
	SN	0,0
	JMP	.+3
	JSR	DNEGC	;FIX SIGNS FOR DIV
	ISZ	SIGN
	LDA	2,HYPOT
	JSR	@.DIV
	MOVZR	1,1	;DELTA_ERROR/(2*HYPOT)
	LDA	2,HYPOT
	DSZ	SIGN	;CHECK SIGN FIX
	ISZ	SIGN
	SUB	1,2,SKP
	ADD	1,2	;IMPROVE HYPOT
	STA	2,HYPOT
	SZE	1,1	;TEST IF DONE
	JMP	NEWTN
	DSZ	HYPOT	;FIX
	NOP
	JMP	@SUBRT	;NOW HYPOT MEANS HYPOTENUSE!
TX:	.BLK	2	;LOW PART IN .+1
SIGN:	0
;		*DOUBLE-PREC ADD TO AC0,AC1
DADD:	LDA	2,0,3
	ADD	3,2
	STA	2,DADT
	LDA	2,1,2
	ADDZ	2,1,SZC	;ADD LOW PARTS
	INC	0,0	;(CARRY)
	LDA	2,@DADT
	ADD	2,0	;THEN LOW PARTS
	JMP	1,3
DADT:	0
;		*X- AND Y-BLOCK TEMPLATES
DEST=0	;DESTINATION COORDINATE
DELTA=1	;CHANGE IN THIS COORD NEEDED
.POS=2	;LOC OF COORD INT PART
.POSF=3	; .. FRACT PART
.INC=4	;LOC OF INCREMENT INT PART
.INCF=5	; .. FRACT PART
.FMIN=6	;LOC OF FRAME MIN COORD VALUE
;
TABLC:	 0	;TABLE OF SINE (DEGREES)
 2167
 4357
 6545
 10733
 13117
 15302
 17462
 21640
 24014
 26164
 30330
 32471
 34626
 36756
 41102
 43220
 45330
 47433
 51530
 53616
 55676
 57746
 62007
 64037
 66060
 70071
 72070
 74057
 76034
 100000
 101731
 103650
 105555
 107447
 111325
 113171
 115020
 116634
 120433
 122215
 123763
 125514
 127227
 130725
 132405
 134046
 135472
 137076
 140464
 142033
 143363
 144673
 146163
 147433
 150664
 152073
 153263
 154431
 155557
 156663
 157747
 161010
 162031
 163027
 164003
 164736
 165646
 166533
 167377
 170217
 171015
 171570
 172320
 173025
 173506
 174145
 174560
 175147
 175513
 176034
 176331
 176602
 177027
 177231
 177406
 177540
 177646
 177730
 177766
 0	;BEWARE OF SPECIAL TREATMENT FOR 90 DEG
;
	20
	20
TFONTC:	SPOT0-.	;SPOT-FONT FOR THICK LINES
	SPOT0-.
	SPOT2-.
	SPOT3-.
	SPOT4-.
	SPOT5-.
	SPOT6-.
	SPOT7-.
	SPOT8-.
;
	000000	;NULL SPOT SO WIDTH=0 WORKS
SPOT0:	41
	1
;
	140000	;2X2
	140000
SPOT2:	41
	2
;
	160000	;3X3
	160000
	160000
SPOT3:	41
	3
;
	060000	;4X4
	170000
	170000
	060000
SPOT4:	41
	4
;
	070000	;5X5
	174000
	174000
	174000
	070000
SPOT5:	41
	5
;
	030000	;6X6
	074000
	176000
	176000
	074000
	030000
SPOT6:	41
	6
;
	034000	;7X7
	076000
	177000
	177000
	177000
	076000
	034000
SPOT7:	41
	7
;
	036000	;8X8
	077000
	177400
	177400
	177400
	177400
	077000
	036000
SPOT8:	41
	10
;
	.END 
      