;!!!!FILE MAINTENANCE ---  ADISP.SR

;!!!!CONVERTED TO COMPATIBILITY WITH ALTO ASSEMBLER--LOADER BY
;!!!!D. MERRY AND FRIENDS CIRCA 8/75

	.TITL ADISP


.GETNOLIST "SMALL.OPS"
.GETNOLIST "ASMALL.PARMS"
.GETNOLIST "SMALL.SYMS"
.GETNOLIST "PAGE1.PARMS"
.GETNOLIST "ANIM.OPS"
.GETNOLIST "ANIM.PARMS"
.GETNOLIST "ANIM.SYMS"

;****************ALTO OPCODES DEFINED EXTERNALLY**********
;
;.EXTN	DIR,EIR,BRI,VTINC,VMOVE,VSTORE,VORK,TRANS,VTINC
;.EXTN	FRAMEN,ANIMSW,SQUIRT,PAK,PAKEND
;
;.EXTN	DBF1,PBF1,DBF2,PBF2,BDCLEAR,BINIT,DOMOUS
;.EXTN	BTAB,BPICNO,BPRETAB,BTOP,CUR0,CORE0,DREAD,XDRAW
;.EXTN	PST,MULT,NULLP,BOARD,BLAST,VACAN,CS,XVAL,YVAL,PAUSE
;.EXTD	.INTN,.IVAL,DX,.LARG
;.EXTD MODE,STRUCT,.MULT,XCTR,YCTR,WXMIN,WXMAX,WYMIN,WYMAX
;.EXTD	BFPTR,MMIN,MMAX,.FREEUP,.BOARD,BMIN,AFREE,D3,D4,D36,.ADDSTK
;.EXTD	.CALL,CURSOR,.CHIGH,.CWIDE,.BWIDE,.TRAP
;.EXTD	.ERROR,.ERET,D4
;
;.EXTD	XYCB,AXYCB,TVDAT
;.ENT	TEST,INITTAB,TRAP,ERROR,ADDSTK,CALL,DISPLAY,DINIT,VERT
;
;.EXTN	SINTB,MXNUM,SINT1
;.EXTD	.LALO
;
;.EXTD	NCLAS,MXATM
;.EXTN	MXNUM,FPCLAS,FTR,FLD
;
;.EXTD	RCMSK,NCLAS



.ZREL		;!!!!ADDED--CULLED FROM AZREL
.TRAP:		TRAP
.ERROR:		ERROR
.CALL:		CALL
.ADDSTK:	ADDSTK

.SREL
VERT:		VERTC	;!!!!ENTRY
TEST:		TESTC
INITTAB:	INITTABC
ADISPLAY:	ADISPLAYC	;!!!!MADE 'A'DISPLAY--CONFLICT
DINIT:		DINITC



OPTABA:	OPTAB	;!!!!LOCALS FOR ADDRESSING PROBLEMS


OPINITA:	OPINIT	;!!!!WHAT LOOKS TO ME TO BE A DSPCH TABLE
OVERA:		OVER	;!!!!.BLK 6 AT END LOOKS FISHY, BUT DON'T
ATA:		AT	;!!!!REALLY UNDERSTAND WHAT'S GOING ON
MXA:		MX
MYA:		MY
INTEGA:		INTEG
PASTEA:		PASTE
OUTLNA:		OUTLN
;XDRAWA:	XDRAW	;!!!!CAN'T FIND ANYWHERE
WINDA:		WIND
CLEARA:		CLEARC
			;!!!!HAD TO ADD C TO GET ASSEMBLY
SEQA:		SEQC
			;!!!!HAD TO ADD C TO GET ASSEMBLY
INDIRECTA:	INDIRECT
NEGATEA:	NEGATE
MXABSA:		MXABS
MYABSA:		MYABS

DEFAULA:	DEFAUL
DIPL:		DIPLC


.STACK:		STACK	;!!!!LABEL PTING TO STACK HAVE TO
.MAXSTK:	MAXSTK	;!!!!BE FIXED AT DINIT TIME SINCE
			;!!!!STACK TAKEN OFF PAGE1 AND PUT
			;!!!!IN NREL

ALOAD:	ALOADC		;!!!!HAVE TO HAVE COPY OF SMALLTALK LOAD
ASTOR:	ASTORC		;!!!!AND STORE SINCE THEY ARE NO LONGER
			;!!!!REENTRANT--ALSO MAKE THEM DO THERE
			;!!!!WORK THRU AC2 AS THEY USED TO SINCE
			;!!!!THAT'S WHAT STEVE EXPECTED
INTN2:	INTN2C		;!!!!ADDRESSING PROBS




	.NREL
;	.TXTM	1		;!!!!??????
				;!!!!COMMENTED OUT--DON'T THINK 
				;!!!!NECESSARY -- WON'T ALLOW
				;!!!!ASSEMBLY
	.RDX	8

;***** U T I L I T I E S ******
 
TRAP:	JMP	TRAP	;UNRECOVERABLE ERRORS
			;!!!!THIS LOOKS LIKE INCESTUOUS LOOP TO ME
			;!!!!IS IT FIXED UP IN FROM SMALLTALK???
			;!!!!NO STORES INTO IT IN THIS MODULE

ERROR:	JSRII	.TEST	;POSSIBLY RECOVERABLE ERROR


;ERROR:	JMP	@.TEST	;POSSIBLY RECOVERABLE ERROR
			;!!!!WHAT WAS HERE---MUST GO THRU SREL
.TEST:	TEST

.BLK 6




STK0:	.BLK 140		;!!!!MAKE A BLOCK IN NREL -- SWAT USES
			;!!!!LOCATIONS IN PAGE1 THAT MAY OVERWRITE
			;!!!!PUT AT BEGINNING OF FILE SO AD ERROR
			;!!!!NOT GENERATED


;!!!!*********** LOAD AND STORE  ******
;!!!!HAD TO ADD --  ST VERSIONS BECAME NON-REENTRANT

ALOADC:
	LDA	2,MEMBITS
	ADD	1,2
	LDA	0,0,2
	JMP	0,3

;	/* STORE */
ASTORC:
	LDA	2,MEMBITS
	ADD	1,2
	STA	0,0,2
	JMP	0,3





;*********** I V A L ******
;
;	/* LOAD INTEGER VALUE */

IVAL2:
	STA	3,IVRET
	JSR	ISIT2		;CHECK FOR INTEGER
	NCLAS
	JMP	NOTI		;NOPE
	MOV	1,0		;**.ISIT LEAVES VAL IN AC1 !
	JMP	@IVRET
;!!!!BUT I DON'T SEE ANY FLOATING POINT STUFF IN THE ANIMATION
;!!!!LOAD?????????????

NOTI:
	JSR	ISIT2
;	.FPCLAS			;NOW CHECK FOR FLOATING
	FPCLAS			;!!!!IN PAGE0--HOPE MEANS SAME
				;!!!!AS PURCELL INTENDED


	JMP	IVERR		;NOPE
	MOV	0,1		;YES, FIX IT!
	ZERO	0,0
		;!!!!MADE INTO JSRII'S
	JSRII	.FLD		;LOAD FLOATING REG
	JSRII	.FTR		;AND RETURN IPART
		;!!!!WHAT WAS HERE
;	JSR	@.FLD		;LOAD FLOATING REG
;	JSR	@.FTR		;AND RETURN IPART
	JMP	@IVRET
;.FPCLAS:	FPCLAS		;FLOATING-POINT TYPE
				;!!!!SEE ABOVE
.FTR:	FTR			;TRUNCATE RTN
.FLD:	FLD			;FLOATING LOAD RTN
IVERR:	JSR	@.ERROR
IVRET:	0

;
;******* I N T N *******
; 
; 
;	/* NUMERIC INTERN */
;	JSR	INTN2C		;INTERN NUMBER PASSED IN AC0


INTN2C:				;RESULT RETURNED IN AC0
	LDA	1,.SI1
	NEG	1,1
	ADD	0,1
	SKNNG	1,1		;CHECK IF .GE. SMALLEST SML INT
	JMP	NEWI		;NOPE
	LDA	2,.SIB
	ADD	1,2
	LDA	1,.MXNUM
	SKLE	2,1		;CHECK IF .LE. LARGEST SML INT
	JMP	NEWI		;NOPE
	MOV	2,0
	JMP	0,3		;YEP, RETURN THE ADDRESS
NEWI:
	STA	3,INT2		;OTHERWISE MAKE UP A NEW ONE 
	STA	0,INT1
	LDA	0,CC2
	JSR	@.LALO
	STA	2,INT3
	MOV	2,1		;INSTALL TYPE
	LDA	0,NCLAS
	JSRII	.ASTOR		;!!!!ASTOR COPY OF ST STOR EXCEPT
				;!!!!DOES ITS WORD VIA AC2
	LDA	0,INT1		;AND VALUE
	LDA	1,INT3
	INC	1,1
	JSRII	.ASTOR		;!!!!ASTOR COPY OF ST STOR EXCEPT
				;!!!!DOES ITS WORD VIA AC2
	LDA	0,INT3
	JMP	@INT2
INT1:	0
INT2:	0
INT3:	0
.SI1:	SINT1			;VAL OF SMALLEST SML INT
.SIB:	SINTB			;BASE (ADDR) OF SML INTS
.MXNUM:	MXNUM			;HIGHEST SML INT ADDR


;****** I S I T 2  ***********
;
;	/* TYPE CHECK */

ISIT2:
	STA	0,ISAV0
	STA	3,ISAV3
	MOV	0,1
	JSRII .ALOAD		;GET TYPE
				;!!!!ALOAD COPY OF ST LOAD
	LDA	2,RCMSK
	AND	2,0		;MASK OUT REF CNT
	LDA	3,@ISAV3
	LDA	2,0,3		;PICK UP PASSED ARG
	LDA	3,NCLAS
	IFE	3,2
	JMP	NCHEK		;(SPECIAL CHECK FOR NUMBERS)
IS1:
	IFE	0,2
ISX:
	ISZ	ISAV3		;SKIP-RETURN IF MATCHES
	LDA	0,ISAV0
	LDA	3,ISAV3
	JMP	1,3
NCHEK:
	LDA	2,ISAV0		;NUMBER - CHECK FIRST
				;FOR SMALL INTEG
	LDA	3,.MXNUM
	SKLE	2,3
	JMP	NOTSI		;TOO BIG
	LDA	3,.SIB
	SKLE	3,2
	JMP	NOTSI		;TOO SMALL
	SUB	2,3
	LDA	1,.SI1		;YEP, GET VAL INTO AC1(FOR IVAL)
	SUB	3,1
	JMP	ISX		;AND SO IT SHALL BE...
NOTSI:
	LDA	2,NCLAS
	JMP	IS1		;NON-SMALL INTEGS LIKE ALL THE REST
ISAV0:	0
ISAV3:	0

.ALOAD:	ALOAD			;!!!!LABELS FOR CALLING
.ASTOR:	ASTOR			;!!!!LOCAL LOAD AND STORE



;****** S E Q  **********
.BLK	5
	SEQNODE	=-3
;	TEMP	=-2		;DEFINED IN 'AT'
	SEQN	=1
	SEQV	=2
	SEQDN	=3

CC2:	2
STAKK:	.-.			;SAVE THE STACK PTR HERE
NOSTEP:	.-.			;SUBSEQUENCES REPORT
				;0=FINISHED   >0=CONTINUING
HOLDIT:	.-.			;TEMPORARY 

SEQC:
	JSR	@.ADDSTK
	3
	LDA	AC3,SEQNODE,STK2
	LDA	AC0,SEQN,VIA3
	STA	AC0,0,STK2
	JSR	@.CALL		;EVAL (NODE.SEQN)
	LDA	AC0,0,STK2
	LDA	AC3,SEQNODE,STK2
	LDA	AC3,SEQV,VIA3
	LDA	1,CC2
	ADD	0,1		;SEQN+2
	ADD	3,1		;VECTOR ADDRESS  +SEQN+2
	STA	2,STAKK
	JSRII	.ALOAD		;FETCH CONTENT OF VECTOR
				;!!!!ALOAD COPY OF ST LOAD--
				;!!!!BUT RETURNS AD IN AC2
	LDA	2,STAKK
	STA	AC0,0,STK2	;PLACE ON STAK TO EVAL
	ZERO	0,0
	STA	0,NOSTEP	;SET NOSTEP SWITCH
	JSR	@.CALL
	LDA	AC0,0,STK2
	STA	AC0,TEMP1,STK2	;TEMP1 _ EVAL (NODE.SEQV[SEQN])
	LDA	1,NOSTEP
	SKZ	1,1
	JMP	ENUF		;IF A SUB OBJ STOPS THE
				;SEQ FROM INCREMENTING
	LDA	AC3,SEQNODE,STK2
	LDA	AC0,SEQDN,VIA3
	STA	AC0,0,STK2
	JSR	@.CALL		;EVAL (NODE.SEQDN)
	LDA	AC3,SEQNODE,STK2
	STA	2,STAKK
	LDA	0,SEQN,VIA3
	JSR	IVAL2
	LDA	2,STAKK
	LDA	1,0,STK2
	IFZ	1,1
	JMP	ENUF
	ADD	1,0
	STA	0,HOLDIT
	LDA	AC3,SEQNODE,STK2
	LDA	1,SEQV,VIA3
	INC	1,1
	JSRII	.ALOAD		;GET VECTOR LENGTH
				;!!!!ALOAD COPY OF ST LOAD--
				;!!!!BUT RETURNS AD IN AC2
	MOV	0,1
	ONE	2,2		;SET SW TO NOSTEP
	LDA	0,HOLDIT
DNTRIM:
	SKGE	0,1
	JMP	UPTRIM
	SUB	1,0
	ZERO	2,2
	JMP	DNTRIM
UPTRIM:
	SKN	0,0
	JMP	TRIMMED
	ADD	1,0
	ZERO	2,2
	JMP	UPTRIM
TRIMMED:
	STA	2,NOSTEP	;SET NOSTEP FLAG
	JSRII	.INTN2
	LDA	2,STAKK
	LDA	AC3,SEQNODE,STK2
	STA	0,SEQN,VIA3
ENUF:
	LDA	AC0,TEMP1,STK2	;AC0_RESULTING VALUE
	STA	AC0,SEQNODE,STK2	;REPLACE SEQNODE BY VALUE
	JSR	@.ADDSTK
	-3
	JMP	@APC,STK2	;RETURN
				;!!!!MADE 'A'PC -- ASSEMBLY CONFLICT

.INTN2:	INTN2			;!!!!ADDRESSING PROBS

	.RDX	8

;STK0=640		;***NOTE !! THIS PUTS STACK IN PAGE 1 ****
;STK0:	.BLK 140		;!!!!MAKE A BLOCK IN NREL -- SWAT USES
			;!!!!LOCATIONS IN PAGE1 THAT MAY OVERWRITE
			;!!!!PUT AT BEGINNING OF FILE SO AD ERROR
			;!!!!NOT GENERATED


STKLEN=134


.BLK	10

;****** E V A L * * * 
;  JSR TO CALL WITH EXP ON STACK
;  AC2 (THE STACK PTR) MUST BE SAVED AND RESTORED IF USED !!!!

	.RDX	8
	APC	= -1		;DEPTH OF RETURN PC IN STACK
				;!!!!MAKE 'A'PC--ASSEMBLY CONFLICT
	LSHASHBIT =3		;TO RIGHT JUSTIFY HASH BITS
HASHBITS:	370		;BITS TO HASH ON IN OP LOOK UP
NOTRCBITS:	177770		;MASK FOR REF CT IN
				;SMTALK CLASS PTRS
.OPTAB:	OPTABA			;!!!!HAVE TO GO THRU SREL


CALL:
	STA	AC3,APC,STK2	;SAVE RETURN ADDRESS ON THE STACK
				;!!!!MADE 'A'PC--ASSEMBLY CONFLICT
EVAL:
	LDA	AC0,0,STK2	;GET TOP OF STACK TO EVAL
	INC	0,1,SNR		;CHECK FOR NIL   PUT ZERO IN AC1
	JMP	ANIL		;-1 IS SPECIAL (NIL) CASE.
				;TREAT LIKE ZERO
				;!!!!MADE 'A'NIL -- ASSEMBLY CONFLICT
	STA	2,STAK		;SAVE STACK POINTER
	JSR	ISIT2		;TEST FOR INTEGER
	NCLAS
	JMP	NONUM
	LDA	2,STAK
ANIL:
				;!!!!MADE 'A'NIL -- ASSEMBLY CONFLICT
	STA	AC1,0,STK2	;ISIT RETURNS INTEGER VALUE IN AC1
	JMP	@APC,STK2
				;!!!!MADE 'A'PC--ASSEMBLY CONFLICT

NONUM:
	LDA	1,@STAK		;GET TOP OF STACK TO EVAL

	JSRII	.ALOAD		;SMTALK LOAD OF TOP OF STACK
				;!!!!ALOAD A COPY OF ST LOAD
				;!!!!EXCEPT RETURNS AD IN AC2
	STA	2,@STAK		;CHANGE SMT POINTER ON
				;STACK TO ABSOLUTE PTR
	LDA	2,STAK		;RESTORE STACK

	JSR	HASH
	JSR	@.ERROR		;ERROR RETURN
	IFZ	3,3		;NORMAL GOOD RETURN, TEST FOR NOP
	JMP	@APC,STK2		;ASSUME NOP
	LDA	AC3,OPSTART-OPTAB,VIA3	;SUCCESS
	IFZ	3,3		;TEST FOR EMPTY (DELETED) ENTRY
	JSR	@.ERROR		;TRAP ON  ZERO OPSTART
	JSR	0,AC3		;JUMP TO START OF OP
	STA	AC0,0,STK2	;RETURN VALUE IN AC0 / AC2=STK
	JMP	@APC,STK2

STAK:	.-.

;***** H A S H  ******
;  AC0 = CLASS  RETURNS TOLURE
; OR RETURNS TO AC3 ON FAILURE

RETGOOD: .-.
RETBAD:  .-.

HASH:
	STA	3,RETBAD
	INC	3,3
	STA	3,RETGOOD
	LDA	3,NOTRCBITS	;(K177770)
	AND	0,3		;SAVE OP AND NOTRCBITS IN AC3
	IFZ	3,3		;TEST FOR ZERO
	JMP	@RETGOOD	;MAKES ZERO RETURN ZERO IN AC3
	LDA	0,HASHBITS	;(K370)
	AND	3,0
	LCYL-LSHASHBIT		;(3)  RIGHT JUSTIFY HASH
				;NO.(DESTROYS AC1)
				;!!!!WHAT MEANS LCYL -- CAN'T FIND
				;!!!!ANYWHERE??????????

	MOV	3,1
	LDA	3,@.OPTAB	;!!!!INSERTED @ --HE'S TRYING TO GET
				;!!!!ADDRESS--HAVE TO GO THRU SREL

	ADD	0,3
TRY:
	LDA	AC0,OPNAMES-OPTAB,VIA3	;HASH INTO OPTAB
	IFE	0,1
	JMP	@RETGOOD	;SUCCESS
NOTQUITE:
	IFZ	0,0		;COLLISION IN HASH TABLE
	JMP	@RETBAD		;NO MORE TRYS
	IFN1	0,0
	JSR	@.TRAP		;OFF THE END OF HASH TABLE
	INC	3,3
	JMP	TRY		;TRY AGAIN


;**** I N D I R E C T ****
INDIRECT:
	LDA	AC3,0,STK2
	LDA	AC0,1,VIA3
	STA	AC0,0,STK2
	JMP	EVAL

;******** T A B L E    U T I L I T I E S ********
;PUTTAB CALLED WITH AC0= CLASS; AC1= OPSTART
;(ZERO EFFECTIVELY DELETES)

;.OPINIT: OPINIT		;!!!!WHAT WAS HERE--TABLE AND LOAD
;OPINIT: 0		;!!!!HOPEFULLY ALTERED APPROPRIATELY
;	OVER		;!!!!BELOW
;	AT
;	MX
;	MY
;	INTEG
;	PASTE
;	OUTLN
;	XDRAW
;	WIND
;	CLEAR
;	SEQ
;	INDIRECT
;	NEGATE
;	MXABS
;	MYABS
;	.BLK	6



.OPINIT: OPINITA
OPINIT: 0
	OVERA
	ATA
	MXA
	MYA
	INTEGA
	PASTEA
	OUTLNA
;	XDRAWA			;!!!!CAN'T FIND ANYWHERE
	0			;!!!!BUT KEEP SPACE SO OFFSETS STAY
				;!!!!CORECT--MAYBE CAN CORRECT LATER
	WINDA
	CLEARA
	SEQA
	INDIRECTA
	NEGATEA
	MXABSA
	MYABSA
	.BLK	6

INITTABC:
	ONE	1,1
	JSR	@.LARG
	JSR	@.IVAL
	LDA	1,KN100
	AND	0,1,SZR
	JMP	DIRECT
;	LDA	2,.OPINIT	;!!!!WHAT WAS HERE
;	ADD	0,2
;	LDA	0,0,2
	LDA	2,@.OPINIT	;!!!!GET AD OF TABLE INTO AC2
	ADD	0,2		;!!!!ADD OFFSET
	LDA	0,@0,2		;!!!!THIS SHOULD GET THRU SREL
				;!!!!AND REAL ADDRESS OF ROUTINES
				;!!!!INTO AC0, BUT BEWARE IF
				;!!!!SOMETHING IS PUT INTO BLOCK
				;!!!!IMMEDIATELY BELOW AT .BLK 6

				;!!!!WHERE IS INITTAB CALLED FROM
				;!!!!ANYWAY--I CAN'T FIND IT AS
				;!!!!EXTERNAL ANYWHERE
				;!!!!CALLED FROM 'INTERPRET' IN KAOS
				;!!!!SMALLTALK CODE

DIRECT:	STA	0,OSTRT
	LDAF	ARG0
	JSR	@.IVAL
	JSR	HASH		;LOOK UP AC0 IN HASH TABLE
	NOP
	LDA	0,OSTRT
	IFZ	3,3		;CAN NOT HASH ON ZERO
	JMP	@.ERET
	STA	AC0,OPSTART-OPTAB,VIA3	;STORE ENTRY IN TABLE
	STA	AC1,OPNAMES-OPTAB,VIA3	;STORE NAME IN  TABLE
	JMP	@.ERET

OSTRT:	.-.
KN100:	-100

;
;***** O P   T  A B L E  ***
; CONTAINS NAMES AND STARTING ADDRESSES OF "SMTALK" CLASS/OPS
;  WHICH THE INTERPRETER RECOGNIZES

	.RDX	8

OPNAMES:	.-.
OPTAB	=OPNAMES
	.BLK	50
	-1
OPSTART:	.-.		;10 OVERFLOW ENTRIES PAST THE END
	.BLK	50
	-1



;***** A D D S T K  *****

.BLK 1

;PICKS UP INTEGER AT AC3, ADDS IT TO STACK, CHECKS FOR OVERFLOW 
;AND RETURNS TO AC3 + 1

ADDSTK:
	LDA	AC0,0,VIA3
	ADD	AC0,STK2
	LDA	0,MAXSTK	;CHECK FOR STACK OVERFLOW
	IFL	0,STK2
	JSR	@.ERROR
	JMP	1,AC3		;RETURN TO AC3 +1 (SKIP OVER ARG)

;!!!!PUT STACK INTO NREL-- SO THESE LABELS SETUP AT INIT TIME
MAXSTK:	0
STACK:	0			;INITIALIZE TO BOTTOM OF STACK

;MAXSTK:	STK0+STKLEN
;STACK:	STK0			;INITIALIZE TO BOTTOM OF STACK


.BLK	10




;*** A T ******

.BLK 5

;AT IS CALLED WITH 3 PARAMETERS X, Y, PIC
;IT TRANSLATES PIC BY <X,Y> AND RETURNS VALUE OF PIC

	ATNODE	= -4	;DISPLACEMENTS INTO STACK TO FIND LOCALS
	TEMP1	= -2	;DISPLACEMENTS INTO STACK TO FIND LOCALS
	TEMP2	= -3	;DISPLACEMENTS INTO STACK TO FIND LOCALS

	ATX	=1	;FIELD OF AT INSTANCE
	ATY	=2	;FIELD OF AT INSTANCE
	ATPIC	=3	;FIELD OF AT INSTANCE

AT:
	JSR	@.ADDSTK
	4
	LDA	AC3,ATNODE,STK2
	LDA	AC0,ATX,AC3	;EVAL (NODE . ATX)
	STA	AC0,0,STK2
	JSR	@.CALL
	LDA	AC0,0,STK2
	STA	AC0,TEMP1,STK2	;TEMP1 _ <NODE . ATX>
	LDA	AC3,ATNODE,STK2
	LDA	AC0,ATY,VIA3
	STA	AC0,0,STK2	;EVAL (NODE . ATY)
	JSR	@.CALL
	LDA	AC0,YCTR
	STA	AC0,TEMP2,STK2
	LDA	AC1,0,STK2	;<TEMP2, YCTR> _<YCTR, YCTR +
	MOVL	1,3		;LOAD CARRY
	MOVR	1,1		;SIGN EXTEND CARRY
	MOVL	1,3		;LOAD CARRY
	MOVR	1,1		;SIGN EXTEND CARRY
	ADD	1,0		;EVAL(NODE . ATY)
	STA	0,YCTR

	LDA	0,XCTR
	LDA	AC1,TEMP1,STK2
	STA	AC0,TEMP1,STK2	;<TEMP1, XCTR>_<XCNTR,XCTR+TEMP1>
	MOVL	1,3		;LOAD CARRY
	MOVR	1,1		;SIGN EXTEND CARRY
	MOVL	1,3		;LOAD CARRY
	MOVR	1,1		;SIGN EXTEND CARRY
	ADD	1,0
	STA	0,XCTR
	LDA	AC3,ATNODE,STK2
	LDA	AC0,ATPIC,VIA3
	STA	AC0,0,STK2
	JSR	@.CALL		;EVAL(NODE . PIC)
	LDA	AC0,TEMP1,STK2
	STA	0,XCTR		;<XCTR, YCTR> _ <TEMP1, TEMP2>
	LDA	AC0,TEMP2,STK2
	STA	0,YCTR
	LDA	AC0,0,STK2
	STA	AC0,ATNODE,STK2	;STK . ATNODE _ <NODE . PIC>
	JSR	@.ADDSTK
	-4
	JMP	@APC,STK2	;RETURN WITH <NODE . PIC>




	;***** O V E R L A Y ****

.BLK 5

;FIRST PIC IS OVERLAYED BY THE SECOND

	OVNODE	=-2	;DISPLACEMENTS INTO STACK TO FIND LOCALS

	UNDER	=1	;FIELD OF OVERLAY INSTANCE
	AON	=2	;FIELD OF OVERLAY INSTANCE
			;!!!!MADE 'A'ON-- ON ENTRY IN AINTR.SR

OVER:
	JSR	@.ADDSTK
	2
	LDA	AC3,OVNODE,STK2
	LDA	AC0,UNDER,AC3	; (STK . NODE) . UNDER
	STA	AC0,0,STK2
	JSR	@.CALL		;EVAL (NODE . UNDER)
	LDA	AC3,OVNODE,STK2
	LDA	AC0,AON,AC3	; (STK . NODE) . ON
	STA	AC0,0,STK2
	JSR	@.CALL		;EVAL (NODE . ON)
	LDA	AC0,0,STK2
	STA	AC0,OVNODE,STK2	;RETURN LAST (PSEUDO)VALUE
	JSR	@.ADDSTK
	-2
	JMP	@APC,STK2








;************ W I N D O W *****

.BLK 5

	WNODE	=-6	;DISPLACEMENTS INTO STACK TO FIND LOCALS
			;TEMP1,2 ARE DEFINED ABOVE AS -2,-3
	TEMP3	= -4	;DISPLACEMENTS INTO STACK TO FIND LOCALS
	TEMP4	= -5	;DISPLACEMENTS INTO STACK TO FIND LOCALS

	WNXMIN	=1	;FIELD OF WIND INSTANCE
	WNXMAX	=2	;FIELD OF WIND INSTANCE
	WNYMIN	=3	;FIELD OF WIND INSTANCE
	WNYMAX	=4	;FIELD OF WIND INSTANCE
	WPIC	=5



WIND:
	JSR	@.ADDSTK
	6
	LDA	AC3,WNODE,STK2
	LDA	AC0,WNXMIN,VIA3	;EVAL(NODE. WNXMIN)
	STA	AC0,0,STK2
	JSR	@.CALL
	LDA	AC1,0,STK2
	MOVL	1,3		;LOAD CARRY
	MOVR	1,1		;SIGN EXTEND CARRY
	MOVL	1,3		;LOAD CARRY
	MOVR	1,1		;SIGN EXTEND CARRY
	LDA	0,XCTR
	ADD	0,1
	LDA	0,WXMIN
	STA	AC0,TEMP1,STK2
	IFL	0,1		;SIGNED COMPARE OF MIN AND NEW
	STA	AC1,WXMIN	;NEW MIN

	LDA	AC3,WNODE,STK2
	LDA	AC0,WNXMAX,VIA3		;EVAL(NODE. WNXMAX)
	STA	AC0,0,STK2
	JSR	@.CALL
	LDA	AC1,0,STK2
	MOVL	1,3		;LOAD CARRY
	MOVR	1,1		;SIGN EXTEND CARRY
	MOVL	1,3		;LOAD CARRY
	MOVR	1,1		;SIGN EXTEND CARRY
	LDA	0,XCTR
	ADD	0,1
	LDA	0,WXMAX
	STA	AC0,TEMP2,STK2
	IFG	0,1		;SIGNED COMPARE OF MAX AND NEW
	STA	AC1,WXMAX	;NEW MAX

	LDA	AC3,WNODE,STK2
	LDA	AC0,WNYMIN,VIA3		;EVAL(NODE. WNYMIN)
	STA	AC0,0,STK2
	JSR	@.CALL
	LDA	AC1,0,STK2
	MOVL	1,3		;LOAD CARRY
	MOVR	1,1		;SIGN EXTEND CARRY
	MOVL	1,3		;LOAD CARRY
	MOVR	1,1		;SIGN EXTEND CARRY
	LDA	0,YCTR
	ADD	0,1
	LDA	0,WYMIN
	STA	AC0,TEMP3,STK2
	IFL	0,1		;SIGNED COMPARE OF MIN AND NEW
	STA	AC1,WYMIN	;NEW MIN

	LDA	AC3,WNODE,STK2
	LDA	AC0,WNYMAX,VIA3	;EVAL(NODE. WNYMAX)
	STA	AC0,0,STK2
	JSR	@.CALL
	LDA	AC1,0,STK2
	MOVL	1,3		;LOAD CARRY
	MOVR	1,1		;SIGN EXTEND CARRY
	MOVL	1,3		;LOAD CARRY
	MOVR	1,1		;SIGN EXTEND CARRY
	LDA	0,YCTR
	ADD	0,1
	LDA	0,WYMAX
	STA	AC0,TEMP4,STK2
	IFG	0,1		;SIGNED COMPARE OF MAX AND NEW
	STA	AC1,WYMAX	;NEW MAX
	LDA	AC3,WNODE,STK2
	LDA	AC0,WPIC,VIA3
	STA	AC0,0,STK2	;EVAL(NODE. PIC)
	JSR	@.CALL
	LDA	AC0,TEMP1,STK2
	STA	0,WXMIN		;RESTORE WXMIN
	LDA	AC0,TEMP2,STK2
	STA	0,WXMAX		;RESTORE WXMAX
	LDA	AC0,TEMP1,STK2
	STA	0,WYMIN		;RESTORE WYMIN
	LDA	AC0,TEMP2,STK2
	STA	0,WYMAX		;RESTORE WYMAX
	LDA	AC0,0,STK2
	STA	AC0,WNODE,STK2
	JSR	@.ADDSTK
	-6
	JMP	@APC,STK2



;********** I N T E G E R  ***********

.BLK 5

INTEG:
	LDA	AC3,0,STK2
	LDA	AC0,1,VIA3
	STA	AC0,0,STK2
	JMP	@APC,STK2




;********** M I N U S ***********
	
	MNODE	=-2
	ARG	=1

NEGATE:
	JSR	@.ADDSTK
	2
	LDA	AC3,MNODE,STK2
	LDA	AC0,ARG,VIA3
	STA	AC0,0,STK2
	JSR	@.CALL
	LDA	0,0,STK2
	NEG	0,0
	LDA	1,CCC3		;TO MAKE ROUND OFF AND NEG COMMUTE
	ADD	1,0
	STA	0,MNODE,STK2
	JSR	@.ADDSTK
	-2
	JMP	@APC,STK2

CCC3:	3




;********* O U T L I N E ***************

.BLK 5

	.RDX	4
TOP:	33000000
BOT:	00000033
LEFT:	20202020
RIGHT:	01010101
	.RDX	8
CENTER:	4040
W:	.-.
H:	.-.
TVWIDE:	100		;************ WHY IS THIS FIXED????
STKSAV:	.-.
WRET:	.-.

	.RDX	10



WINDFUN:
	STA	3,WRET
	STA	2,STKSAV
	LDA	0,WXMIN
	LDA	1,WYMAX		;UPPER LEFT CORNER
	NEG	1,1		;DISP Y IS COMPLIMENT OF VIRTUAL Y
	LDA	2,TVWIDE
	JSR	@.MULT		;WXMIN + WYMIN*TVWIDE
	LDA	2,BFPTR
	ADD	1,2
	LDA	0,CENTER
	ADD	0,2
	LDA	0,WYMIN
	LDA	1,WYMAX
	SUB	0,1
	SKSP	1,1
	JMP	FINWIN		;WINDOW IS NULL
	STA	1,H
	LDA	0,WXMIN
	LDA	1,WXMAX
	SUB	0,1
	SKSP	1,1
	JMP	FINWIN		;WINDOW IS NULL
	STA	1,W
	JMP	@WRET
OUTLN:
	JSR	WINDFUN
	ONE	3,3
	LDA	0,TOP
	VORK
	SUB	3,2
	LDA	1,H
	LDA	3,TVWIDE
	LDA	0,RIGHT
	VORK
	SUB	3,2
	NEG1	3,3
	LDA	1,W
	LDA	0,BOT
	VORK
	INC	2,2
	LDA	3,TVWIDE
	NEG	3,3
	LDA	1,H
	LDA	0,LEFT
	VORK
FINWIN:
	LDA	2,STKSAV
	JMP	@APC,STK2


CLRFROM:	.-.

CLEARC:
	JSR	WINDFUN
	LDA	3,TVWIDE
	ZERO	0,0
	ADC	0,2		;VSTORE TAKES START-1
CLRLOOP:
	STA	2,CLRFROM
	VSTORE
	LDA	2,CLRFROM
	ADD	3,2
	LDA	1,W
	DSZ	H
	JMP	CLRLOOP
	JMP	FINWIN







; ********** P A S T E   *********

.BLK 4

;MOST OF THE PASTE ROUTINE IS A SEPARATE PROGRAM
;CALLED PST;  IT TAKES THE PIC PTR IN AC0

	PSTNODE	=-2

;	PICNO	=1		;!!!!IN ANIM.PARMS



.PST:	PST
SVSTACK:.-.
CTBADPIC:.-.

PASTE:
	JSR	@.ADDSTK
	2
	LDA	AC3,PSTNODE,STK2
	LDA	AC0,PICNO,VIA3
	STA	AC0,0,STK2		;EVAL(NODE. PICNO)
	JSR	@.CALL
	LDA	AC0,0,STK2
	STA	AC2,SVSTACK
	JSR	PICPTR		;ROUTINE ASSURES PIC IS IN CORE AND
	SKZ	0,0		;RETURNS POINTER OR ZERO FOR ERROR
	JSRII	.PST		;JUMP TO REAL PASTE PROGRAM
	ZERO	0,0		;ZERO TO INDICATE NO ERROR
BAD:
	LDA	2,SVSTACK
	STA	AC0,PSTNODE,STK2
	JSR	@.ADDSTK
	-2
	JMP	@APC,STK2









;******* P I C P T R **********

.BLK 5

.LASTPIC:LASTPIC
	.RDX	8

PICPTR:
	LDA	2,MMAX
	IFN	0,0
	JMP	OOPS
	LDA	1,.LASTPIC
	IFG	0,1
	JMP	OOPS
	SUB	0,2
	LDA	AC0,0,VIA2
	IFZ	0,0
	JMP	OOPS

	MOVL	0,1		; IF THE TWO M.S.BITS ARE 1
				;THEN CORE PTR 
	ANDL	0,1,SNC		;(ILLEAGLE AS DISK ADDRESSE)
	JMP	SWAPIN		;I.E.  PICTURE IS ON DISK
	ADD	2,0
	JMP	0,AC3
OOPS:
	ZERO	0,0		;SERIAL NO OUT OF BOUNS OR NILPIC
	JMP	0,AC3

ENTRY:	.-.

SWAPIN:
	STA	3,INRET		;AC1=DISK ADDRESS
	STA	2,ENTRY
	STA	0,DADD1
	JSR	@.FREEUP
	400
	STA	2,CADD1
	LDA	3,ENTRY
	SUB	3,2
	STA	AC2,0,VIA3	;NEW POINTER IN PIC TABLE -- SELF REL
;	JSR	@.DREAD		;!!!!CAN'T FIND ANYWHERE
				;!!!!UNDEFINED ON NOVA MAP

DADD1:	.-.
CADD1:	.-.			;!!!!REPLACES CORE0
;	CORE0			;!!!!UNDEFINED BEST I CAN TELL
				;!!!!COMMENTED OUT TO GET ASSEMBLY

	LDA	2,CADD1
	LDA	AC0,0,VIA2
	STA	0,LONG
	LDA	1,D256
	IFLE	0,1
	JMP	RDONE
	NEG	1,1
	AND	1,0		;ROUND OFF LENGTH TO
				;GET REMAINING LENGTH
	STA	0,ARG1
	MOVS	0,0
	STA	0,PCT
	JSR	@.FREEUP
ARG1:	.-.
	STA	2,CADD2
RDLOOP:	0	;JSR	@.DREAD	;!!!!CAN'T FIND ANYWHERE
				;!!!!UNDEFINED ON NOVA MAP
				;!!!!PUT ZERO AT RDLOOP TO
				;!!!!ASSEMBLY TO HAPPEN --
				;!!!!BUT IS THIS CODE BEING USED

DADD2:	1
CADD2:	.-.

	DSZ	PCT
	JMP	RDLOOP
RDONE:
	LDA	0,LONG
	LDA	1,K377
	COM	0,0
	AND	0,1
	LDA	2,AFREE
	ADC	1,2
	STA	2,AFREE
	LDA	0,CADD1
	JMP	@INRET		;SHOULD PUT PIC PTR IN AC0

D256:	400
K377:	377
PCT:	.-.
LONG:	.-.
INRET:	.-.
;.DREAD:	DREAD		;!!!!UNDEFINED ON NOVA MAP









;******** D I S P L A Y ********
.BLK 5
	.RDX	10
HTVNIB	=64
WTVWORD	=16

;THE BUFFERS(D,PBF1,2) ARE DEFINED IN HCORE

ASTACK:		.STACK		;!!!!PTRS TO STACK & MAXSTK IN SREL
AMAXSTK:	.MAXSTK
.SQUIRT:	SQUIRT
.PAKEND:	PAKEND
.PAK:		PAK
.FIXINTRTABS:	FIXINTRTABS	;!!!!NREL TABLE FIXUP ROUTINES
.FIXLDCURTABS:	FIXLDCURTABS
.FIXEASELTABS:	FIXEASELTABS
.FIXPASTETABS:	FIXPASTETABS
.FIXTRAPSTABS:	FIXTRAPSTABS
.FIXUTILTABS:	FIXUTILTABS


DISW:		1

DINITC:
	DSZ	DISW
	JMP	REINIT
	JSR @.PNT		;!!!!STACK PUT IN NREL--FIXUP PTRS 
	STK0-.			;!!!!TO IT
	LDA 3,ASTACK		;!!!!AD GOES INTO LABEL AT STACK
	STA 0,@0,3
	LDA 1,STKLEN		;!!!!MAXSTK IS STK0+STKLEN
	ADD 0,1
	LDA 3,AMAXSTK
	STA 1,@0,3
	INC 0,0			;!!!!.STKSTRT IS STK0+1
	STA 0,.STKSTRT
	JSRII .FIXINTRTABS	;!!!!FIXUP NREL AD PTR TABS IN
	JSRII .FIXLDCURTABS	;!!!!OTHER SOURCES
	JSRII .FIXEASELTABS
	JSRII .FIXPASTETABS
	JSRII .FIXTRAPSTABS
	JSRII .FIXUTILTABS



	LDA	0,@.PAKEND	;!!!!INSERTED @
				;!!!!PUT PAKEND INTO SREL POINTING
				;!!!!AT LABEL PAKENDA IN NREL--MAY
				;!!!!BE BETTER WAY, BUT THINK
				;!!!!THIS WILL WORK
	DECA 0,0			;!!!!BUT IT GOT TO BE MINUS ONE
	DECB 0,0			;!!!!SINCE REALLY TO POINT AT LAST
				;!!!!ITEM IN DOT

	STA	0,AFREE
	LDA	0,@.PAK		;!!!!AS WITH PAKEND
	INC 0,0			;!!!!REALLY PT AT FRST ITEM IN DOT
	LDA	2,MMIN
	JSRII	.SQUIRT
REINIT:
	JSR	INIT
	JMP	@.ERET

.ANIMSW:	ANIMSW



	.RDX	8
.420:	420
D4161:	10101
.STKSTRT: 0		;!!!!STACK IN NREL--SET UP AT INIT TIME
;.STKSTRT:STK0+1
.CS:	CS
K20:	20
K170000:	170000
.430:	430
MXSTOP:	.-.
MYSTOP:	.-.
CSPREAD:	0
CEN:	4040
XCTT:	.-.
YCTT:	.-.
.DOMOUS:	DOMOUS

MX:
	LDA	0,MXSTOP
	LDA	1,XCTR
	LSH1	1,1
	LSH1	1,1		;XCTR WAS SCALED DOWN
	SUB	1,0,SKP		;ALWAYS SKIP OVER NEXT INSTRUCTION
MXABS:
	LDA	0,MXSTOP	;ABSOLUTE MOUSE
	JMP	0,3

MY:	LDA	0,MYSTOP
	LDA	1,YCTR
	LSH1	1,1
	LSH1	1,1		;YCTR WAS SCALED DOWN
	SUB	1,0,SKP		;ALWAYS SKIP OVER NEXT INSTRUCTION
MYABS:
	LDA	0,MYSTOP	;ABSOLUTE MOUSE
	JMP	0,3

.DBF1:	DBF1
.PBF1:	PBF1
.DBF2:	DBF2
.PBF2:	PBF2

;!!!!DX USED TO BE IN PAGE0 AS
	;!!!!	DX:	XYCB
;!!!!ROUGHLY EQUIVALENT LABEL NOW IN NREL OF ALTINIT ADDRESSED
;!!!!HERE THRU SREL LEVEL -- HENCE DOUBLE INDIRECTION
;!!!!INIT ALLOWS FOR TOGGLE BETWEEN REGULAR SMALLTALK DISPLAY
;!!!!AND ANIMATION DISPLAY



DX:	ANIMADXY		;!!!!MAKE THE LABEL
INIT:
	STA	3,RET
	LDA	2,@DX
	MOV	2,1		;!!!!SAVE PTR TO DCB BACKUP LOC
	LDA	2,0,2
	LDA	0,0,2
	IFZ	0,0
	JSR	OVVR
	JSR	OVVR
	AXYCB
	XYCB
	1
	0
OVVR:
	LDA	0,1,3
	STA	0,@.420
	MOV	1,2		;!!!!RESTORE PTR TO BACKUP LOC
	STA	0,0,2
	LDA	0,3,3
	STA	0,@.ANIMSW
	JMP	@RET


RET:	.-.
.TVDAT:	TVDAT
LWIDE:	.-.
COUNT:	.-.
FROM:	.-.
TO:	.-.
.WTVWORD:WTVWORD
.HTVNIB:HTVNIB
.PAUSE:	PAUSE

DIPLC:
	STA	3,RET
	LDA	0,AMODE
	NEG	0,0		;NEGATE MODE
	STA	0,AMODE
	LDA	2,.PBF2
	IFN	0,0
	LDA	2,.PBF1
	STA	2,BFPTR		;BFPTR_  P1  P2  P2
	LDA	2,.DBF2
	IFN	0,0
	LDA	2,.DBF1		;CLEAR  D1 D2  D2
	IFZ	0,0
	JMP	ALLSET
VCHCK:
	LDA	0,VFLAG
	SKN1	0,0
	JMP	WAIT
ALLSET:
	LDA	1,D4161
	ZERO	0,0
	ADC	0,2		;VSTORE TAKES START-1
	VSTORE			;CLEAR  D1 D2  D2
	JSRII	.DOMOUS		;UPDATE  MXSTOP AND MYSTOP
				;!!!!MADE JSRII
	STA	0,MXSTOP
	STA	1,MYSTOP
	SKIP
IDLE:
	JSRII	.PAUSE		;!!!!MADE JSRII
	LDA	3,@.FRAMEN	;!!!!FRAMEN IN NREL -- HAVE TO
	LDA	0,0,3		;!!!!ANOTHER LEVEL DOWN
	;!!!!WHAT WAS HERE
;	LDA	0,@.FRAMEN	; -1=CONTINUOUS, 0=DONE,
				;>0=NUMBER FRAMES TO DO
	;!!!!TO HERE
	IFZ	0,0
	  JMP	IDLE	;0
	SKN1	0,0
	NEG	0,0 SKP		;!!!!SUB ONE FROM FRAMEN IF >0
	JMP	NODEC		;!!!!NEW LABEL
	COM	0,0
	STA	0,0,3		;!!!!SAVE IT BACK

	;!!!!WHAT WAS HERE
;	DSZ	@.FRAMEN	;DECREMENT IF >0
;	NOP
	;!!!!TO HERE
NODEC:				;!!!!NEW LABEL
	LDA	0,STRUCT
	IFZ	0,0		;IDLE ON THE NULL PICTURE
	  JMP	IDLE
	LDA	2,.STKSTRT
	STA	AC0,0,STK2
	JSR	@.CALL

	LDA	0,AMODE
	LDA	1,.PBF2
	IFN	0,0
	LDA	1,.PBF1
	STA	1,FROM		;FROM_P1  P2  P2
	LDA	1,.DBF1
	IFSP	0,0
	LDA	1,.DBF2
	INCR	1,1		;ROUND UP IF ODD
	MOVZL	1,1
	STA	1,TO
	STA	1,NEXTDISP	;NEXTDISP_ TO_  D1 D1 D2
	LDA	2,.HTVNIB
	STA	2,COUNT		;COUNT_ .HTVNIB
	LDA	2,.WTVWORD
	STA	2,LWIDE		;LWIDE _ .WTVWORD
	LDA	0,FROM
	LDA	1,TO

TLOOP:
	TRANS			;CALL TRANSPOSE MICRO CODE
	LDA	2,LWIDE
	MOV	2,3
	LSH2	3,3		;WIDTH IN NIBS(POS) IS CHANGE
				;FOR TO AND FROM
	LDA	1,TO
	ADD	3,1
	STA	1,TO
	LDA	0,FROM
	ADD	3,0
	STA	0,FROM
	DSZ	COUNT
	JMP	TLOOP
	LDA	0,NEXTDISP
	STA	0,@.TVDAT
	NEG2	0,0
	STA	0,VFLAG
	JMP	@RET

WAIT:
	JSRII	.PAUSE		;DON'T CLEAR UNTIL VERTICLE RETRACE
				;!!!!MADE JSRII
	JMP	VCHCK
.FRAMEN:	FRAMENA

NEXTDISP:	.-.
VFLAG:	-1		;FLAG IS SET TO -1 BY VERTICLE RETRACE

	.RDX	10
	.BLK	21





;****** T E S T  ******
.BLK 4

PERMAJOR:	10
PERMINOR:	10
CLKMAJOR:	10
CLKMINOR:	10

.XCTR:	XCTR
.DEFAUL:	DEFAULA			;!!!!HAVE TO GO THRU SREL

D6:	6

TESTC:
	LDA	0,PERMAJOR
	STA	0,CLKMAJOR
TIC:
	LDA	0,PERMINOR
	STA	0,CLKMINOR
RPETE:
	LDA	0,@.DEFAUL	;!!!!HAVE TO GO THROUGH SREL
	LDA	1,D6
	LDA	2,.XCTR
	ONE	3,3
	VTINC
	JSRII	.DIPL		;!!!!ADDRESSING PROB --THRU SREL
	DSZ	CLKMINOR
	JMP	RPETE
	DSZ	CLKMAJOR
	JMP	TIC
	JMP	TESTC
.DIPL:	DIPL





;****** DISPLAY *****

ADISPLAYC:
	LDAF	ARG0
	STA	0,STRUCT
	ZERO	0,0
	JSR	@.INTN
	ZERO	2,2		;IF STRUCT IS SMT ZERO
				;MAKE IT NOVA ZERO (NULL PIC)
	LDA	1,STRUCT
	IFE	0,1
	STA	2,STRUCT
	JMP	@.ERET

VERTC:
	ISZ	VFLAG		;SETS VFLAG TO -1 ON
				;VERTICLE INTERUPT
	JMP	VERTC
	DSZ	VFLAG
	BRI

	.RDX	8
DEFAUL:
	0
	0
	-40
	40
	-40
	40


	.END
 
