	.TITL	ALTO
	.GETNOLIST	"SMALL.OPS"
	.GETNOLIST	"SMALL.SYMS"
	.GETNOLIST	"SMALL.PARMS"
	.GETNOLIST	"PAGE1.PARMS"
	.BEXT	STAT60,	DSPX
	.ZREL	;//ENTRY POINTS
.MUL:	DOMUL
.DIV:	DODIV
	.SREL
KBINT:	KBINTC
TTG1:	TTGETC
KBCK:	KBCKC
MOUSE:	MOUSEC
PARITY:	PARITYC
I60HZ:	I60HZC
PRTON:	PRTONC
JUNTA:	JUNTAC
XPAND:	XPANDC
VFLUSH:	FLUSHC
QBASE:	QUEUE
DUMMY:	DUMMYC
STAT60:	TABLEC
	.NREL
;//
;//	/* EXPAND VMEM TO FILL ALTO */
JUNTAC:	DIR
	JSRII	.NEWP1	;//INSTALL OUR OWN PAGE1
;
	LDA	0,@.MEMBI	;//MOVE VMEM DOWN TO LAST
	LDA	2,@.LAST
	INCZR	2,2
	MOVZL	2,2		;//FORCE MEMBITS EVEN
	STA	2,@.MEMBI
	LDA	1,@.MEMSI
	JSR	@.MOVE
;
	JSR	ALDIS	;//ALLOCATE DISPLAY
;
	JSR	@.PNT	;//CLEAR THE DISPLAY
	CTABL-.
	STA	0,.+2
	JSRII	.CLR
	.-.
;
	EIR
	JMP	@.EVAL
.NEWP1:	NEWPG1
;
;	/* ALLOCATE DISPLAY */ - CALL AGAIN FOR EMERGENCY SPACE
ALDIS:	STA	3,ALDX
	JSR	@.SRET	;//GET TO TOP LEVEL
	JMP	.+2
	JMP	.-2
;
	LDA	1,.DHITE
	LDA	2,.DSPX
	STA	1,3,2	;LET DIANA IN ON OUR SECRET(NEW DHITE)
	MOVZR	1,0
	STA	0,XYCB3	;ALSO UPDATE DCB VERSION(/2)
	ADDZL	1,1
	ADDZL	1,1	;*32 WORD DISPLAY WIDTH ASSUMED
	MOVZL	1,1
	LDA	2,END64K	;//ALLOCATE DISPLAY DOWN FROM TOP
	SUB	1,2
	STA	2,XYBITS
;
	LDA	1,@.MEMBI	;//EXPAND VMEM UP TO DISPLAY
	SUB	1,2
	STA	2,@.MEMSI	;//NEW MEMSIZE = XYBITS-MEMBITS
	LDA	0,SELF
	LDA	1,.ARSIZ
	SUB	1,2
	ONE	3,3
	SUB	3,2
	STA	2,BHMEM	;//BHMEM _ MEMSIZ-1 - AREC SIZE
	STA	2,SELF
	LDA	3,@.MEMBI
	ADD	3,0	;//ADD MEMBITS TO GET CORE ADDR
	ADD	3,2	;//DITTO
	JSR	@.MOVE
	LDA	0,SELF
	JSR	@.SSLF	;//INSTALL SELF PROPERLY
	STAF	MESS	;//RELOCATE MESS TO SELF
	JMP	@ALDX
ALDX:	0
;
;	/* EXPAND */ CALL ALDIS TO STRETCH VMEM INTO DISPLAY
XPANDC:	LDAF	ARG0
	JSR	@.IVAL
	LDA	1,.DHITE
	SUB	0,1
	LDA	0,MINHT
	SLE	0,1
	MOV	0,1
	STA	1,.DHITE
	JSR	ALDIS
	JMP	@.EVAL
MINHT:	70	;DON'T LET DHITE GET SMALLER THAN 56
;
FLUSHC:	JMP	@.EVAL	;DUMMIED, SINCE NO PAGING
;

END64K:	177000
.DSPX:	DSPX	;BEGINNING OF DIANA'S TABLE
.ARSIZ:	10	;//SIZE OF TOP ACTIV'N REC
.MEMBI:	MEMBITS
.MEMSI:	MEMSIZE
.LAST:	ENDLOAD
ALRET:	0
.CLR:	CLEAR
CTABL:	0
	DWIDB
	0
	DHITE
	0
;//
;//	/* TURN ON DISPLAY */
PRTONC:	LDA	0,.ADXY
	STA	0,@.DCTL
	JMP	0,3
.ADXY:	XYCB
.DCTL:	DASTART
;//
;//	/* PARITYC INTERRUPT */
PARITYC:	STA	0,PSAV0
	STA	1,PSAV1
	STA	2,PSAV2
	STA	3,PSAV3
	MOVL	3,3
	STA	3,PSAVC
	JSR	@.PNT
	PECUR-.
	STA	0,PEPT
	LDA	3,MIDCUR
;
XORLP:	LDA	0,0,3	;XOR PATTERN "P E" INTO CURSOR
	LDA	1,@PEPT
	MOV	1,2,SNR
	 JMP	ENDLP	;STOPS WHEN MASK=0
	AND	0,2	;AC2=OVERLAP BITS
	SUB	2,1
	ADD	1,0
	SUB	2,0
	STA	0,0,3
	INC	3,3
	ISZ	PEPT
	JMP	XORLP
;
ENDLP:	LDA	0,PSAV0
	LDA	1,PSAV1
	LDA	2,PSAV2
	LDA	3,PSAVC
	MOVR	3,3
	LDA	3,PSAV3
	BRI
PSAV0:	0
PSAV1:	0
PSAV2:	0
PSAV3:	0
PSAVC:	0
PEPT:	0
MIDCUR:	441
;//
;//	/* KEYBOARD READER */ 
KBCKC:	LDA	0,PR	;///*SKIP-IF-ACTIVE
	LDA	1,PW
	SNE	0,1	;//COMPARE QUEUE POINTERS
	JMP	0,3	;//NO SKIP IF IDLE
	LDA	2,@.QBASE
	ADD	0,2
	LDA	0,0,2
	JMP	1,3	;//SKIP IF ACTIVE (AC0= WAITING CHAR)
;//
GETC:	LDA	0,PR
	INC	0,1	;//ADVANCE QUEUE POINTER
	LDA	2,MODP
	SLT	1,2
	SUB	2,1
	LDA	2,@.QBASE
	ADD	0,2
	LDA	0,0,2	;//GET NEXT CHAR FROM QUEUE
	STA	1,PR	;// AFTER LDA!! (RACE PROB WITH I60HZC)
	JMP	0,3
.GCH:	GCHAR
.NOP:	NOP
;
;	/* KEYBOARD INTERRUPTS */
KBINTC:	LDA	0,.NOP	;ESCAPE-KEY GETS YOU HERE
	STA	0,@.EVAL;TURN OFF EVAL TRAP(IF ON)
	JSR	@.SRET	;POP UP TO TOP LEVEL
	JMP	.+2
	JMP	.-2
	JSR	PRTONC	;TURN ON THE DISPLAY(IF OFF)
	ONE	0,0
	STA	0,HELP1
	JSRII	.USRX
.USRX:	USRX
;
HELP:	LDA	0,@.KBI	;MORE DRASTIC - IMMEDIATE ESCAPE(SMASH PCLOC)
	DSZ	HELP1
	LDA	0,@.USRX ;2ND TRY - DONT EVEN POP THE STACK!
	STA	0,@.PCLOC
	BRI
.KBI:	KBINT
HELP1:	1	;STAYS =1 UNLESS KBINTC FAILS WHEN CALLED
;//
;//	/* ALTO GET-CHAR */
TTGETC:	STA	3,ALRET	;//ALTO GET-CHAR
CKI:	LDA	0,@.EVAL	;//HAVE TO CHECK THE INTERRUPT IN THIS LOOP
	LDA	1,.TRAP
	SNE	0,1
	JMP	KBINTC	;//WAS SET!
	JSR	KBCKC
	 JMP	CKI	;//WAIT FOR INPUT
	JSR	GETC
	JMP	@ALRET
.TRAP:	JSRII	.-1	;//STORING THIS INTO .EVAL CAUSES A JMP TO KBINTC
;//
;//	/* INTERRUPT TASK */ - CURSOR AND KEYBOARD
I60HZC:	STA	3,SAV3	;//SAVE NOVA REGS AND CARRY
	STA	2,SAV2
	STA	1,SAV1
	STA	0,SAV0
	MOVL	0,0
	STA	0,SAVCA
	JSRII	.+1
	UPDATETIMER
	LDA	1,MSMSK
	SNZ	1,1
	JMP	RKB	;//DON'T TOUCH CURSOR IF MSMSK=0
	LDA	2,MLOC
	JSR	BOUND
.RDX	10
	606-16	;//RIGHT SIDE OF SCREEN
	INC	2,2
	JSR	BOUND
	808-16	;//BOTTOM OF SCREEN
.RDX	8
	JMP	RKB
;//
;//	/* 60-HZ CURSOR */
BOUND:	LDA	0,0,2	;MOUSE VAL
	LDA	1,MSMSK	;RESOLUTION MASK
	AND	1,0
	SP	0,0
	 ZER	0,0	;<0 -> 0
	LDA	1,0,3
	SLE	0,1
	 MOV	1,0	;>MAX -> MAX
STCUR:	STA	0,2,2	;SET CURSOR
	JMP	1,3
;//
;//	/* 60-HZ KEYBOARD */
RKB:	JSRII	.GCH	;//READ KEYBOARD
	SP	0,0
	JMP	STATS	;//NO ACTION
	LDA	1,ATTN
	SNE	0,1
	JMP	SETKBI	;//ATTENTION KEY
	LDA	1,CTSESC
	SNE	0,1
	JMP	HELP	;//CONTROL-SHIFT-ESCAPE(DISASTER)
	LDA	1,PW
	LDA	3,@.QBASE
	ADD	1,3
	INC	1,1	;//ADVANCE QUEUE POINTER
	LDA	2,MODP
	SLT	1,2
	SUB	2,1
	LDA	2,PR
	SNE	1,2
	JMP	STATS	;//QUEUE FULL
	STA	1,PW
	STA	0,0,3	;//PUT CHAR IN QUEUE
	JMP	STATS
PR:	0	;//READ POINTER
PW:	0	;//WRITE POINTER
MODP:	SIZQ	;//WRAP-AROUND VALUE
.QBASE:	QBASE
CTSESC:	0223
;//
;//	/* 60-HZ STATISTICS */
STATS:	LDA	1,RESOL
	SNN	1,1
	JMP	I60X	;RESOL = -1 => NO STATS
	LDA	2,@.PCLOC	;GET PC
	LDA	0,ORIG	;SUBTRACT ORIGIN
	SUB	0,2
	SP	2,2
	JMP	I60X	;TOO LOW, NO TALLY
	COM	1,1
SLOOP:	INC	1,1,SNR	;SHIFT FOR BUCKET INDEX
	JMP	CKMAX
	MOVZR	2,2,SZR
	JMP	SLOOP
CKMAX:	LDA	1,MAXB
	SLT	2,1
	JMP	I60X	;TOO HIGH, NO TALLY
	LDA	1,@.TABLE
	ADD	1,2
	ISZ	0,2	;TALLY THAT BUCKET
	SKIP
	DSZ	0,2	;PREVENT ROLL-OVER
	JMP	I60X	;DONE
.PCLOC:	PCLOC
NBUCKS=	20	;16 BUCKETS
MAXB:	NBUCKS
.TABLE:	STAT60
ORIG:	0
RESOL:	-1
TABLEC:	.BLK	NBUCKS
;//
;//	/* 60-HZ RETURN */
I60X:	LDA	1,SAV1	;//RESTORE NOVA REGS AND CARRY
	LDA	2,SAV2
	LDA	3,SAV3
	LDA	0,SAVCA
	MOVR	0,0
	LDA	0,SAV0
	BRI		;//RESTORE INTERRUPTS AND RETURN
SETKBI:	LDA	0,.TRAP
	STA	0,@.EVAL	;//PUT A TRAP IN THE EVALUATOR
	JMP	STATS
SIZQ=	100
MLOC:	XMOUS	;//MOUSE X LOC
SAV0:	0
SAV1:	0
SAV2:	0
SAV3:	0
SAVCA:	0
;//
;//	/* MOUSE CALL */
MOUSEC:	ZER	1,1
	JSR	@.LARG	;//GET ARG
	JSR	@.IVAL	;//GET ARG VALUE
	SP	0,0
	JMP	MERR	;//NEG ARG
	LDA	1,C8
	SLT	0,1
	JMP	MXY
	LDA	2,BLOC	;//POINTER TO BUTTONS
	LDA	1,0,2
	COM	1,1	;//MAKE BUTTON DOWN BE 1
	AND	1,0
MRET:	JSR	@.INTN
	JSR	@.SVLI
	JMP	@.EVAL
MXY:	SUB	1,0
	MOVZR#	0,0,SZR
	JMP	MERR	;//ARG WAS > 9
	LDA	2,MLOC
	SNZ	0,0
	JMP	XTAB
	LDA	0,1,2	;MOUSE Y
	JMP	MRET
XTAB:	LDA	0,0,2	;MOUSE X
	LDA	2,@DCBPT
	LDA	1,1,2	;TAB WORD
	SP	1,1
	MOVR	1,1	;HALF RESOL MEANS HALF TAB
	LDA	2,TMASK
	AND	2,1	;TAB BITS
	MOVS	1,1
	LEF2	1,1
	LEF2	1,1	; *16
	SUB	1,0	;SUBTRACT FROM MOUSE X
	JMP	MRET
TMASK:	017400
C8:	10
BLOC:	177030	;//word with buttons in it
DCBPT:	420	;LOCN OF PTR TO DCB
MERR:	JSR	@.QERR
	.TXT	"Mouse arg not in range 0-9."
;
;	/*MULTIPLY AND DIVIDE
DOMUL:	MUL
	JMP	0,3
;
DODIV:	DIV
	MOVO	0,0,SKP
	MOVZ	0,0
	JMP	0,3
;
;	/* ETC
DUMMYC:	JMP	0,3	;DUMMY FOR .TPUT, JUST IN CASE
;
QUEUE:	.BLK	SIZQ	;KEYBOARD QUEUE BUFFER
;
	.RDX	2
PECUR:	11100111	;BITS OF "P E"
	10100100
	11100111
	10000100
	10000111
	0
	.RDX	8
	.END
