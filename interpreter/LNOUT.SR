
;//FILE MAINTENANCE --    LNOUT.SR
;//RTINE FOR CAUSING A LINE OF CHARS TO BE SCANNED ONTO DISP
;//ACCORDING TO THE INTERSECTION OF THE LINE WITH THE DISPLAY
;//AREA OF INSCTN IS CLRD JUST BEFORE THE SCNNG LOP IS ENTERED
;//LNOUT IS PASSED TWO PTRS AND A SWITCH --
	;//AC0 = PTR TO TABLE OF LINE PARAMS X,WD,Y,HT
	;//AC1 = PTR TO SUBSTRING TABLE FOR SMF
	;//AC2 = CLEAR/NOCLEAR--NONZERO MEANS TO CLRNG BEFOR SCAN
;//ALSO SOME STUFF IN HERE TO MANAGE MOUSE FINDING
 

.TITL LNOUT
.GETNOLIST "SMALL.OPS"
.GETNOLIST "SMALL.SYMS"
.GETNOLIST "SMDISP.SYMS"

.SREL
LNOUT:	LNOUTC
STJST:	STJSTCDOJST:	DOJSTC
CURX:	0
OUTX:	0		;//TABLE FOR RETURN FROM INTERSECT
OUTWD:	0
OUTY:	0
OUTHT:	0
OUTV:	0NWID:	0THISLINE: 0DUMSW:	0

.NREL
-1
.MCHRS:	MCHRS.MTOKS:	MTOKS.FNDCHR: FNDCHR.FNDTOK: FNDTOK
LNOUTC:
	STA 3,RETRN	;//SAVE RETURN
	LDA 3,@.MCHRS	;//SEE IF WE'RE LOOKING FOR MOUSE
	SGZ 3,3		;//ON A CHARACTER	JMP CHKTOK	;//MAYBE LOOKING FOR TOKEN/WORD	JSRII .FNDCHR	;//GO TO FIND CHAR CODE	JMP @RETRN	;//IF COMES BACK GET ANOTHER LINECHKTOK:
	LDA 3,@.MTOKS	;//SEE IF WE'RE LOOKING FOR MOUSE
	SGZ 3,3		;//ON WORD OR TOKEN	JMP NOMSE	;//DO SCAN CONVERSION IF NOT LOOKING 			;//FOR MOUSE
	JSRII .FNDTOK	;//TO TO FIND TOKEN/WORD CODE	JMP @RETRN	;//IF COMES BACK GET ANOTHER LINE
 
NOMSE:
	STA 1,.LNTB	;//SAVE PTR TO SUBSTRING TABLE FOR SMF
	STA 0,.INTB	;//SAVE PTR TO INTRSCT PARAM TBL FOR LINE
	STA 2,CLRCD	;//SAVE CLEARING CODE

	JSRII .INSC	;//GET THE INSCTN OF THE LINE AND DISP
.RELT:	REALX
.INTB:	0
.OTBL:	OUTX
	JMP @RETRN	;//NOSKP RETURN MEANS NO INTERSECTION
 
	LDA 0,@.OUTX	;//SET UP PHYSICAL RIGHT MARGIN
	LDA 1,@.OUTWD
	ADDZ 0,1
	STA 1,OUTRT

	LDA 0,CLRCD	;//NONZERO MEANS TO CLEARING
	SNZ 0,0
	JMP NOCLR
	LDA 0,@.JSTSW	;//CHECK FOR JUSTIFYING
	SZE 0,0		;//NOTE JUSTIFYING WILL ONLY HAPPEN IF
	JSRII .STJST	;//THE LINE HAS BEEN CLEARED OUT
			;//I.E. APPEND CHAR ONLY JUSTIFIES
			;//WHEN LINE OVERFLOWS

	JSRII .CLER	;//OTHERWISE CLR THE AREA OF INTRSCTN
OUTB:	OUTX

NOCLR:
	JSRII .STXY	;//PREPARE CONVERT TABLE
.OTAB:	OUTX

	LDA 0,@.INTB	;//SET UP A CUR X FOR MARCHING ACRSS LINE
	STA 0,@.CURX
	LDA 1,@.OUTX	;//SET FLAG IF CUR X < OUTX -- WILL NEED
	SGE 0,1		;//TO BUMP DWA/DBA AS WE CROSS X IF <
	STA 1,BMPSW

	JSR @.PNT	;//GET SUBROUTINE PTR IN AC0 FOR SMF
	DOIT-.
	LDA 1,.LNTB	;//GET SUBSTRING TABLE IN AC1

	JSR @.SMF	;//GET STRING-MAP-FETCH STARTED
	1
	JMP @RETRN	;//NON-NORMAL RETURN NOT LIKELY
	JMP @RETRN

.STJST:	STJST
.JSTSW:	JUST		;//JUSTFICATION ASSOCIATED WITH INSTANCE OF
			;//OF WINDOW
.CLER:	CLEAR		;//EXTERNALS
.STXY:	SETXY
.INSC:	INSEC
.LNTB:	0
.CHR:	CHR
.LSCN:	SCAN
.INY:	INY
.LRBD:	LRBD
.OUTX:	OUTX
.OUTY:	OUTY
.OUTWD:	OUTWD
.CURX:	CURX

CHRMD:	377		;//FOR CHECKING IF IN APPEND MODE
RETRN:	0		;//PLACE FOR RETURN ADDRESS
CLRCD:	0		;//PLACE FOR SAVING CLEARING CODE


OUTRT:	0		;//PLACE TO KEEP REAL RIGHT MARGIN
TEMP:	0		;//PLACE FOR RETURN TO SMF
DOIT:
	STA 3,TEMP	;//SAVE RETURN
	STA 0,@.CHR	;//SAVE CHAR CODE IN SCAN ROUTINE
	LDA 3,@.THISLN	;//CHECK IF LOOKING FOR MOUSE IN JST MODE
	SGZ 3,3		;//IF STJST TURNED ON THEN CHECK FOR SPC
	JMP NORMAL	;//OTHERWISE REG CHAR WIDTH GOOD ENOUGH
	LDA 3,SPACE	;//IF SPACE SEE IF ALREADY COUNTED DONW
	SEQ 3,0		;//FUNNY SPACES IN WHICH CASE REG CHAR
	JMP NORMAL	;//GOOD
	LDA 3,CNT1
	SZE 3,3
	JMP CHKMOR
	LDA 3,CNT2
	SGZ 3,3
	JMP NORMAL
CHKMOR:
	LDA 1,@.CURX	;//SEE IF GOING TO CROSS LEFT BOUNDARY
	LDA 3,@.OUTX	;//WINDOW
	LDA 0,@.NWID	;//GET JST SPACE WIDTH
	MOVZ 1,2	;//SAVE CURX FOR COMPARE
	ADDZ 0,1	;//UPDATE CURX
	STA 1,@.CURX	;//SAVE IT
	SGE 2,3		;//IF NOT ACROSS WINX SEE IF SPAN IT
	JMP CHKSPN
	ZER 3,3		;//TURN OFF X CROSS BUMPING
	STA 3,BMPSW
	JSR DOJSTC	;//OTHERWISE BUMP ACCORDING FUNNY WIDTH
	JMP @TEMP	;//AND GET ANOTHER CHAR
NORMAL:
	JSRII .LGWD	;//GET WIDTH OF CHAR--COMES IN AC0
	LDA 1,@.CURX	;//UP TO LEFT MARGIN
	LDA 3,@.OUTX
	MOVZ 1,2	;//SAVE CURX FOR COMPARE
	ADDZ 0,1	;//UPDATE CURRENT X
	STA 1,@.CURX
	SGE 2,3		;//CHECK HERE FOR CROSSING LEFT X
	JMP @TEMP	;//IF NOT, GET ANOTHER CHAR
	SEQ 2,3		;//IF EQUAL OK ELSE CHECK FOR LEFT MARGIN
	JSR CHKBMP	;//CROSSING BUMP
	ZER 3,3		;//TURN OFF BUMPING IF EQUAL
	STA 3,BMPSW
	LDA 3,OUTRT
	SLE 1,3		;//OTHERWISE CHECK FOR WITHIN RT MARGIN
	JMP SKPRT	;//IF NOT POP OUT OF SMF
	JSRII .LSCN	;//SCAN CHAR IN

	JMP  @TEMP	;//AND GET ANOTHER CHAR

SKPRT:
	LDA 3,TEMP
	JMP 1,3		;//SKP RT TO SMF CAUSES POP OUT


SVWID:	0
.DMSW:	DUMSW

BMPSW:	0
BMPRTN:	0

CHKBMP:
	STA 3,BMPRTN	;//IF WE JUST CROSSED X THEN OUGHT TO 
	LDA 0,BMPSW	;//BUMP DWA/DBA UP TO ACTUAL CURX --
	SGZ 0,0		;//NEEDED TO MAKE COMBINATION JUSTIFY
	JMP @BMPRTN	;//WINDOW CLIP WORK
	LDA 3,@.OUTX	;//CURX-OUTX GIVES AMT TO BUMP
	SUBZ 3,2
	LDA 0,@.NWID
	STA 0,SVWID	;//SAVE SPACE'S WIDTH
	STA 2,@.NWID	;//THIS GUY NOT REALLY A SPACE
			;//MERELY INABILITY TO SCAN CONVERT
			;//HALF A CHAR
	JSR DOJSTC	;//GO BUMP IT
	LDA 0,SVWID	;//FIX UP FOR SPACE BUMPS
	STA 0,@.NWID
	ISZ CNT1
	ZER 0,0		;//TURN OFF BUMP SWITCH
	STA 0,BMPSW
	LDA 1,@.CURX	;//PUT CURX BACK IN AC1 -- NEED FOR
			;//COMPARE WITH OUTRT ON RETURN
	JMP @BMPRTN


CHKSPN:
	LDA 2,OUTRT	;//IF SPACE ALSO CROSSES WNRT THEN DONE
	SLE 1,2
	JMP SKPRT
	SGT 1,3		;//ELSE IF NOT CROSSED WINX THEN GO BUMP
	JMP DUMJST	;//SPACE CNT BUT DON'T TOUCH BTMAP AD'S
	SUBZ 3,1	;//OTHERWISE CURX MINUS OUTX IS WIDTH OF
	STA 0,SVWID	;//FIRST SPC IN WINDO--SAVE NWID FOR 
	STA 1,@.NWID	;//LATE AND THEN DO SPANNING BUMP
	JSR DOJSTC
	LDA 0,SVWID	;//FIXUP NWID
	STA 0,@.NWID
	ZER 0,0		;//TURN OFF BUMP SWITCH
	STA 0,BMPSW
	JMP @TEMP	;//AND GET NEXT CHAR

DUMJST:
	ISZ @.DMSW	;//SET SWITCH FOR DOJUST TO SKIP REAL
	JSR DOJSTC	;//AD BUMPING
	ZER 3,3		;//REFRESH SWITCH
	STA 3,@.DMSW
	JMP @TEMP	;//AND GET NEXT CHAR
;//DOJST GETS CALLED WHENEVER SPACE ENCOUNTERED AND JUSTIFYING
;//TURNED ON FOR LINE

.NWID:	NWID;//*******DO NOT -- REPEAT DO NOT BOMB AC1 IN DOJST;//*******WHERE BYTE CTR KEPT IN MOUSE FINDING ROUTINES
DOJSTC:
	STA 3,JSRTN
	LDA 0,CNT1	;//IF CNT1 IS ZERO TRY CNT2.  IF CNT2
	SGZ 0,0		;//NOT ZERO MAKE IT CNT1 --WHEN CNT1 ZERO
	JMP TRY2	;//WE'RE DONE JUSTIFYING LINE

GOJUST:
	LDA 0,@.DMSW	;//IF BEFORE WINX DON'T REALLY BUMP AD'S
	SZE 0,0
	JMP OUTWIN	LDA 0,@.NWID	;//NEED NWID AS EXTERNAL SO SET UP	STA 0,ACTWD	;//LOCALLY
	JSRII .JSTFY	;//GO DO IT -- SUBR IN SCAN MODULE
ACTWD:	0
OUTWIN:
	DSZ CNT1	;//DEC CNT
	JMP @JSRTN
	JMP @JSRTN

TRY2:
	LDA 3,CNT2	;//IF CNT2 ZERO REALLY DONE
	SGZ 3,3
	JMP DONEJST
	STA 3,CNT1	;//OTHERWISE MAKE CNT2 INTO CNT1
	ISZ @.NWID	;//INC THE NEW WIDTH
	STA 0,CNT2	;//MAKE CNT2 ZERO
	JMP GOJUST	;//AND GO DO IT

DONEJST:
	STA 3,@.THISLN	;//TURN OFF JUSTIFYING WHEN
	JMP @JSRTN	;//COUNTED DOWN AND USE REGULAR
			;//SPACES FOR REST OF LINE IF NECESSARY

SPACE:	40		;//STUFF FOR JUSTIFYING
BACKSP:	10
CARRTN:	15
RBITS:	0
SPCWD:	0
.THISLN: THISLINE
.MODE:	MOOD
.LSTSP:	LSTSP
.MAZX:	MAZX
.NSPC:	NSPC
.NSPC2:	NSPC2
.JSTFY:	JUSTIFY
.BSJST:	BSJST
.JSTCR:	JSTCR
CNT1:	0
CNT2:	0
JSRTN:	0



;//FOLLOWING ARE SUBROUTINES USED IN MAKING RIGHT JUSTIFICATION
;//HAPPEN --STJST SETS UP THE NEW SPACE WIDTH(NWID) AND SOME 
;//COUNTS.  DOJST DOES WORK WHENEVER SPACE ENCOUNTERED IN LINE


.LGWD:	GETWD

STJSTC:
	STA 3,JSRTN	;//SAVE RETURN

	LDA 1,BACKSP	;//IF WE'RE BACKSPACING, THEN NO
	LDA 0,@.MODE	;//JUSTIFYING UNLESS REVERSE WRAP
	SEQ 1,0
	JMP CARCHK
	LDA 0,@.BSJST	;//SWITCH SET IN SETUP IF BACKSPACE
	SNL 0,0		;//HAS REVERSE WRAPPING
	JMP RITON
CARCHK:
	LDA 1,@.JSTCR	;//IF LINE TERMINATED BY CR NO JUSTIFYING
	LDA 0,CARRTN
	SNE 1,0
	JMP RITON

	LDA 1,@.NSPC	;//IF SUBSTRING TERMINATED -- NSPC HAS
	SNN 1,1		;//BEEN SET TO NIL IN MAZUR AND THERE
	JMP RITON	;//IS NO JUSTIFYING

	LDA 1,@.LSTSP	;//IF NO SPACES IN LINE, THAT'S AS GOOD
	SNN 1,1		;//AS IT GETS FOR NOW
	JMP RITON	;//GO TURN OFF THIS LINE'S JSTFYING

	LDA 1,@.NSPC	;//IF NO. OF SPACES AND NO. OF TRAILING
	LDA 0,@.NSPC2	;//EQUAL THEN NO INTERNAL SPACES AND
	SNE 1,0		;//WE'RE DONE
	JMP RITON
	SUBZ 0,1	;//OTHERWISE SUB TRAILING FROM INTERNAL
	STA 1,@.NSPC	;//AND UPDATE INTERNAL

	STA 1,@.THISLN	;//OTHERWISE TURN IT ON
	LDA 0,SPACE	;//GET WIDTH OF SPACE IN FONT
	JSRII .LGWD
	STA 0,SPCWD	;//SAVE IT

	LDA 2,@.MAZX	;//IF SPACE ACTUALLY CAUSED OVERFLOW
	LDA 1,@.FRRT	;//THEN EXTRA BITS (RBITS) ARE LAST
	SLE 2,1		;//GOOD X MINUS RIGHT MARGIN
	SUBZ 1,2 SKP	;//OTHERWISE EXTRA BITS ARE RIGHT
	SUBZ 2,1 SKP	;//MARGIN MINUS LAST GOOD X + DEFAULT
	JMP CHKEQ	;//SPACE WIDTH (SO THAT BITS OF SPACE
		 	;//WHERE LINE BROKE ARE DISTRIBUTED
			;//AMONGST INTERNAL SPACES 
			;//IF RBITS EQUAL TO SPACE WIDTH THEN WE'RE
			;//ACTUALLY RIGHT ON
TRLON:
	ADDZ 0,1 	
	DSZ @.NSPC2	;//KEEP INCING RBITS BY SPCWD UNTIL OUT
	JMP TRLON	;//OF TRAILING BLANKS
	JMP SVBITS	 
			
			

CHKEQ:
	SGE 2,0		;//DIFFERENCE NOT EQUAL TO SPCWD MEANS
	SUBZ 2,0 SKP	;//LAST SPACE SPANNED RIGHT MARGIN AND
	JMP CHKEQ2	;//THAT IS VALUE TO WHICH TO ADD SPCWD
	MOVZ 0,1	;//IF MORE TRAILING BLANKS--
	LDA 0,SPCWD	;//I.E. SPCWD MINUS THAT VALUE
	JMP TRLON2
CHKEQ2:
	SEQ 2,0		;//IF SPACE CAUSED OVERFLOW THEN WE'RE
	JMP TRLON2	;//RIGHT ON UNLESS A SPACE IMMEDIATELY
	DSZ @.NSPC2	;//SO DEC THE TRAILING BLANK COUNT DOWN
	MOVZ 0,1 SKP	;//FIRST TRAILING SPACE MAKES SPC WIDTH
			;//RBITS
	JMP RITON
TRLON2:
	DSZ @.NSPC2	;//OTHERWISE KEEP DECING CNT AND ADDING
	ADDZ 0,1 SKP	;//TO RBITS
	JMP SVBITS
	JMP TRLON2
SVBITS:
	STA 1,RBITS
	ZER 0,0		;//DIV WANT HIGH ORDER IN AC0 -- 0
			;//FOR OUR PURPOSES
	LDA 2,@.NSPC	;//NOTE THAT AC1 HAS RBITS --AC2 HAS 
	DIV		;//NUMBER OF SPACES THAT ARE USABLE
	JMP .+1		;//DIV SKIPS UNLESS OVERFLOW

	LDA 3,SPCWD	;//AC1=RBITS/NSPC
	ADDZ 1,3	;//ADD SPCWD TO THAT RESULT TO GET ACTUAL
	STA 3,@.NWID	;//NEW WIDTH -- I.E. WIDTH USED THRU
			;//CNT1
	SGZ 1,1		;//IF RBITS/NSPC = 0 THEN SEE REMONLY
	JMP REMONLY
	STA 0,CNT2	;//OTHERWISE REM (IN AC0) IS CNT2 AND
	SUBZ 0,2	;//NUMBER OF SPACES (AC2) MINUS REM
	STA 2,CNT1	;//IS CNT1

	JMP @JSRTN	;//AND DONE WITH JUSTIFY SETUP

REMONLY:
	STA 0,CNT1	;//IF WE HAVE ONLY REMAINDER, NEW
	STA 1,CNT2	;//WIDTH (NWID) IS NWID+1 -- CNT1 =
	INC 3,3		;//REM AND CNT2 IS ZERO
	STA 3,@.NWID

	JMP @JSRTN	;//AND DONE WITH JUSTIFY SETUP

RITON:
	ZER 0,0		;//TURN JUSTIFY OFF FOR THIS LINE
	STA 0,@.THISLN	;//ONLY AND
	JMP @JSRTN

.FRRT:	FRRT


.END
   