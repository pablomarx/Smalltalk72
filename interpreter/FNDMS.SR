;//FILE MAINTENANCE  ----     FNDMS.SR;//THIS CODE IS USED FOR FINDING THE CHARACTER, TOKEN OR;//WORD THE MOUSE IS ON.  SWITCHES ARE SET IN DSPCH IF;//MOUSE FINDING IS REQUESTED AND THE RETURN IS IN DSPCH.;//A FOUR ENTRY TABLE IS BUILT AND RETURNED AS A VECTOR.;//THE FIRST ENTRY IS A BYTE PTR IN THE CASE OF A CHARACTER;//OR WORD SEARCH AND A TOKEN COUNT IF TOKEN FINDING IS;//REQUESTED.;//THE SECOND ENTRY IS THE LEFT X OF THE ITEM REQUESTED.;//THE THIRD ENTRY IS THE TOP Y OF THE ITEM REQUESTED.;//THE FOURTH ENTRY IS THE WIDTH (LEFTX - RIGHTX) OF THE;//ITEM REQUESTED.;//IF THE FIRST ENTRY COMES BACK -1 IT MEANS EITHER THAT THE;//MOUSE IS IN THE FRAME BUT BELOW THE END OF THE STRING OR;//IN THE WINDOW BUT NOT IN THE FRAME.;//IF THE FIRST ENTRY COMES BACK -2 IT MEANS THAT THE;//MOUSE IS NOT IN THE WINDOW.;//SPACES AND CR'S ARE CURRENTLY THE ONLY DELIMITERS BETWEEN;//WORDS AND TOKENS.  MULTIPLE DELIMITERS DO NOT AFFECT THE;//THE TOKEN COUNT..TITL FNDMS.GETNOLIST "SMALL.OPS".GETNOLIST "SMALL.SYMS".GETNOLIST "SMDISP.SYMS".SRELFNDCHR:	FNDCHRCFNDTOK:	FNDTOKCMWIDTH: MWIDTHCBACKUP:	BACKUPCINITSW:	0.NREL-1.JSTSW:	JUST		;//EXTERNALS.STJST:	STJST.DOJST:	DOJSTFNDCHRC:	STA 3,RETRN	;//SAVE RETURN	LDA 2,@.INY	;//IF WE'RE NOT ON THIS LINE GO BACK	LDA 3,@.INHT	;//AND GET ANOTHER LINE	ADDZ 2,3	LDA 0,@.MSEY	SLE 0,3	JMP @RETRN			;//OTHERWISE PICK ACROSS LINE	STA 1,.LNTB	;//SAVE PTR TO STRING TABLE			;//TABLE[0] = STRG PTR			;//TABLE[1] = BEGINNING BYTE PTR			;//TABLE[2] = ENDING BYTE PTR	JSR LITINIT	;//SET UP SOME X'S AND CHK FOR JSTIFYING	JSR @.PNT	;//GET PTR TO PICKING SUBR IN ACO FOR SMF	MSPCK-.	LDA 1,.LNTB	;//GET PTR TO STRG TABLE IN AC1 FOR SMF	JSR @.SMF	1		;//FORWARD DIRECTION	JMP FINISH	;//GO TO FINISH IF POP OUT OF SMF	JMP FINISH	;//OR FINISH STRINGMSPCK:	STA 3,TEMP	;//SAVE RETURN FOR SMF	LDA 2,MCURX	;//GET CURRENT X	STA 2,@.RTNX	;//SAVE IT -- MANY BE RETRNX	JSR MWIDTHC	;//GET CHAR WIDTH -- RETURNED IN AC0	STA 0,@.RTNW	;//THIS MAY BE RTNW SO SAVE THERE	ADDZ 2,0	;//ADD IT TO CURRENT X	STA 0,MCURX	;//SAVE CURRENT X	LDA 3,@.MSEX	;//SEE IF WE'VE GOTTEN TO MOUSE	SLE 3,0	JMP @TEMP	;//GET ANOTHER CHAR IF NOTFINISH:	STA 1,@.RTNC	;//OTHERWISE SAVE BYTE PTR	STA 2,@.RTNX	;//AND LEFT X	JSRII .MSRTN	;//AND GO HOME			;//JSRII ONLY FOR DOUBLE INDIRECTION			;//REALLY A JMP.FRMX:	FRMX		;//BACKUP STARTS OVER TO GET TOKEN.FRMW:	FRWD		;//OR WORD IN NEXT LINE UP WHEN.CHKMS:	CHKMS		;//ONLY DELIMITERS IN CURRENT LINEBACKUPC:	LDA 0,@.FRMX	;//MAKE NEW MOUSE X -- RIGHT SIDE OF FRAME	LDA 1,@.FRMW		ADDZ 0,1	STA 1,@.MSEX	LDA 0 @.MSEY	;//MAKE NEW MOUSEY	LDA 1,@.INHT	;//SUB FONTHEIGHT FROM IT	SUBZ 1,0	STA 0,@.MSEY	JSRII .CHKMS	;//EFFECTIVELY A NEW GO AT ITSVWD:	0SPACE:	40		;//EXTERNALS AND VARIABLES FOR WIDTHCR:	15		;//UTILITYQUOTE:	47.THISLINE: THISLINE.GTWD:	GETWD.NWID:	NWID.DMSW:	DUMSWWDRTN:	0		;//UTILITY FOR GETTING CHARWDMWIDTHC:		;//CHECKS IF SPACE AND IF JUSTIFYING IN	STA 3,WDRTN	;//WHICH CASE RETURNS FUNNY WIDTH	LDA 3,SPACE	SEQ 3,0	JMP REGULAR	;//NOT SPACE?(SIMPLY USE REG GETWD)	LDA 3,@.THISLINE	SZE 3,3		;//NOT JUSTIFY?(USE REG GETWD	JMP JSTSPCREGULAR:	JSRII .GTWD	JMP @WDRTNJSTSPC:	LDA 0,@.NWID	;//GET FUNNY WIDTH	STA 0,SVWD	;//SQUIRREL AWAY	ONE 0,0	STA 0,@.DMSW	;//SET SWCH SO BITMAP NOT ACTUALLY TOUCHED	JSRII .DOJST	;//THIS BUMPS CNTRS AND STUFF SO FUNNY			;//STAYS RIGHT -- I.E. THREE POSSIBLE			;//FUNNY WIDTHS --NWID,NWID+1,REGULAR	LDA 0,@.THISLINE	SZE 0,0		;//IF GO TO WHERE REGULAR SPACE REQUIRED	JMP BIGSPC	;//THEN RETURN THAT	LDA 0,SPACE	JMP REGULARBIGSPC:	LDA 0,SVWD	;//OTHERWISE RETURN FUNNY WIDTH	JMP @WDRTNLTRTN:	0		;//UTILITY FOR SETTING UP FOR LINELITINIT:		;//PICKING IN BOTH FINDING ROUTINES	STA 3,LTRTN	;//SAVE RETRN -- JSTCHK BOMBS	STA 2,@.RTNY	;//SAVE TOP Y = INY	LDA 0,@.JSTSW	;//SEE IF JUSTIFYING ON	SZE 0,0	JSRII .STJST	;//DO THAT SHUFFLE IF SO--CODE IN LNOUT	LDA 0,@.INX	;//SET UP BEGINNING X	STA 0,MCURX	JMP @LTRTN;//NOW FOR THE TOKEN/WORD FINDING STUFF--SHARES LITINIT, WIDTH;//AND SOME EXTERNAL LABELS AND VARIABLES WITH FNDMSRETRN:	0QFLG:	0.INITSW: INITSW.INX:	INX.INY:	INY.INHT:	INHT.LNTB:	LSTRGMCURX:	0RIGHTX:	0CNTFLG:	0.MSEX:	MSEX.MSEY:	MSEYFNDTOKC:	STA 3,RETRN	;//SAVE RETURN	LDA 3,@.INITSW	;//SET SOME STUFF UP IF FIRST CALL	SZE 3,3	JMP NOINIT	STA 3,QFLG	;//QUOTE FLAG	STA 3,@.RTNC	;//RETRN TOK/WRD TO ZERO	INC 3,3		;//TOGGLE SWITCH	STA 3,@.INITSWNOINIT:	LDA 2,@.INY	;//FIRST SEE IF ON THIS LINE	LDA 3,@.INHT	LDA 0,QFLG	;//IF NOT IN QUOTED MATERIAL	SNZ 0,0	STA 3,CNTFLG	;//SET CNTFLG TRUE WHILE AT IT	ADDZ 2,3	LDA 0,@.MSEY	SGT 0,3	JMP PICKTOK	;//ON LINE -- GO PICK IT	JSR @.PNT	LNPCK-.		;//GET PTR TO SUBR FOR SMF IN AC0			;//PTR TO STRG TABLE COMES TO FNDTOK IN			;//JUST WHAT SMF WANTS	NIL 2,2		;//NIL AC2 TELLS LINE PICKER WE'RE NOT			;//LOOKING FOR X RIGHT NOW	JSR @.SMF	1	JMP @RETRN	;//OUT THROUGH HERE SHOULD CAUSE A -1			;//RETURN IN DSPCH -- IN FRAME BUT			;//NOT ON ANYTHING	JMP @RETRN	;//JUST RETURN TO GET ANOTHER LINEFIRSTBYTE: 0.MSRTN: GOTMS.RTNC:	RTNC.RTNX:	RTNX.RTNY:	RTNY.RTNW:	RTNW.MWRDS:	MWRDS;//*****LNPCK DEPENDS ON AC1 AND AC2 NOT BEING TOUCHED.;//*****CRITICAL X AND BYTE PTR BEING PRESERVED;//*****NOTE ALSO THAT BEFOREX AND AFTERX IMPLY THAT TEMP;//*****MAY HAVE A RETURN DIFFERENT FROM LNPCK -- YEA,;//*****VERILY IT IS SOTEMP:	0LNPCK:	STA 3,TEMP	;//SAVE RETURN TO SMF	STA 0,@.CHR	;//SAVE CHAR -- WHEN Y IS RIGHT AND 			;//WE'RE CHECKING X 0 GETS BOMBED			;//SO NEED TO DO FOLLOWING LOAD--			;//THIS STORE REQUIRED WHEN Y NOT RIGHTBEFOREX:		;//THIS LABEL FOR WHEN ON RIGHT LINE,			;//BUT MSEX > MCURX	LDA 0,@.CHR	;//BE SURE CHAR IN AC0	JSR DELIM	;//SEE IF CHARACTER A DELIMITER -- CR,			;//AND SPACE CURRENTLY DELIMS -- QUOTE			;//IS ALSO CHECKED FOR AND FLAG TOGGLED			;//IN ORDER TO MAKE TOKEN FINDING WORK	JMP NOTDELIM	;//FALSE RETURN	LDA 0,CNTFLG	;//CNTFLG FALSE (0) AND DELIM COME BACK			;//TRUE THEN SET CNTFLG TRUE (ANYTHING			;//BUT 0) AND KEEP LOOKING -- MAY BE			;//MULTIPLE DELIMS	SZE 0,0	JMP @TEMP	;//CNTFLG TRUE THEN KEEP CHUNKING UNTIL			;//FIND NONDELIMITER	STA 2,RIGHTX	;//SAVE RIGHTX OF WORD/TOKEN -- NEC			;//TO HANDLE MULTIPLES	LDA 0,QFLG	;//IF QUOTE FLAG IS TRUE THEN DON'T SET			;//CNT FLAG TRUE	SZE 0,0	JMP CHKWRD	;//BUT GO CHECK IF IN WORD MODE SO THAT			;//LEFT X FOR A WORD IS SAVED	ONE 0,0	STA 0,CNTFLG	JMP @TEMPNOTDELIM:	LDA 0,CNTFLG	;//CNTFLG FALSE MEANS IN MIDDLE OF NON-	SNZ 0,0		;//DELIMITING CHARACTERS, SO JUST KEEP	JMP @TEMP	;//CHUNKING	ISZ @.RTNC	;//CNTFLG TRUE MEANS BUMP TOKEN CNT	ZER 0,0		;//SET CNTFLG TO FALSE	STA 0,CNTFLG	SP 2,2		;//POSITIVE 2 MEANS WE'RE LOOKING FOR			;//X AND SHOULD SET THE FIRST BYTE IN			;//CASE OF WORD CALL AND LEFTX FOR			;//EITHER WORD OR TOKEN	JMP @TEMP	;//NIL 2,2 MEANS JUST KEEP CHUNKING	STA 2,@.RTNXFORWORD:	STA 1,FIRSTBYTE	JMP @TEMPCHKWRD:	SP 2,2		;//GET TO HERE IF IN QUOTED MATERIAL	JMP @TEMP	;//BUT MAY ACTUALLY BE IN WORD MODE	LDA 0,@.MWRDS	;//IF SO MUST SET LEFT X, ETC.	SGZ 0,0	JMP @TEMP	LDA 0,MCURX	STA 0,@.RTNX	INC 1,1	JMP FORWORD;//DELIM CHECKS FOR A CHARACTER BEING A SPACE, CR OR QUOTE;//SPACE OR CR CAUSE A SKP(TRUE) RETURN, ALL ELSE A NOSKP(FALSE);//RETURN -- BEFORE QUOTE DOES A FALSE RETURN IT TOGGLES A ;//SWITCH, SO THAT TOKEN FINDING WORKS. FIRST QUOTE ALSO BUMPS;//TOKEN COUNT;//*****DELIM CODE, LIKE LNPCK PRESERVES AC1 AND AC2.DRTN:	0DELIM:	STA 3,DRTN	;//SAVE RETURN	LDA 3,QUOTE	;//QUOTE?(CHECK FIRST OR SECOND,ETC)	SNE 3,0	JMP QRTN	LDA 3,SPACE	;//SPACE IS DELIM--SKP RTRN	SNE 3,0	JMP TRTN	LDA 3,CR	;//CR ALSO DELIM -- SKP RTRN	SEQ 3,0	JMP FRTNTRTN:	LDA 3,DRTN	JMP 1,3FRTN:	LDA 3,DRTN	JMP 0.3QRTN:	LDA 3,QFLG	;//0 =FALSE. 1=TRUE	SZE 3,3		;//IF IT'S OFF TURN ON	ZER 3,3 SKP	;//IF IT'S ON TURN OFF	ONE 3,3	STA 3,QFLG	JMP FRTNPICKTOK:	STA 1,.LNTB	;//SAVE PTR TO STRG TABLE	MOVZ 1,3	;//SET UP FIRSTBYTE	LDA 0,1,3	;//LEFT BOUND OF STRING TO START WITH	STA 0,FIRSTBYTE	JSR LITINIT	;//SET UP X'S ETC.	JSR @.PNT	TKPCK-.		;//AC0 GETS PTR TO SUBR FOR SMF	LDA 1,.LNTB	;//AC1 GETS PTR TO STRG TABLE	JSR @.SMF	1	NOP	LDA 0,CNTFLG	;//FALSE CNTFLG MEANS NEED RIGHTX	SZE 0,0		;//OF LAST CHAR -- OTHERWISE RIGHTX			;//TAKEN CARE OF ELSEWHERE	JMP GOTTA	;//ANY FINISH OF STRING HERE WILL	LDA 2,MCURX	;//RETURN LAST WORD/TOKEN IN LINE	STA 2,RIGHTX	;//FIX UP RIGHTX -- RIGHT SIDE OF	JMP GOTTA	;//LAST CHAR IN LINE.CHR:	CHRTKPCK:	STA 3,TEMP	;//SAVE RETURN TO SMF	STA 0,@.CHR	;//SQUIRREL AWAY CHARACTER	JSRII .MWIDTH	;//GET THE WIDTH	LDA 2,MCURX	;//GET CURRENTX	ADDZ 2,0	STA 0,MCURX	;//SAVE NEW X	LDA 3,@.MSEX	;//SEE IF HIT MOUSE YET	SLE 3,0		;//IF NOT CHECK DELIM IN LNPCK	JMP BEFOREX	LDA 0,@.CHR	;//OTHERWISE CHECK DELIM HERE	JSR DELIM	JMP NOTDELIM	;//NOT A DELIM MEANS LNPCK CODE			;//WORKS	LDA 0,CNTFLG	;//IF MOUSE ON FIRST DELIMITER 	SNZ 0,0		;//THEN HAVE TO SAVE RIGHTX	STA 2,RIGHTX	;//OTHERWISE ALREADY IN LNPCK			;//DELIM RETURNGOTTA:	LDA 0,@.RTNX	;//ON A DELIM MEANS GET A RIGHT X	LDA 2,RIGHTX	;//AND A LEFT X -- DIFF IS RTNW	SUBZ 0,2	SGZ 2,2		;//IF RTNW <= 0 THEN TRY NEXT LINE UP	JSRII .BACKUP	STA 2,@.RTNW	LDA 0,@.MWRDS	;//IF WORD SWITCH RTNC IS FIRSTBYTE	SNZ 0,0		;//OTHERWISE TOKEN CNT	JSRII .MSRTN	LDA 0,FIRSTBYTE	STA 0,@.RTNC	JSRII .MSRTN.MWIDTH: MWIDTH		;//ADDRESSING PROBS.BACKUP: BACKUP.ENDN