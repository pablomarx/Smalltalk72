;!!!!FILE MAINTENANCE --  AUTIL.SR

.TITL AUTIL

;!!!!SUNDRY ROUTINES FOR ANIMATION 
;!!!!CREATED CIRCA 7/75 AS PART OF CONVERSION TO ALTO
;!!!!ASSEMBLER--LOADER BY D. MERRY AND FRIENDS

.GETNOLIST "SMALL.OPS"
.GETNOLIST "ASMALL.PARMS"
.GETNOLIST "SMALL.SYMS"
.GETNOLIST "PAGE1.PARMS"
.GETNOLIST "ANIM.OPS"
.GETNOLIST "ANIM.PARMS"
.GETNOLIST "ANIM.SYMS"

;.EXTN	DIR,EIR,BRI,VTINC,VMOVE,VSTORE,VORK,TRANS,VTINC,MMUL
;.EXTN	AXOFF,AYOFF
;.EXTN	DBF1,PBF1,DBF2,PBF2,WW,INTR,RESUME,DOMOUS
;.EXTN	BTAB,BPICNO,BPRETAB,BTOP,CUR0,BXMIN,BYMIN
;.EXTN	MULT,NULLP,BOARD,BLAST,XVAL,YVAL,CYCLE,MMUL
;.EXTD	AFREE,BMIN,.TRAP,.BOARD,.BHIGH,.BWIDE,.CHIGH,.CWIDE,.CBIG
;.EXTD	.ERROR,MMIN,MMAX,D3,D4,D36,.FREEUP,.MULT
;.EXTD	XCTR,YCTR,CURSOR,BYMAX,BXMIN
;.EXTD	.ERET,.INTN,.IVAL,.SVLI,.LARG,C2,C3
;.ENT	CXMINABS,CYMAXABS,SMDRAW
;.ENT	FREEUP,CS,DRAW,BDCLEAR,TDRAW,PTAB,PDISP,FTCH,CRAM
;.ENT	PICNO,PXMIN,PXMAX,PYMIN,PYMAX,EBITS,DIP,PLEN,PWIDE,TONE1



.ZREL

.FREEUP:		FREEUP


.SREL

CXMINABS:	0
CYMAXABS:	0
TONE1:		0
SMDRAW:		SMDRAWC
CS:		CSC
DRAW:		DRAWC
BDCLEAR:	BDCLEARC
TDRAW:		TDRAWC
FTCH:		FTCHC
CRAM:		CRAMC
EBITS:		EBITSC
DIP:		DIPC
HDSTART:	HDSTARTC

;!!!!THIS SREL STUFF FOR HANDLING ADDRESSING PROBS -- WON'T SHOW
;!!!!UP IN ANIM.SYMS

BOXOLD:		0
SAVSTRT:	0
RESET:	RESETC
FXUP:	FXUPC
SUMA:	SUM
TBOXA:	TBOX
XYMIX:	XYMIXC
MSKTABA:	MSKTAB
BDRET:	0
LPPP:	LPPPC
FFNI:	FFNIC


FIXUTILTABS:	FIXUTILTABSC	;!!!!SET UP AN NREL PTR AT TDRAW
AINDEX0:	INDEX0		;!!!!USED IN FIXUP RTN
ALMRELAC3:	.LMRELAC3	;!!!!DITTO
AFRSTPT:	FRSTPT



.NREL
.RDX	8


;!!!!*******FIX UP SOME NREL PTRS******


FXRET:	0			;!!!!NEEDED FOR FIXUPS BELOW
TEMP0:	0
.AINDEX0:	AINDEX0
.ALMRELAC3:	ALMRELAC3
.PXMIN:	PXMIN
.AFRSTPT:	AFRSTPT


FIXUTILTABSC:			;!!!!FIX PTR AT FRSTPT
	STA 3,	FXRET		;!!!!KLUDGE TO GET ADDRESS OF
	STA 0,	TEMP0
	JSR 	@.PNT		;!!!!FIRST IN LOCATION FOLLOWING
	FIRST-.			;!!!!JSRII .RESUM NEAR LABEL TDRAWC
	LDA 3,@.AFRSTPT
	STA 0,0,3
	LDA 0, @.AINDEX0	;!!!!GET CORRECT VALUE INTO LABEL
	LDA 3,	.PXMIN		;!!!!I.E. NREL LABEL - CONSTANT
	SUB 3,0
	LDA 3,@.ALMRELAC3
	STA 0,0,3
	LDA 0,	TEMP0
	JMP	@FXRET


;!!!!*****END OF NREL FIXES


SAV3=10

;*******P I C T U R E     C O N V E N T I O N S *******

.BLK 5

;!!!!LEADER FIELDS PUT INTO ANIM.PARMS
;PICTURES HAVE A LEADER CONSISTING OF THESE FIELDS:
;	.RDX	10
;	PLEN	=0
;	PICNO	=1	;DEFINED ABOVE
;	DADDR	=2
;	SPARE	=3
;	PREXMIN	=3
;	PXMIN	=4	;SIGNED DIST IN NIBLES (4 BITS)
			;FROM CTR TO LEFT EDGE
;	PXMAX	=5
;	PYMIN	=6
;	PYMAX	=7
;	PWIDE	=8	;(XMAX-XMIN)/4  I.E.  IN WORDS
;	PDISP	=9	;NORMALLY ZERO
;	PTAB	=10	;NOT A FIELD BUT THE START OF A TABLE:

;FOLLOWED BY A TABLE OF BOX PTRS AT (DISP + Y*PWIDE + X)
;     FOR ALL X, 0< X < [XMAX+1-XMIN]/4
;     AND ALL Y, SIMILARLY.
;
;THE BOX PTR, P, IS A CONSTANT IF P  IS AN ASCII INTEGER
;   ELSE IF P > 127 THEN (P'S LOC)+(P-128) POINTS TO DEF OF A BOX
;   ELSE IF P < 0   THEN (P'S LOC)+P       POINTS TO DEF OF A BOX
;
;FOLLOWED BY THE BOX DEFS.
;
;A BOX PTR =0 MEANS TRANSPARENT AS DOES PTR= 11  (.RDX 10)
;
;THE SIZE OF THE BOARD WAS DEFINED AS BWIDE*BHHIGH





;*********** F R E E U P  *******


.BLK 5


;MOVES FREE POINTER FORWARD AND CHECKS FOR PASSING BMIN
;<AC3> TELLS HOW MANY WORDS FORWARD TO ALLOCATE
;ON RETURNING TO <AC3>+1  :
;		AC0 = NEW FREE
;		AC2 = OLD FREE


.RDX	8

TROUBLE:
	STA	3,FURET
	JSR	BDCLEARC
	LDA	3,FURET
FREEUP:
	LDA	1,BMIN
	LDA	0,0,VIA3
	SUB	0,1		;DESIRED FREE= BMIN-ARG
	LDA	2,MMIN
	SKL	2,1		;SK  MMIN<DESIRED
	JMP	TROUBLE
	LDA	2,AFREE
	ADD	2,0
	IFGE	2,1
	JMP	NOTEASY
	STA	0,AFREE		;IF FREE<DESIRED
	JMP	1,3
NOTEASY:
	STA	3,FURET
	STA	1,DESIRED
	LDA	3,MMIN
MORE:
	LDA	0,PICNO,VIA3
	LDA	2,PICMASK177400
	AND#	0,2,SZR
	JMP	@.TRAP
	LDA	2,MMAX
	SUB	0,2
	LDA	0,DADDR,VIA3
	STA	0,0,VIA2
	LDA	0,PLEN,VIA3
	ADD	0,1
	ADD	0,3
	IFN	1,1
	JMP	MORE
	ADD	0,3
	MOV	3,0
	LDA	2,MMIN
	DECA	2,2
	DECB	2,2
LPP:
	LDA	1,AFREE
	IFLE	1,0
	JMP	FINIS
	MOV	0,3
	LDA	1,PICNO,3
	LDA	3,PICMASK177400
	AND#	3,1,SZR
	JMP	@.TRAP
	LDA	3,MMAX
	SUB	1,3
	MOV	2,1
	SUB	3,1
	STA	AC1,0,VIA3
	MOV	0,3
	LDA	1,PLEN,VIA3
	LDA	3,AFREE		;USE MINIMUM (FREE
				;AND PIC END AS END)
	SUB	0,3
	IFL	3,1
	MOV	3,1
	VMOVE
	JMP	LPP
FINIS:
	MOV	2,3
	MOV	0,2
	MOV	3,0
	LDA	3,FURET
	JMP	1,3


DESIRED:		.-.
PICMASK177400:	177400
FURET:		.-.


;****  B O A R D    P A C K ****

.BLK 5


EXT0	=0		;NAME FOR AC0
PIC1	=1		;NAME FOR AC1

;FIRST SOME SUBROUTINES:

K21:	21

MINY:
	LDA	1,YY
	LDA	0,K21
	SUB	1,0
MIN:
	ZERO	2,2,SKP			;FLAG2_0
MAX:
	SUBZR	2,2			;FLAG2_100000
	LDA	AC1,LTAB-REG3,VIA3	;LOAD CURRENT MIN OR MAX
	SUB	0,1			;COMPARE WITH NEW ONE:
					;MIN IS (SIGN AC1)
	ADDL	1,2,SNC			;THE MIN OR MAX IS
					;IN CARRY BIT
	STA	AC0,LTAB-REG3,VIA3	;UPDATE MIN OR MAX
	JMP	0,AC3

.RDX	10

D15:	15
.LMRELAC3:	0		;!!!!COMPUTED AT INIT TIME
					;!!!!INDEX0-PXMIN
IN:
	ZERO	0,0,SKP			;0 FOR MIN (DEFAULT LIM)
AX:
	LDA	0,D15			;15 FOR MAX
	LDA	AC1,LTAB-INDEX0,VIA3	;LOAD COMPUTED LIM
	LDA	2,LTAB-INDEX0+1,VIA3
	SUB	1,2
	INC	2,2
	STA	2,SUM-INDEX0,VIA3	;SUM(I)_LIM(I+1)-LIM(I)+1
	ADC	0,1			;DIFFERENCE (CORRECT
					;ERROR OF 1)
	ADD	1,0			;RESTORE COMPUTED
					;LIM(CORRECTED)
	STA	AC0,LTAB-INDEX0,VIA3	;DECREMENT COMPUTED LIM
	LSH1	1,1
	LSH1	1,1			;DIFF*4
	LDA	2,.BOARD
	ADD	3,2
	LDA	0,.LMRELAC3
	SUB	0,2			;BOARD+AC3-.LMRELAC3=
					;OLD BOARD LIM PTR
	LDA	AC0,0,VIA2		;GET OLD LIM
	ADD	0,1			;MODIFY
	ISZ	ILIM			;THIS WAS ONCE AUTO INC
	STA	1,@ILIM			;STORE AS NEW LIM
	JMP	0,AC3


.BTOP:	BTOP
.BOXOLD2:	BOXOLD
ILIM:		.-.
DBOX:		.-.

BDEMPTY:
	LDA	0,@.BPNO
	LDA	3,MMAX
	SUB	0,3
	NEG	3,2		;WILL ZAP PICPTR IN END-CODE
JSRII	.FXUP			;!!!!THRU SREL -- ADDRESSING PROB
.FXUP:	FXUP
.BPNO:	BPICNO
BDCLEARC:

	STA	3,@.BDRET
	LDA	0,.BTOP
	STA	0,DBOX		;DBOX_BDTOP
	ZERO	0,0
	STA	0,XMAX
	STA	0,YMAX
	STA	0,SW		;SW_XMAX_YMAX_0
	LDA	0,.BHIGH
	STA	0,YMIN
	STA	0,YY		;YMIN_YY_.BHIGH
	LDA	0,.BWIDE	
	STA	0,XMIN		;XMIN_.BWIDE
XRESET:
	LDA	0,.BWIDE	
	STA	0,XX		;XX_BWIDE
LOOP:
	DSZ	DBOX		;WAS AUTO DEC
	LDA	0,@DBOX
	IFZ	0,0		;CHECK FOR EMPTY BOXES
	JMP	LATER
	STA	0,SW		;SET SW NOT= 0 FOR
				;FINDING NON EMPTY BOX
	LDA	0,XX
	JSR	MIN		;UPDATE MINS AND MAXES
REG3:	JSR	MAX
	JSR	MINY		;(THIS WILL LOAD Y)
	JSR	MAX
LATER:	DSZ	XX		;ITERATE DOWN XX'S
	JMP	LOOP
	DSZ	YY		;ITERATE DOWN YY'S
	JMP	XRESET
	LDA	0,SW
	IFZ	0,0		;CHECK FOR EMPTY BOARD
	JSR	BDEMPTY


.RDX	8

	JSR	@.FREEUP
	12
	NEG1	0,0			;AC2= OLD FREE
	STA	0,PLEN,VIA2		;FREE DEFINES LENGTH NOW
	ZERO	0,0
	STA	0,PICNO,VIA2		;PICNO IS TEMPORARILY 0
	LDA	0,.PREXMIN

	ADD	2,0			;FIRST LIMIT ADDRESS -1
	LDA	3,MMAX

	SUB	3,2
	STA	2,0,3			;RECORD OF PIC START.
					;UPDATED BY CORE ALLOCATOR
	STA	0,ILIM
	JSR	IN			;XMIN
INDEX0:
	JSR	AX			;XMAX
	JSR	IN			;YMIN
	JSR	AX			;YMAX
	LDA	0,.BHIGH
	LDA	1,YMAX
	ADC	1,0			;FROM PIC'S YMAX TO BOARD
					;YMAX (A LOW CORE ADD)
	LDA	1,.LBWIDE
	CYCLE	0			;YMAXDIFF*BWIDE
					;!!!!ADDED 0 TO CYCLE
 					;!!!!TO GET ASSEMBLY
					;!!!!TO HAPPEN
	LDA	1,.BPRETAB		;PRE-, BECAUSE THIS
					;WILL BE "AUTO-INC"
	ADD	1,0
	LDA	1,XMIN
	ADD	1,0
	STA	0,@.BOXOLD2		;!!!!BOXOLD PUT IN SREL 
		;ALREADY DECREMENTED 	;	DSZ	@.BOXOLD
	LDA	1,SUM
	ISZ	ILIM			;WAS AUTO INC
	STA	1,@ILIM			;P. PWIDE _ SUM
					;*** ILIM IS HERE ***
	LDA	2,S2
	ZERO	0,0
	MMUL

	JSRII	.TORESET	;REALLY JUMP--II  YOU KNOW ******

.TORESET:	RESET

.PREXMIN:	PREXMIN

XX:		.-.
YY:		.-.
SW:		.-.
.BPRETAB:	BPRETAB	

.RDX	10

TAB1:	11
TAB2:	11*16
	2
	2*16
	.-.			;NEW PAD
	13
	13*16
.LBWIDE:	LBWIDE

	.-.			;PADDING

.RDX	8

GREY3:	122645

.RDX	10

	3
	3*16
GREY4:	.-.
	4
	4*16
GREY5:	.-.
	5
	5*16
GREY6:	.-.
	6
	6*16
GREY7:	.-.
	7
	7*16
GREY8:	.-.
	8
	8*16
GREY9:	.-.
	9
	9*16
GREY10:	.-.
	10
	10*16
	.-.		;PADDING
	12
	12*16
	14
	14*16
	1
	1*16
	.-.			;NEW PAD
	.-.
SUM:	.-.			;SPACE FILLER
S1:	.-.			;SPACE FILLER
S2:	.-.			;SPACE FILLER
S3:	.-.			;SPACE FILLER
LTAB:
XMIN:	.-.			;SPACE FILLER
XMAX:	.-.			;SPACE FILLER
YMIN:	.-.			;SPACE FILLER
YMAX:	.-.			;SPACE FILLER
	15
	15*16



;**** C O M P R E S S O R   S U B R O U T I N E S***
;****** CAUTION:  NO INSERTS WITHOUT UPDATING TABLE OF CODES 

.SAVSTRT:	SAVSTRT		;!!!!PUZZLE -- CAN'T FIND IT USED
.BDRET:	BDRET

CDSUB:
	ADDS	0,2
	ISZ	IFROM		;WAS AUTO 		*********
	LDA	EXT0,@IFROM
	ISZ	IFROM		;WAS AUTO 		*********
	LDA	PIC1,@IFROM
	SKZ	PIC1,PIC1
	JMP	SOMEBLACK
	IFN1	EXT0,EXT0	;EXT = -1 ?
	JSR	0,AC3		;THEN TRANSPARENT
AC3MIN:
	IFZ	EXT0,EXT0	;EXT = 0 ?
	JSR	0,AC3		;THEN WHITE
	ISZ	IOUT		;WAS AUTO 		*********
	STA	EXT0,@IOUT
	JSR	0,AC3		;ELSE NOBLACK
OPAQUE:
	DSZ	IOUT		;IOUT INCREMENTED PREMATURELY
	COM	PIC1,PIC1
	LDA	0,GREY3
	IFE	0,1		;COMPARE PIC WITH GREY3
	JSR	0,AC3		;MATCH
	LDA	0,GREY4
	IFE	0,1		;COMPARE PIC WITH GREY4
	JSR	0,AC3		;MATCH
	LDA	0,GREY5
	IFE	0,1
	JSR	0,AC3
	LDA	0,GREY6
	IFE	0,1
	JSR	0,AC3
	LDA	0,GREY7
	IFE	0,1
	JSR	0,AC3
	LDA	0,GREY8
	IFE	0,1
	JSR	0,AC3
	LDA	0,GREY9
	IFE	0,1
	JSR	0,AC3
	LDA	0,GREY10		;***** BEWARE THAT GREY10
				;WOULD = GREY1 ***
	IFE	0,1
	JSR	0,AC3
	ISZ	IOUT		;WAS AUTO 		*********
	STA	PIC1,@IOUT	;DATA MATCHES NO GREY STANDRD
	JSR	0,AC3		;OPAQUE
NOWHITE:
		;DSZ	IOUT	;WAS AUTO	*********
	STA	PIC1,@IOUT
	JSR	0,AC3		;NOWHITE

SOMEBLACK:
	COM	PIC1,PIC1,SNR	;NOT PIC
	JSR	0,AC3		;PIC=-1 HENCE BLACK
	ISZ	IOUT		;WAS AUTO 		*********
	STA	EXT0,@IOUT	;POSSIBLY WRONG TO STUFF EXT
	AND#	PIC1,EXT0,SNR	;NOT PIC AND EXT = 0 ?
	JMP	OPAQUE		;YES, HENCE OPAQUE
	COM	EXT0,EXT0		;NOT EXT
	AND#	PIC1,EXT0,SNR	;NOT EXT OR NOT PIC = 0 ?
	COM	PIC1,PIC1,SKP	;RESTORE PIC FROM NOT PIC AND SKIP
	COM	PIC1,PIC1,SKP	;RESTORE PIC FROM NOT PIC AND SKIP
	JMP	NOWHITE		;YES, NOT EXT OR NOT PIC = 0 
	ISZ	IOUT		;WAS AUTO 		*********
	STA	PIC1,@IOUT	;2ND DATA WORD FOR MIXED CODE
	JSR	0,AC3




		;**** HERE'S C O M P R E S S I O N ********	

HDSTARTC:
	ZERO	2,2
	JSR	CDSUB+1			;DON'T ADD OR
					;SWAP INITIALLY
	LDA	AC0,TAB1-AC3MIN,VIA3	;AC3 (RELATIVE TO AC3MIN)
	JSR	CDSUB			; POINTS INTO CODE TABLE
	LDA	AC0,TAB1-AC3MIN,VIA3
	JSR	CDSUB
	LDA	AC0,TAB2-AC3MIN,VIA3	;USE 2ND TABLE --DON'T SHIFT
	JSR	CDSUB
	LDA	AC0,TAB2-AC3MIN,VIA3
	ADD	0,2			;***SWAP HERE ?????
	ISZ	IHEADER
	STA	2,@IHEADER
	DSZ	HDCTR
	JMP	HDSTARTC		; END OF COMPRESSION

	LDA	0,IOUT
	INC	0,0		;IOUT INCREMENTS BEFORE USE
	STA	0,AFREE		;FREE _ IOUT + 1
FIN:
	LDA	1,BMIN		;SOME DAY AN AFREE UNLOCK
				;MIGHT BE ADDED HERE *******
	LDA	0,D36				;********
	ADD	1,0
	STA	0,BMIN
	LDA	0,COMPRESD
	LDA	2,BOXRAND	;THE OLD BOX 
	SUB	2,0
	STA	AC0,0,VIA2
FFNIC:
	DSZ	CT
	JSRII	.LPPP		;!!!!WAS JUST JMP--ADDRESS PROB
	LDA	0,BOXNEW
	STA	0,IBOXNEW
LP6:
	LDA 	2,@.SUM		;!!!!SUM TABLE OUT OF REACH
	LDA	0,0,2		;!!!!SO GO THRU SREL PTR
	;	LDA	0,@.SUM		!!!!WHAT WAS HERE!!!!
	STA	0,XCT
LP7:
	ISZ	@.BOXOLD
	LDA	2,@.BOXOLD	;!!!!WANT WHATS PTED TO BY BOXOLD
	LDA 0,0,2		;!!!!
	LDA	2,M128
	AND#	0,2,SNR
	JMP	ABS
	IFP	0,0
	ADD	2,0
	LDA	1,@.BOXOLD
	ADD	1,0
	LDA	1,IBOXNEW
	ADC	1,0		;-(IBOXNEW+1)
	IFP	0,0
	SUB	2,0
ABS:
	ISZ	IBOXNEW			;WAS AUTO
	STA	0,@IBOXNEW
	DSZ	XCT
	JMP	LP7
	LDA	0,@.BOXOLD
	LDA	1,.BWIDE	
	ADD	0,1
	LDA 	2,@.SUM		;!!!!SUM TABLE OUT OF REACH
	LDA	0,0,2		;!!!!SO GO THRU SREL PTR
	;	LDA	0,@.SUM		!!!!WHAT WAS HERE!!!!
	SUB	0,1
	STA	1,@.BOXOLD
	LDA 	2,@.SUM		;!!!!PART OF SUM TABLE--PAINFUL
	LDA	0,2,2		;!!!!REPLACEMENT VIA SREL OF DSZ
	NEG	0,0
	COM	0,0
	STA	0,2,2
	SKZ	0,0
	;	DSZ	@.S2	!!!!WHAT WAS HERE!!!!
	JMP	LP6
	JMP	ROUND

IFROM:	.-.
IOUT:	.-.			;WAS AUTO
.LPPP:	LPPP			;!!!!ADDRESSING PROB

ROUND:
	LDA	0,AFREE
	LDA	3,MMAX
	LDA	2,0,3
	ADD	3,2		;RETRIEVE THE PICTURE'S
				;STARTING ADDRESS
	SUB	2,0
	STA	AC0,PLEN,VIA2	;PLEN _ FREE - SAVSTRT
	ZERO	0,0
	STA	0,PDISP,VIA2	;P. PDISP _ 0
	LDA	0,@.BPICNO
	STA	0,PICNO,VIA2	;P. PICNO _ B. PICNO
	LDA	3,MMAX
FXUPC:
	ZERO	1,1
	DIR			;"CRITICAL" SECTION
	STA	1,0,3		;ZERO @MMAX
	STA	1,@.BPICNO	;ZERO BOARD PIC NO.
	SUB	0,3		;PICPTR TABLE ENTRY ADDRESS
	SUB	3,2		;PIC PTR IS REL TO MMAX
	STA	AC2,0,VIA3	;UPDATE PICPTR TABLE ENTRY
	EIR
	MOV	2,0,SZR		;IF NOT DELETING A NULL PIC,
	ADD	3,0		;THEN RETURN ABS ADDRESS OF PIC
				;IN AC0, ELSE ZERO
	LDA	1,.BOARD
	STA	1,BMIN		;RESET BMIN
	JSRII	BDRETA		;RETURN WITHE PIC START. IN AC0

BDRETA:	BDRET			;!!!!BDRET PUT IN SREL --ADDRESSING
				;!!!!PROBS

.BPICNO:BPICNO
XCT:	.-.
HDCTR:	.-.
IHEADER:	.-.			;WAS AUTO
IBOXNEW:	.-.			;WAS AUTO


RESETC:
	STA	1,ARG
	JSR	@.FREEUP	;RESERVE CORE FOR BOXPTR TABLE
ARG:	.-.

	STA	2,IBOXNEW
	DSZ	IBOXNEW
	LDA	1,@.BOXOLD
	LDA 	3,@.SUM		;!!!!SUM TABLE OUT OF REACH
	LDA	0,2,3		;!!!!SO GO THRU SREL PTR
	;	LDA	0,@.S2	!!!!WHAT WAS HERE!!!!
	STA	0,YYCTT
NYLP:
	LDA	0,0,3		;!!!!HOPE PTR TO SUM STILL IN 3
	;	LDA	0,@.SUM	!!!!WHAT WAS HERE!!!!
	STA	0,XCT
LLPP:
	INC	1,1
	STA	AC1,0,VIA2
	INC	2,2
	DSZ	XCT
	JMP	LLPP
	LDA	0,.BWIDE
	ADD	0,1
	LDA	0,0,3		;!!!!HOPE PTR TO SUM STILL IN 3
	;	LDA	0,@.SUM	!!!!WHAT WAS HERE!!!!
	SUB	0,1
	DSZ	YYCTT
	JMP	NYLP
	LDA	3,ARG
	LDA	2,IBOXNEW
	STA	2,BOXNEW
	ADD	2,3
SCAN:
	LDA	2,BOXNEW
	SUB	2,3,SNR
	JMP	FINBUB
	STA	3,CT
	MOV	2,3
	JMP	ORDERED
BLOOP:
	INC	2,2
	LDA	0,@0,2
	LDA	1,0,2
	ADD	1,0
	LDA	1,@1,2
	SUB	1,0
	LDA	1,1,2
	IFLE	0,1		;COMPARE ABSOLUTE ADDRESSES
				;OF BLOCKS
	JMP	ORDERED
	MOV	2,3		;KEEP TRACK OF HIGHEST SWITCH
	LDA	0,0,2
;		LDA	1,1,2	;ALREADY LOADED
	STA	1,0,2
	STA	0,1,2

ORDERED:
	DSZ	CT
	JMP	BLOOP
	JMP	SCAN		;BUBBLE SCAN AGAIN 

.SUM:		SUMA		;!!!!VIA SREL
COMPRESD:	.-.
BOXRAND:	.-.
DUMSAVSTRT:	.-.		;!!!!WAS SAVSTRT -- PUT INTO SREL
				;!!!!I COULDN'T FIND IT BEING USED
				;!!!!ANYWHERE BUT LEFT HERE IN CASE
				;!!!!CRITICAL TO ORDERING

CT:		.-.
.BOXOLD:	BOXOLD		;!!!!VIA SREL
BOXNEW:		.-.
M128:  		-128

FINBUB:
	LDA	0,ARG
	STA	0,CT
LPPPC:
	ISZ	IBOXNEW			;WAS AUTO
	LDA	2,@IBOXNEW
	LDA	AC0,0,VIA2
	STA	2,BOXRAND		;REMEMBER THIS LOCATION
	LDA	1,M128
	AND#	0,1,SNR
	JSRII	.FFNI		;!!!!WAS JUST JMP--ADDRESS PROB
	IFP	0,0
	ADD	1,0
	ADD	2,0
	LDA	1,D3
	ADD	1,0
	STA	0,IFROM
	LDA	0,D36
	LDA	1,BMIN
	SUB	0,1
	LDA	0,AFREE		;AFREE MAY WANT TO
				;BE LOCKED HERE**************
	IFGE	0,1
	JMP	@.TRAP
	STA	0,COMPRESD
	DECA	0,0
	DECB	0,0
	STA	0,IHEADER
	LDA	1,D4
	STA	1,HDCTR
	ADD	0,1
	STA	1,IOUT
	JSRII	.TOHDSTART	;!!!!VIA SREL -- REALLY JMP


YYCTT:	.-.
;.S2:	S2		;!!!!S2 GOTTEN TO THRU SREL LABEL SUM


.TOHDSTART:	HDSTART
.FFNI:	FFNI		;!!!!FOR FIXING ADDRESSING PROB

;********  D R A W I N G     L O O P  *********
.BLK	3

.RDX 10


DD128:  128

;X AND Y ARE PASSED IN AC0 AND AC1

;DIP IN A NEW COLOR OF PAINT:

DIPC:
	LDAF	ARG0
	JSR	@.IVAL
	STA	0,@.TONE1	;!!!!IN SREL
	ONE	1,1
	JSR	@.LARG
	JSR	@.IVAL
	STA	0,TONE2
	JMP	@.ERET


;FIRST A SAMPLE OF A TRANSPARENT BOX:
TBOX:	-1
	-1
	-1
	-1

	-1
	0
	-1
	0
	-1
	0
	-1
	0
	-1
	0
	-1
	0
	-1
	0
	-1
	0
	-1
	0
	-1
	0
	-1
	0
	-1
	0
	-1
	0
	-1
	0
	-1
	0
	-1
	0


.RDX	8


SAVE2:	.-.
MASK1:	-BWIDE
MASK2:	-BWIDE*BHIGH
.BTAB:	BTAB

.RDX	10

D128:	128
DRWSW:	0
.XVAL:	XVALS
.YVAL:	YVALS

.RDX	8

TDRAWC:
	STA	3,.+2+SAV3
	JSRII	.INTR		;!!!!IN INTER
FNI:
	JSRII	.RESUM		;!!!!IN INTER
FRSTPT:	0			;!!!!WAS LABEL FIRST--I.E. 
				;!!!!JSR @.RESUM
				;!!!!FIRST
				;!!!!0777

	0777
	.BLK	LENSTATE
FIRST:
	JSRII	.DOMOUS		;!!!!IN AMISC
	LDA	2,@.CXMINABS	;!!!!IN SREL
	LSH2	2,2		;SIGN BIT IS 0 (CXMIN IS ABS)
	SUB	2,0
	LDA	2,@.CYMAXABS	;!!!!IN SREL
	LSH2	2,2		;SIGN BIT IS 0 (CYMAX IS ABS)
	ADD	2,1
	LDA	2,@.AXOFF	;OFFSET CORRECTION
				;!!!!IN COMM
	LDA	2,0,2		;!!!!AXOFF IN NREL SO GO DOWN
				;!!!!ANOTHER LEVEL
	SUB	2,0
	LDA	2,@.AYOFF	;!!!!IN COMM
	LDA	2,0,2		;!!!!AYOFF IN NREL SO GO DOWN
				;!!!!ANOTHER LEVEL
	SUB	2,1
	JSR	DRAWC
	LDA	1,MASK7
	DIR
	LDA	0,@.WW

	AND	1,0
	STA	0,@.WW

	EIR
	JMP	FNI

.AXOFF:		AXOFFA		;!!!!IN COMM
.AYOFF:		AYOFFA		;!!!!IN COMM
.INTR:		INTR		;!!!!IN INTER
.DOMOUS:	DOMOUS		;!!!!IN AMISC
.RESUM:		RESUM		;!!!!IN INTER
MASK7:		177577		;!!!!CHANGED FROM 177577--SINCE HAD
				;!!!!TO MOVE TDRAW TO INTVEC+7 IN 
				;!!!!INTERRUPT VECTOR
.CXMINABS:	CXMINABS	;!!!!IN SREL
.CYMAXABS:	CYMAXABS	;!!!!IN SREL
.WW:		WW		;!!!!IN ANIM.PARMS
.TBOX:		TBOXA		;!!!!PUT PTR IN SREL
.TONE1:		TONE1		;!!!!IN SREL
TONE2:		122645		;A GREY TONE
.BXMIN:	BXMIN
.BYMAX:	BYMAX
ELBOWROOM:	460



FIX:
	IFZ	0,0
	JMP	ALLOC
	LDA	1,D128
	SUB	1,0
	JMP	FIXED

ALLOC:
	STA	2,SAVE2
	LDA	1,D36
	LDA	2,BMIN
	ADC	1,2		;EXTEND BOARD DOWN
				;(1 EXTRA FOR BLOCK COPY ROUTINE)
	LDA	0,AFREE		;TOO BIG?
	LDA	1,ELBOWROOM
	ADD	1,0		;SAVE ROOM FOR COMPRESSION
	IFLE	0,2
	JMP	OK
	JMP	0,3

;	<SWAP OUT TO MAKE MORE ROOM>

	JSR	@.TRAP

OK:
	INC	2,0
	STA	0,BMIN		;NEW BMIN
	LDA	0,@.TBOX	;!!!!HAD TO GO THROUGH SREL
	LDA	1,D36
	VMOVE			;MOVE 36 WORDS FROM (AC0) TO (AC1)
	LDA	2,SAVE2
	LDA	0,BMIN		;BMIN WAS LOST BY VMOVE
	SUB	2,0		;BOX PTR IS REL TO ITS LOCATION
	STA	AC0,0,VIA2	;STORE NEW BOX PTR
	JMP	FIXED

X:	.-.
Y:	.-.

XYMIXC:
	LDA	2,@.BXMIN
	MOVZL	2,2
	MOVZL	2,2
	SUB	2,0
	MOVZR	0,2
	MOVZR	2,2		;X_AC0/4-BXMIN
	STA	2,X
	LDA	2,@.BYMAX
	MOVZL	2,2
	MOVZL	2,2
	NEG	1,1
	ADD	2,1
	MOVZR	1,2
	MOVZR	2,2		;Y_-AC1/4+BYMAX
	STA	2,Y
	LDA	2,D3
	ANDZL	2,1		;2*(AC1 REM 4)
	ANDZR	2,0
	ADDL	0,1		;CVERSION=4*(AC1 REM 4)+(AC0 REM 4)
	JMP	0,3



BOXPTR:
	LDA	0,Y
	LCYL+LBWIDE-2		;***** LBWIDE > 1  OR TROUBLE!!!
	LDA	1,X
	MOVZR	1,1		;XBOX = X/4
	MOVZR	1,1
	LDA	2,MASK1
	AND#	1,2,SZR		;CHECK FOR BITS OUTSIDE
				;NORMAL FIELD
	JMP	0,3		;XBOX IS OUT OF RANGE; DON'T DRAW
	AND	0,2		;YBOX*BWIDE=(Y/4)*BWIDE
	LDA	0,MASK2		;MASK2= -BWIDE*BHIGH
	AND#	0,2,SZR		;CHECK FOR HIGH BITS
				;OUTSIDE OF HIGH FIELD
	JMP	0,3		;YBOX IS OUT OF RANGE; DON'T DRAW
	ADD	1,2		;XBOX + YBOX*BWIDE
	LDA	1,.BTAB
	ADD	1,2
	LDA	AC0,0,VIA2	;BOARDBOXTAB(XBOX + YBOX*BWIDE)
	JMP	1,3		;SKIP RETURN

WDPTR:
	SKN	0,0
	JMP	FIX
FIXED:
	ADD	0,2		;PTR WAS REL TO ITS 
				;OWN LOCATION (AC2)
	LDA	1,D3
	LDA	0,X
	ANDZL	1,0		;(X REM 4)*2
	ADD	0,2
	LDA	0,Y
	ANDZL	1,0
	ADDZL	0,0		;(Y REM 4)*8
	ADD	0,2		;BOX = 2*[ (X REM 4) + (YREM 4)*4 ]
	JMP	1,3		;SKIP RETURN

LOCK:	1

TRYIT:
	ISZ	LOCK
	NOP
DRAWC:
	DSZ	LOCK
	JMP	TRYIT
	STA	3,RETDRAW
	JSR	XYMIXC
	LDA	2,.CBIG
	NEG1	0,0
	MMUL
	LDA	0,ACURSOR	;!!!!WENT FROM CURSOR TO ACURSOR
	ADD	0,1		;CURSOR + VERSION*SIZE-1
	STA	1,ABRUSH	;!!!!MADE 'A'BRUSH--BRUSH ENTRY
				;!!!!IN LDCUR
	LDA	0,.CHIGH
	STA	0,CY		;INIT THE Y
NEWY:
	LDA	0,.CWIDE	
	STA	0,CX		;INIT THE X
LOOP2:
	LDA	3,ABRUSH		;GET NEXT BRUSH WORD
	INC	3,3
	STA	3,ABRUSH
	LDA	0,0,3
	IFZ	0,0
	JMP	DONE
	JSR	BOXPTR
	JMP	DONE		;ERROR(OUT OF BOUNDS)
	JSR	WDPTR
	JMP	DONE
	LDA	3,ABRUSH
	LDA	3,0,3		;PICK UP BRUSH ELEMENT AGAIN
	LDA	1,@.TONE1	;!!!!IN SREL
	AND	3,1		;TONE1 AND BRUSH
	COM	3,3
	LDA	AC0,4,VIA2
	AND	3,0		;PIC1 AND NOT BRUSH
	ADD	1,0
	STA	AC0,4,VIA2	;PIC1_(TONE1 AND 
				;BRUSH)+(PIC1 AND NOT BRUSH)
	LDA	AC0,5,VIA2
	AND	3,0		;PIC2 AND NOT BRUSH
	COM	3,3
	LDA	1,TONE2
	AND	3,1		;TONE2 AND BRUSH
	ADD	1,0
	STA	AC0,5,VIA2	;PIC2_(TONE2 AND BRUSH)+
				;(PIC2 AND NOT BRUSH)

DONE:
	ISZ	X		;NEXT X
	NOP
	DSZ	CX		;COUNTING DOWN X
	JMP	LOOP2
	LDA	1,X
	LDA	0,.CWIDE	
	SUB	0,1
	STA	1,X		;RESET X
	ISZ	Y		;NEXT Y
	NOP
	DSZ	CY		;COUNTING DOWN Y
	JMP	NEWY
	LDA	3,RETDRAW
	ISZ	LOCK
	JMP	0,3
	JMP	0,3		;RETURN

ABRUSH:		.-.		;!!!!MADE 'A'BRUSH -- BRUSH ENTRY
				;!!!!IN ALDCUR
RETDRAW:	.-.


.XYMIX:	XYMIX


FTCHC:
	STA	3,FRET		;AC0=X
	JSRII	.XYMIX		;AC1=Y
				;!!!!ADDRESS PROB FORCES THRU SREL
	LDA	2,.ENDMASKTAB
	SUB	1,2
	LDA	1,0,2		;0=WHITE
	INCZR	1,1		;1=TRANS
	STA	1,BIT		;2,3=BLACK
	JSR	BOXPTR
BAD:
	ZERO	0,0		;SKIPPED OVER IF ALL IS WELL
	IFZ	0,0
	JMP	TRNS
	JSR	WDPTR
	JMP	BAD		;ERROR RETURN
	ZERO	0,0
	LDA	1,5,VIA2
	LDA	3,BIT
	AND#	1,3,SZR
	LDA	0,D2
	LDA	1,4,VIA2
	AND#	1,3,SZR
TRNS:
	INC	0,0
	JMP	@FRET

.ENDMASKTAB:	477
BIT:	.-.
VAL:	.-.
D2:	2


CRAMC:
	STA	3,SRET		;AC0=X
	STA	2,VAL		;AC1=Y
	JSRII	.XYMIX		;AC2=VAL
				;!!!!ADDRESS PROB FORCES THRU SREL
	LDA	2,.ENDMASKTAB
	SUB	1,2
	LDA	1,0,2
	INCZR	1,1
	STA	1,BIT
	JSR	BOXPTR
	JMP	NOCRAM		;OUT OF BOUNDS
	SKZ	0,0
	JMP	INSIDE
	LDA	1,VAL
	MOVR	1,1,SZC
	MOVR	1,1,SZC
	JMP	INSIDE
	JMP	@SRET
INSIDE:
	JSR	WDPTR
	JMP	NOCRAM		;OUT OF CORE
	LDA	1,BIT
	COM	1,1
	LDA	3,VAL
	LDA	0,4,VIA2
	AND	1,0
	MOVR	3,3,SZC
	ADC	1,0
	STA	0,4,VIA2
	LDA	0,5,VIA2
	AND	1,0
	MOVR	3,3,SZC
	ADC	1,0
	STA	0,5,VIA2
NOCRAM:
	LDA	0,VAL
	JMP	@SRET

FRET:	.-.
SRET:	.-.
CX:	.-.
CY:	.-.

EBY:	.-.
EBVAL:	.-.

EBITSC:
	LDA	1,C2
	JSR	@.LARG
	JSR	@.IVAL
	STA	0,EBVAL
	ONE	1,1
	JSR	@.LARG
	JSR	@.IVAL
	STA	0,EBY
	LDAF	ARG0
	JSR	@.IVAL
	LDA	1,EBY
	LDA	2,EBVAL
	LDA	3,C3
	ADCZ	3,2		;CARRY IF 0<= VAL <=3
	AND	3,2		;MASK VALUE DOWN TO 2 BITS
	JSR	ECALL		;CARRY INDICATES FTCH OR CRAM
	JSR	@.INTN
	JSR	@.SVLI
	JMP	@.ERET

ECALL:
	MOV	0,0,SNC		;TEST CARRY 
	JMP	CRAMC
	JMP	FTCHC

YTEMP:	.-.
.DDRAW:	DRAW			;!!!!ADDRESS PROB FORCES THRU SREL

SMDRAWC:
	ONE	1,1
	JSR	@.LARG
	JSR	@.IVAL
	STA	0,YTEMP
	LDAF	ARG0
	JSR	@.IVAL
	LDA	1,YTEMP
	JSRII	.DDRAW
	JMP	@.ERET


;%*** C U R S O R   S P R E A D ****

.BLK 1

.RDX	10

CSX:		.-.
CSY:		.-.
CSRET:		.-.
SW1:		.-.
CTR1:		.-.
PLACE:		.-.
.MSKTAB:	MSKTABA		;!!!!GOTTA GO THRU SREL
D16:		16

.RDX	8

K100000:		100000
CSMASK:		.-.

CSC:
	STA	3,CSRET
	LDA	0,.CHIGH
	STA	0,CSY
	LDA	0,ACURSOR	;!!!!WENT FROM CURSOR TO ACURSOR
	STA	0,PLACE		;INITIALIZATION
	ZERO	0,0
	STA	0,SW1
NEXTY:
	LDA	0,.CWIDE	
	STA	0,CSX
NEXT:
	LDA	0,@.MSKTAB	;!!!!GOTTA GO THRU SREL
				;!!!!WANTS ADDRESS
	STA	0,CSMASK
	LDA	0,D16
	STA	0,CTR1
	LDA	3,SW1
	LDA	2,PLACE

	ZERO	0,0
	MOVZL#	3,3,SZR		;TEST FOR ALL BUT SIGN BIT
	LDA	AC0,-1,VIA2
	LCYL+4
	STA	0,B10

	LDA	AC0,0,VIA2
	STA	0,B11

	LDA	0,.CWIDE	
	SUB	0,2

	ZERO	0,0
	MOVZL#	3,3,SEZ
	LDA	AC0,-1,VIA2
	LCYL+4
	STA	0,B00

	ZERO	0,0
	IFN	3,3
	LDA	AC0,0,VIA2
	STA	0,B01

	
LOOP1:
	ZERO	2,2
	JSR	ROUTN
B00:
	.-.
	JSR	ROUTN
B01:
	.-.
	JSR	ROUTN
B10:
	.-.
	JSR	ROUTN
B11:
	.-.
	LDA	3,PLACE
	STA	AC2,0,VIA3
	LDA	2,.CBIG
	ADD	2,3
	STA	3,PLACE
	DSZ	CTR1
	JMP	LOOP1
	LDA	0,.CBIG
	LSH1	0,0
	LSH1	0,0			;LSHIFT 4  (*16)
	LSH1	0,0
	LSH1	0,0
	LDA	1,PLACE
	SUB	0,1
	INC	1,1
	STA	1,PLACE
	ISZ	SW1
	DSZ	CSX
	JMP	NEXT
	LDA	0,K100000		;SET SW
	STA	0,SW1
	DSZ	CSY
	JMP	NEXTY
	JMP	@CSRET
ROUTN:
	LDA	AC0,0,VIA3
	LDA	1,@CSMASK
	ISZ	CSMASK
	AND	0,1
	ADD	1,2
	MOVR	0,1			;JUNK IN AC1,
					;BUT LOW BIT IN CARRY
	MOVR	0,0			;A ROTATE BECAUSE
					;CARRY IS CORRECT
	STA	AC0,0,VIA3
	JMP	1,AC3

;C O N S T A N T S

	.RDX	4
R0	=33333333
R1	=13131313
R2	=03030303
R3	=01010101

L0	=00000000
L1	=20202020
L2	=30303030
L3	=32323232

B0	=33333333
B1	=00333333
B2	=00003333
B3	=00000033

T0	=00000000
T1	=33000000
T2	=33330000
T3	=33333300

MSKTAB:	L0&T0
R0&T0
L0&B0
R0&B0
L1&T0
R1&T0
L1&B0
R1&B0
L2&T0
R2&T0
L2&B0
R2&B0
L3&T0
R3&T0
L3&B0
R3&B0
L0&T1
R0&T1
L0&B1
R0&B1
L1&T1
R1&T1
L1&B1
R1&B1
L2&T1
R2&T1
L2&B1
R2&B1
L3&T1
R3&T1
L3&B1
R3&B1
L0&T2
R0&T2
L0&B2
R0&B2
L1&T2
R1&T2
L1&B2
R1&B2
L2&T2
R2&T2
L2&B2
R2&B2
L3&T2
R3&T2
L3&B2
R3&B2
L0&T3
R0&T3
L0&B3
R0&B3
L1&T3
R1&T3
L1&B3
R1&B3
L2&T3
R2&T3
L2&B3
R2&B3
L3&T3
R3&T3
L3&B3
R3&B3


	.END
 
 
