

;// FILE MAINTENANCE--      BLKMV.SR

;//THIS FILE CONTAINS THE BLOCKMOVE AND BLOCKMOVEANDCLEAR
;//ROUTINES--THE ACTUAL CLEARING ROUTINE IS IN A SEPARATE
;//FILE -- CLREM.SR.

;//BLKMV AND BMVCL TAKE 7 ARGUMENTS --
;//SRCEX, WDTH, SRCEY, HEIGHT, DESTX, DESTY MODE--
;//(FROM ASM LANG ACTUALLY WANTS MODE AND PTRS TO TWO
;//X,W,Y,H TABLES).  MODE 0 CLEARS DEST BEFORE OR'ING SOURCE
;//AND MODE 1 DOES NOT -- GIVES ABILITY TO OVERLAY.
;//A CALL FROM SMALLTALK WILL LOOK LIKE:
;//to dmove sx w sy h dx dy mode(:sx:w:sy:h:dx:dy:mode CODE ??)
;//to dmovec sx w sy h dx dy mode(:sx:w:sy:h:dx:dy:mode CODE ??)
;//A CALL FROM ASM LANGUAGE EXPECTS PTR TO THE MODE IN AC3,
;//A PTR TO THE SOURCE TBL (X,W,Y,H)
;//IN AC3+1 AND A PTR TO DESTINATION TABLE (X,W,Y,H)IN AC3+2
;//(ONLY TWO PARAMETERS ARE USED IN THE DESTINATION TABLE--
;//X AND Y--BUT THEY MUST BE SEPARATED BY ONE WORD.
;//IF, HOWEVER, THE CALL IS FOR MOVING AND CLEARING BOTH SOURCE
;//AND DESTINATION, IF THE CALL IS FROM ASSEMBLY LANGUAGE, THE
;//TABLES MUST BE COMPLETE, -- WHEN THE CALL IS FROM SMALLTALK,
;//THE TBLS ARE FORCED TO SYMMETRY. THIS BECAUSE THE INSC
;//ROUTINE, WHICH TESTS TO SEE IF THERE IS ANY INTRSCTN BETWEEN
;//THE SRC AND DEST AREAS, EXPECTS FULL X,W,Y,H TABLES.
;//MOVE AND CLR SIMPLY CLEARS THE PORTION OF THE SOURCE AREA NOT
;//INTERSECTING WITH THE DESTINATION.)
;//THE CALL WOULD LOOK LIKE:
;//	JSRII .BLMV or .BMVCL
;//	SRCTB
;//	DESTB
;//	JMP CONT . . .
;//SRCTB:
;//SX:	0
;//W:	0
;//SY:	0
;//H:	0
;//DESTB:
;//DX:	0
;//DW:	0
;//DY:	0
;//DH:	0
;//MD:	0
 
.TITL BLKMV
.GETNOLIST "SMALL.OPS"
.GETNOLIST "SMALL.SYMS"
.GETNOLIST "SMDISP.SYMS"
.BEXT DSKBUF

.SREL
BLTSX:	0
BLTSW:	0
BLTSY:	0
BLTSH:	0
BLTDX:	0
BLTDW:	0
BLTDY:	0
BLTDH:	0
BLTMOD:	0
BSVSX:	0
BSVSW:	0
BSVSY:	0
BSVSH:	0
BSVDX:	0
BSVDW:	0
BSVDY:	0
BSVDH:	0
LSRCX:	0
LSRCW:	0
LSRCY:	0
LDESX:	0
LDESW:	0
LDESY:	0
LDESH:	0
BLTRTN:	0
CLRSW:	0
SVSY:	0
SVDY:	0
BLKMV:	BLKMVC
STBLT:	STBLTC
BMVCL:	BMVCLC
STBCL:	STBCLC


.NREL
-1

SXTEN:	20
.GTMS:	GTMES
.CLRSW:	CLRSW
.RETRN:	BLTRTN		;//ADDRESSING PROBS
.BLTSX2: BLTSX
.BLTSW2: BLTSW
.BLTSY2: BLTSY
.BLTSH2: BLTSH
.BLTDX2: BLTDX
.BLTDW2: BLTDW
.BLTDY2: BLTDY
.BLTDH2: BLTDH
.BMOD2:	BLTMOD
.INSEC:	INSEC
.COPY:	COPY
.SVSY2:	SVSY
.SVDY2:	SVDY


STBCLC:
	ISZ @.CLRSW	;//SWCH WHEN NON-INTRSCNG 
			;//SRC CLRING REQUESTED
STBLTC:
	JSRII .GTMS	;//GET ARGS--IF CALLED FROM SMALLTALK
	7
	BLTSX
BLTIT:
	LDA 0,@.BLTDY2	;//MORE KLUDGERY TO GET MODE ARG IN 
	STA 0,@.BMOD2	;//IN RIGHT PLACE
	LDA 0,@.BLTDW2	;//KLUDG SO CAN CL WITH 6 PARMS FRM SMTLK
	STA 0,@.BLTDY2	;//TO WORK & ALSO HAVE SYMETRIC TBLS FOR
			;//CONSISTENT CALLS FROM ASM LANGUAGE
	LDA 0,@.BLTSW2
	STA 0,@.BLTDW2
	LDA 0,@.BLTSH2
	STA 0,@.BLTDH2
	JSR BLKMVC	;//CALL MUTUAL CODE
	BLTSX		;//BLKMV EXPECTS PTR TO TWO TABLES
	BLTDX
	JMP @.EVAL

WCHWY:
	LDA 0,@.BLTSY2	;//WCHWY IS A UTIL TO SEE IF BLKMV MUST
			;//STRT AT BTM OF BLK & DOING FXUPS IF SO
	STA 0,@.SVSY2	;//SAVE Y FOR LATER COMPARE
	LDA 1,@.BLTDY2	;//SRC Y(AC0) & DES Y =--
			;//NO FIX HERE--USE BUF
	STA 1,@.SVDY2	;//SAVE Y FOR LATER COMPARE

	SLT 0,1		;//SRC Y > DES Y?( START AT TOP & ALL OK)
	JMP 0,3		;//ELSE MST ADD RECT. HGHT TO Y BE4 INDXG
	LDA 2,@.BLTDH2
	NEG 2,2		;//-1,THAT IS
	COM 2,2
	ADDZ 2,0
	STA 0,@.BLTSY2	;//DN'T BMB USER TBL--USE LCL TBL 4 INDXG
	ADDZ 2,1
	STA 1,@.BLTDY2
	JMP 0,3


SORRY:
	LDA 3,@.RETRN	;//NO INTERSECTION RETURN
	JMP 2,3

BMVCLC:
	ISZ @.CLRSW	;//ASM LANG ENTRY WHEN CLRNG OF 
			;//NON-INTRSCNG SOURCE AREA REQUESTED
BLKMVC:
	STA 3,@.RETRN	;//SAVE RETURN
	LDA 0,0,3	;//INTRSC SRC & DISP TO AVOID WRAP-AROUND
	STA 0,SRCTB	;//FRST SQUIRREL AWAY SRC AND DEST TBLS
	LDA 2,1,3
	STA 2,DESTB
	LDA 1,4,2	;//SQUIRREL AWAY MODE
	STA 1,@.BMOD2

	LDA 3,@.CLRSW	;//IF CLRNG REQUESTED--HAVE TO SAVE TBLS
	SGZ 3,3
	JMP MOVONLY
	STA 0,SRC1	;//IF CLEARING REQUIRED -- SAVE TABLES
	STA 0,SRC2
	STA 2,DES1
	STA 2,DES2
	JSRII .COPY
SRC1:	0
SRC2:	0
	BSVSX
	JMP SORRY	;//NO INTERSECT IS ERROR--SHOULDN'T HAPPEN
			;//HERE
	JSRII .COPY
DES1:	0
DES2:	0
	BSVDX
	JMP SORRY

MOVONLY:
	LDA 0,@.BLTSX2	;//NEGATIVE X'S AND/OR Y'S MEAN DELTAS
	LDA 1,@.BLTDX2	;//ON OPPOSITE RECT(SOURCE OR DEST)
	SP 1,1
	SUBZ 1,0
	STA 0,@.BLTSX2
	SP 0,0
	SUBZ 0,1
	STA 1,@.BLTDX2
	LDA 0,@.BLTSY2
	LDA 1,@.BLTDY2
	SP 1,1
	SUBZ 1,0
	STA 0,@.BLTSY2
	SP 0,0
	SUBZ 0,1
	STA 1,@.BLTDY2

	JSRII .INSEC	;//INTRSC SRC WITH DISP--HAVE TO DO TWICE
	DSPX		;//SIGH.  1ST TIME TO AVOID BMBNG USER
SRCTB:	0		;//SRC TABLE--I.E. GET INSCT BETWEEN SRC
	BLTSX		;//AND DISPLAY INTO LOCAL TABLE
	JMP SORRY	;//NO INTERSECTION?(NO MOVE)
	JSRII .INSEC	;//DO THE INTERSEC WITH DISPLAY
	DSPX
DESTB:	0		;//BLTDT SRC AND DES FOR INSC (HOPEFULLY)
			;//(WHEN CALL IS FROM SMALLTALK)
	BLTDX
	JMP SORRY	;//SIMPLY RETURN IF NO INTERSECTION
	JMP GOODSTUFF

RTBND:	0		;//ADDRESSING PROBS
.MDDM:	MDDIM
FIFTN:	17

GOODSTUFF:
	LDA 0,@.BLTSH2	;//IF DEST HGHT DIMINISHED BY INTERSECT
	LDA 1,@.BLTDH2	;//WITH DISPLAY THEN IT'S HEIGHT WINS
	SGE 1,0
	STA 1,@.BLTSH
	LDA 0,@.BLTSX	;//SAVE A RIGHT BOUND ON SRC RECT
	LDA 1,@.BLTSW
	LDA 2,@.BLTDW
	SLE 1,2		;//USE LESSER WIDTH AFTER DISP INTERSECT
	MOVZ 2,1
	STA 1,USEWID
	ADDZ 0,1
	STA 1,RTBND
	JSRII .MDDM
	STA 0,@.LSRCX	;//MOVE SRC X TO NEXT LOWER WORD BND
	LDA 1,@.BLTSX	;//IF ALREADY ON WRD BND, MASK ALL ONES
	SUBZ 0,1	;//LMSK = 16-(BITBNDX-WRDBNDX) AS ONES
	LDA 2,@.BLTDX	;//MAKE DESX RIGHT FOR SETXY
	SUBZ 1,2
	STA 2,@.LDESX

	LDA 0,FIFTN
	SUBZ 1,0
	LDA 2,.MSKS
	ADDZ 0,2
	LDA 0,0,2
	STA 0,LMSK	;//SAVE MASK

	LDA 1,FIFTN
	LDA 0,RTBND	;//RIGHT MASK IS RTBND - RTBND DRIVEN
	JSRII .MDDM	;//TO NEXT LEAST MULTIPLE OF 16
	LDA 3,RTBND	;//SHIFTED LEFT BY FIFTEEN - THAT DIFF
	SUBZ 0,3 SZR	;//UNLESS NO DIFF--THEN ALL ONES THE MASK
	NEG 3,3 SKP	;//DIFF - 1 ACTUALLY
	MOVZ 1,3 SKP
	COM 3,3
	LDA 2,.MSKS
	ADDZ 3,2
	LDA 0,0,2	;//GET MASK
			;//SHIFT IT
	SUBZ 3,1
	CYCLE 0
	STA 0,RMSK	;//SAVE IT

	LDA 0,@.LSRCX	;//MAKE BLOCK SIZE FOR BLT'ING SRC
	JSRII .MKBLK	;//TO BUFFER
	MOVZ 0,1	;//SAVE LEFTX CHANGED INTO WORDS
	LDA 0,RTBND	;//MAKE WORDS OUT OF RIGHT BOUND
	NEG 0,0		;// MINUS ONE
	COM 0,0
	JSRII .MKBLK
	SUBZ 1,0	;//DIFFERENCE PLUS ONE = BLOCKSIZE
	INC 0,0
	STA 0,BLKSZ

	JSR WCHWY	;//SEE IF WE START FROM TOP OR BOT
	LDA 3,@.BLTSY	;//GET LOCAL SRC Y RIGHT
	STA 3,@.LSRCY
	LDA 3,@.BLTDY	;//GET LOCAL DES Y RIGHT
	INC 3,3		;//NEEDS INC'NG BECAUSE SETXY LATER
			;//SUBS FULL DISPLAY WIDTH--THIS
			;//INC ACCOUNTS FOR THAT SUBTRACTION
			;//BUT THEN SEE DSZ AFTER CALL ON 
			;//SETXY IN MAIN LOOP

	STA 3,@.LDESY

	JSRII .INDEX
	LSRCX
	STA 0,SWA	;//SAVE SOURCE WORD ADDRESS




	LDA 1,@.BUF	;//CLEAR OUT BUFFER
	LDA 3,CLRBF
	NEG 3,3
	ADC 3,1
	ZER 0,0
	BLKS

	LDA 3,@.BUF	;//MAKE BUF LOOK LIKE FONT
	LDA 0,BLKSZ	;//CHR 0 PTS TO WIDTH WORD -- BLKSZ+1 AWAY
	INC 0,0
	STA 0,0,3
	MOVZ 3,2	;//SAVE PTRS TO TOP AND BOT OF BUF FOR
	INC 2,2		;//MASKING LATER
	STA 2,BFTOP
	LDA 1,BLKSZ	;//BUF BOT IS BLKSZ-1 AWAY
	NEG 1,1
	COM 1,1
	ADDZ 1,2
	STA 2,BFBOT
	ADDZ 0,3	;//CHR WIDTH IS 16--NO EXTENTION
	LDA 1,WDWRD
	STA 1,0,3
	LDA 1,BLKSZ	;//MAKE CHR HGHT BLKSZ
	STA 1,1,3

	
	LDA 0,@.BLTSH	;//MAKE HGHT COUNTER
	STA 0,HTCNT
	LDA 0,.FONT	;//SAVE FONT PTR
	STA 0,SVFONT
	LDA 0,@.BUF	;//MAKE BUF BE FONT
	STA 0,.FONT
	ONE 0,0
	STA 0,@.CTB0	;//SET UP DSPWD AS ONE
	ZER 0,0
	STA 0,@.CHR	;//CHR IS 0
	LDA 0,@.BLTMOD	;//IF IN STORE MORE MAKE A CLEARING DELTA
	SZE 0,0
	JMP MVLOP	;//OTHERWISE JUST MERGE BITS IN
	LDA 0,@.BLTSY	;//LOAD UP WITH Y'S
	MOVZ 0,2
	LDA 1,@.BLTDY
	MOVZ 1,3
	SNE 0,1 	;//IF Y'S EQUAL HAVE TO CLEAR A LINE
	JMP ONER	;//EVERY TIME THROUGH LOOP

	SLT 0,1		;//OTHERWISE GET THE DELTA
	SUBZ 1,0 SKP	;//IF SY > DY
	SUBZ 0,1 SKP	;//IF DY > SY
	MOVZ 0,1
	LDA 0,@.BLTDH	;//IF DH < DELTA THEN IT IS DELTA
	SLE 1,0
	MOVZ 0,1
SAVEM:
	STA 1,DELTA	;//SAVE DELTA
	STA 1,DELTCNT	;//INIT CNTR
	STA 1,@.BLTDH	;//DELTA IS CLEARING HEIGHT
	JMP BEGIN
ONER:
	ONE 1,1		;//EVERYTHING'S ONE IF Y'S EQUAL
	JMP SAVEM
BEGIN:
	SNE 2,3		;//Y'S = ?(CLEAR AFTER BLT INTO BUF)
	JMP MVLOP

	SLT 2,3		;//IF SY > DY THEN STARTING DY OK
	JMP FIRSTCLEAR
	SUBZ 1,3	;//OTHERWISE DY IS WHICHWAYED Y - DELTA
	STA 3,@.BLTDY
	JMP FIRSTCLEAR	;//FIRSTTIME CLEAR IF Y'S NOT EQUAL

.SVSY:	SVSY
.SVDY:	SVDY
.BLTSX:	BLTSX		;//BLT TABLES IN SREL
.BLTSW:	BLTSW
.BLTSY:	BLTSY
.BLTSH:	BLTSH
.BLTDX:	BLTDX
.BLTDW:	BLTDW
.BLTDY:	BLTDY
.BLTDH:	BLTDH
.BLTMOD: BLTMOD
.CLRSWCH: CLRSW
USEWID:	0
.LSRCX:	LSRCX
.LSRCW:	LSRCW
.LSRCY:	LSRCY
.LDESX:	LDESX
.LDESW:	LDESW
.LDESY:	LDESY
.LDESH:	LDESH
.DSPWD:	DWDTH
.STXY:	SETXY
.CLEAR:	CLEAR
.INDEX:	INDEX
.MKBLK:	MKBLK
.MDIN:	MDINC
.MSKS:	460
BLKSZ:	0		;//PLACE FOR SIZE OF CLEAR AREA
			;//IN WORDS
LMSK:	0
RMSK:	0
SWA:	0
HTCNT:	0
SVFONT:	0
.CTB0:	CTB0
.CTB2:	CTB2
.CHR:	CHR
WDWRD:	33
CLRBF:	50
BFTOP:	0
BFBOT:	0
.RETURN: BLTRTN
.BUF:	DSKBUF
.CLRM:	CLREM
.SCAN:	SCAN
DELTA:	0
DELTCNT: 0

FIRSTCLEAR:
	JSRII .CLEAR	;//CLEAR SOME DESTINATION
	BLTDX

MVLOP:
	LDA 3,BLKSZ	;//BLT SRC SCANLINE INTO BUFFER
	NEG 3,3		;//NEG CNT IN AC3
	LDA 1,BFTOP	;//DWA = BFTOP + (BLKSZ-1)
	ADC 3,1
	LDA 0,SWA	;//SWA -1
	NEG 0,0
	COM 0,0
	BLT

	LDA 0,@.BLTMOD	;//IF NOT CLEARING JUST KEEP MERGING
	SZE 0,0
	JMP NOCLR
	DSZ DELTCNT	;//IF WE'VE FINISHED WITH A GLOMP DO
	JMP NOCLR	;//SOME MORE CLEARING

	LDA 1,@.SVSY	;//IF Y'S EQUAL CLEAR NOW
	LDA 3,@.SVDY
	SEQ 1,3
	JMP NOTEQ	;//OTHERWISE CLEAR AFTER UPDATE
	JSRII .CLEAR
	BLTDX
	LDA 1,@.SVSY	;//GET Y'S BACK
	LDA 3,@.SVDY

NOTEQ:
	LDA 0,DELTA	;//IF DELTA > HTCNT THEN HTCNT IS LAST ONE
	LDA 2,HTCNT
	SGT 2,0
	MOVZ 2,0
	STA 0,@.BLTDH	;//DELTA OR HTCNT IS HEIGHT TO CLEAR
	STA 0,DELTCNT	;//AND NEW DELTCNT
	LDA 2,@.BLTDY	;//FIX Y
	SGE 1,3		;//IF SY >= DY THEN ADD DELTA
	SKIP		;//OTHERWISE SUB HTCNT
	LDA 0,DELTA	;//TALKING ABOUT WHAT TO DO WITH DY,I.E.
			;//WOULDN'T IT BE NICE TO BE ABLE TO
			;//COMMENT WITH A PICTURE
	SLT 1,3
	ADDZ 0,2 SKP	;//SY > DY THEN ADD
	SUBZ 0,2	;//OTHERWISE SUB
	STA 2,@.BLTDY
	SNE 1,3		;//IF Y'S EQUAL CLEAR AFTER BLT
	JMP NOCLR
	JSRII .CLEAR	;//OTHERWISE CLEAR NOW
	BLTDX

NOCLR:
	LDA 1,@BFTOP
	LDA 0,LMSK	;//CLEAN UP ENDS OF SRC IN BUF
	ANDZ 0,1
	STA 1,@BFTOP
	LDA 1,@BFBOT
	LDA 0,RMSK
	ANDZ 0,1
	STA 1,@BFBOT

	JSRII .STXY
	LDESX
	DSZ @.CTB2	;//BECAUSE FIRST THING CONVERT DOES IS
			;//ADD IN DISP WIDTH -- ONE FOR BLKMV --
			;//AND SETXY SO THAT IT WORKS FOR MOST
			;//SCAN CONVERSION CALLS ALWAYS SUBS
			;//ACTUAL DISPLAY WIDTH. HENCE LDESY
			;//WAS INC'D ABOVE AND THIS DSZ DOES
			;//WHAT SETXY WOULD HAVE DONE WITH A
			;//DISPLAY WIDTH OF ONE, ETC., ETC.
	LDA 0,@.LDESX	;//IF DESX IS MINUS NEED ANOTHER DEC
	SP 0,0		;//OF DWA
	DSZ @.CTB2


	JSRII .SCAN	;//SCAN IN SRC

	LDA 2,@.DSPWD
	LDA 0,SWA	;//ADD OR SUB DSP WDTH TO GT NXT SCNLN
	LDA 1,@.SVSY	;//SRCY > DESY ?(GO FRM TOP)GO FRM BTM)
	LDA 3,@.SVDY
	SGE 1,3
	SUBZ 2,0 SKP
	ADDZ 2,0
	STA 0,SWA

	SGE 1,3		;//FIX Y'S FOR DEST
	JMP DECIT
	ISZ @.LDESY	;//FIX UP DES Y FOR SETXY
	JMP ENDMV
DECIT:
	DSZ @.LDESY
	NOP

ENDMV:
	DSZ HTCNT	;//DONE?
	JMP MVLOP	;//TO CHECK ABOUT DEST CLEARING
			;//TO CHECK FOR CLEAR REMAINDER CALL


CLRREM:
	LDA 0,@.CLRSWCH	;//CHCK FOR CLRNG NON-INTRSCTNG SRC AREA
	SGZ 0,0
	JMP DONE
	JSRII .CLRM
	BSVSX		;//CLREM RTN FGRS OUT WHAT NDS TO BE CLRD
	BSVDX		;//& DOES IT--NDS PTRS TO SRC AND DES TBL
	ZER 0,0
	STA 0,@.CLRSWCH	;//REFRESH SWITCH

DONE:
	LDA 0,SVFONT	;//REFRESH FONT
	STA 0,.FONT
	LDA 0,@.DSPWD	;//REFRESH SCAN'S NOTION OF DISP WIDTH
	STA 0,@.CTB0
	LDA 3,@.RETURN
	JMP 2,3

.END
