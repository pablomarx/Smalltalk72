;!!!!FILE MAINTENANCE --  ATRAPS.SR

;!!!!CONVERTED TO COMPATIBILITY WITH ALTO ASSEMBLER--LOADER BY
;!!!!D. MERRY AND FRIENDS CIRCA 8/75

	.TITL	ATRAPS


.GETNOLIST "SMALL.OPS"
.GETNOLIST "ASMALL.PARMS"
.GETNOLIST "SMALL.SYMS"
.GETNOLIST "PAGE1.PARMS"
.GETNOLIST "ANIM.OPS"
.GETNOLIST "ANIM.PARMS"
.GETNOLIST "ANIM.SYMS"

.SREL

NOPAR:	NOPARC			;!!!!ENTRIES
VECTOR:	VECTORC


NPTA:	NPT			;!!!!LOCAL SRELS
PTA:	PT
MONEA:	MONE
VTA:	VT
OTA:	OT



FIXTRAPSTABS:	FIXTRAPSTABSC	;!!!!NREL ADDRESS TABLES BUILT
				;!!!!CALLED AT DINIT IN ADISP.SR


	.NREL

	.RDX	8


;	.ENT	NOPAR,VECTOR
;	.EXTN	DIR,EIR,BRI,BLT,BLKS,TRAPPC,PCLOC,CYCLE

	.BLK	10


MULTIPLY:
	LDA	2,SAV2
	LDA	3,.CC20
.CB99:
	MOVR	1,1,SNC
	MOVR	0,0,SKP
	ADDZR	2,0
	INC	3,3,SZR
	JMP	.CB99
	MOVCR	1,1
RETRAP:
	LDA	3,SAVC
	MOVR	3,3
	LDA	3,SAV3
	BRI				;RETURN

.CC20:	-20

DIVIDE:
	LDA	2,SAV2
	SUBZ#	2,0,SZC
	JMP	.CC99
	LDA	3,.CC20
	MOVZL	1,1
.CC98:
	MOVL	0,0
	SUB#	2,0,SZC
	SUB	2,0
	MOVL	1,1
	INC	3,3,SZR
	JMP	.CC98
	ISZ	@.PCLOC			;SKIP RETURN
.CC99:
	JMP	RETRAP

	.BLK	10




NOPARC:
	DIR
	STA	3,SAV3
	STA	2,SAV2
	SUBCL	3,3
	STA	3,SAVC
	LDA	3,@.ATRAP	;!!!!CHANGED TO ATRAP TO
				;!!!!DISTINGUISH FROM PAGE0 LABEL
	STA	3,@.PCLOC
	LDA	3,-1,3
	LDA	2,K377
	AND	3,2
	LDA	3,NPMAX
	IFG	2,3
TNULL:				;!!!!CHANGED TO TNULL--ST OWNS NULL
	BRI			;RETURN AND ENABLE INTERRUPTS
	LDA	3,@NPTAB	;!!!!GO THRU SREL
	ADD	2,3
	JMP	@0,3

NPTAB:	NPTA			;!!!!GO THRU SREL
NPMAX:	21
K377:	377
.PCLOC:	PCLOC			;SAVED PC ON INTERRUPT
				;(USED FOR BRI)


BOX:	.-.
INHIB:	.-.
;		POSIT
WIDE:	.-.
HDR:	.-.
PTTR:	.-.
SH0:	-10
SH1:	0
SH2:	-14
SH3:	-4
K17:	17
;D4:	4			!!!!PAGE ZERO CONSTANT

PASTE:
	STA	0,BOX
	STA	1,INHIB
	LDA	1,D4
	ADD	1,0
	STA	0,PTTR
	LDA	0,SAV3
	SUB	1,0
	STA	0,WIDE
PLOOP:
	LDA	0,@BOX
	ISZ	BOX
	STA	0,HDR
	JSR	SBR
AC3MIN:
	JSR	SBR
	JSR	SBR
	JSR	SBR
	LDA	1,INHIB
	IFZ	1,1
	JMP	QUIT
	LDA	0,POSIT
	LDA	1,WIDE
	ADD	1,0
	STA	0,POSIT
	JMP	PLOOP

QUIT:
	LDA	3,SAV3
	BRI

SHIFT	=SH0-AC3MIN

SBR:
	LDA	0,HDR
	LDA	1,SHIFT,VIA3
	CYCLE 0
	LDA	1,K17
	AND	1,0
	LDA	2,@APTAB	;!!!!HAVE TO GO THRU SREL
	ADD	0,2
	JMP	@0,2

APTAB:	PTA			;!!!!HAVE TO GO THRU SREL

	.BLK	10

 .ATRAP:	TRAPPC
SAV0:	.-.
SAV1:	.-.
POSIT:
WID:
SAV2:	.-.
SAV3:	.-.
SAVC:	.-.
SAVPC:	.-.

T1:	LDA	0,GREY1
	JMP	STORE
T2:	LDA	0,GREY2
	JMP	STORE
T3:	LDA	0,GREY3
	JMP	STORE
T4:	LDA	0,GREY4
	JMP	STORE
T5:	LDA	0,GREY5
	JMP	STORE
T6:	LDA	0,GREY6
	JMP	STORE
T7:	LDA	0,GREY7
	JMP	STORE
T8:	LDA	0,GREY8
	JMP	STORE
T9:	LDA	0,GREY8
	JMP	STORE
T10:	LDA	0,GREY8
	JMP	STORE

T11:	LDA	1,INHIB
	MOVZL	1,1
	JMP	INH

T12:	LDA	0,@PTTR
INCPTR:	ISZ	PTTR
STORE:	LDA	1,INHIB
	MOVZL	1,1,SZC
	STA	0,	@POSIT
INH:	STA	1,INHIB
	ISZ	POSIT
	JMP	0,3

T13:	LDA	0,@POSIT
	LDA	1,@PTTR
	AND	1,0
	JMP	INCPTR

T15:	LDA	0,@POSIT
	LDA	1,@PTTR
	ISZ	PTTR
	AND	1,0,SKP
T14:	LDA	0,@POSIT
	LDA	1,@PTTR
	COM	1,1
	AND	1,0
	ADC	1,0
	JMP	INCPTR

GREY1:	-1
GREY2:	0
GREY3:	122645
GREY4:	122645
GREY5:	122645
GREY6:	122645
GREY7:	122645
GREY8:	122645


FROM:	.-.
INTO:	.-.
;		WID
CTR:	.-.
TOCTR:	.-.
MASK:	.-.
MPTR:	.-.
MPTR0:	MONEA			;!!!!HAVE TO GO THRU SREL

MONE:
	7400
	360
	17
MINIT:
	170000
	4
	10
	14
	0



ATRANS:				;!!!!MADE 'A'TRANS -- TRANS AN
				;!!!!EQUALITY IN ANIM.OPS
	STA	1,INTO
	LDA	1,WID
	STA	1,CTR
	MOV	0,3
MAIN:
	LDA	0,D4
	ADD	0,3
	STA	0,TOCTR
	LDA	2,@MPTR0	;!!!!THRU SREL
	STA	2,MPTR
	LDA	2,MINIT
TLOOP:
	ZERO	0,0
	LDA	1,-4,3
	AND	2,1
	ADD	1,0
	LCYL+4
	LDA	1,-3,3
	AND	2,1
	ADD	1,0
	LCYL+4
	LDA	1,-2,3
	AND	2,1
	ADD	1,0
	LCYL+4
	LDA	1,-1,3
	AND	2,1
	ADD	1,0
	LDA	2,MPTR
	ISZ	MPTR
	LDA	1,4,2
	LDA	2,0,2
	CYCLE 0
	STA	0,@INTO
	LDA	0,INTO
	LDA	1,WID
	ADD	1,0
	STA	0,INTO
	DSZ	TOCTR
	JMP	TLOOP
	LDA	1,WID
	ADDZL	1,1
	LDA	0,INTO
	SUB	1,0
	INC	0,0
	STA	0,INTO
	DSZ	CTR
	JMP	MAIN
	ZERO	3,3
	BRI		;RETURN


	.BLK	14


K15:	15
K2:	2
K160:	160

VECTORC:
	DIR
	STA	3,SV3
	STA	1,SV1
	LDA	3,@.TRP
	STA	3,@.PCLC
	LDA	3,-1,3
	LDA	1,K2
	AND	3,1
	STA	1,LONGFLAG		;TO HELP OP=0 DECIDE
					;WHAT TO DO
	AND	3,1,SZR
	JMP	DETAIL
	LDA	1,SV1
	IFODD	3,3
	JMP	AVORK			;!!!!MADE 'A'VORK
					;!!!!EQUALITY IN ANIM.OPS
	JMP	SBLK
DETAIL:
	LDA	1,K15
	AND	1,3
	LDA	1,@VTAB			;!!!!THRU SREL
	ADD	1,3
	LDA	1,2,3
	STA	1,INC2
	LDA	1,0,3
	STA	1,INC3
	LDA	1,22,3
	ADD	1,2
	STA	1,ADJ2
	LDA	3,20,3
	LDA	1,ARGV
	STA	1,ARGSW
	LDA	1,RESTV
	JMP	0,3
AVORK:					;!!!!MADE 'A'VORK
					;!!!!EQUALITY IN ANIM.OPS

	LDA	1,KINC2
	STA	1,INC2
	LDA	1,RESTK
	LDA	3,ARGK
	STA	3,ARGSW
	JMP	VOP
IBLK:
	LDA	1,BLTOP
	JMP	OPSTO

KINC2:		ADD	1,2		;EXECUTED AT REST0
RESTK:		JMP	.+1		;EXECUTED AT REST0
RESTV:		MOV	3,0		;EXECUTED AT REST0
BLTOP:		MOV	0,1		;EXECUTED AT OPSW
ARGV:		JMP	LOOPV-ARGSW,1	;EXECUTED AT ARGSW
ARGK:		JMP	LOOPK-ARGSW,1	;EXECUTED AT ARGSW
LONGFLAG:	.-.
VTAB:	VTA			;!!!!THRU SREL
;OPTAB:	OT*2		;!!!!WHAT WAS HERE--DO A MOVZL WHEN
			;!!!!ADDRESS IS GOTTEN INSTEAD BECAUSE
OPTAB:	OTA		;!!!!WE HAVE TO GO THRU SREL

DBLOP:	JMP	VOP

VOP:
	STA	1,REST0
	LDA	3,@.TRP
	LDA	3,-1,3
	LDA	1,K160
	ANDZR	1,3
	MOVZR	3,3
	MOVZR	3,3
	LDA	1,@OPTAB	;!!!!HAVE TO GO THRU SREL
	MOVZL	1,1		;!!!!OPTAB HAD OT*2 IN SO
				;!!!!PRESUME TRYING TO GUARANTEE
				;!!!!EVEN WORD BOUNDARY -- HOPE
				;!!!!THIS WILL DO IT
	ADDZR	1,3
	LDA	1,0,3
OPSTO:
	STA	1,OPSW
	MOV	0,3
	JMP	ARGSW

LOOPV:	LDA	0,0,3
LOOPK:	LDA	1,0,2
OPSW:	AND	0,1		;MODIFIABLE
	STA	1,0,2
	LDA	1,SV3	
INC2:	ADD	1,2		;MODIFIABLE
INC3:	ADD	1,3		;MODIFIABLE
	DSZ	SV1
ARGSW:	JMP	LOOPV		;MODIFIABLE
REST0:	MOV	3,0		;MODIFIABLE
VRET:	LDA	3,SV3
	LDA	1,ADJ2
	SUB	1,2
	ZERO	1,1
	BRI		;RETURN

ADJ2:	.-.

DBL:	LDA	1,LONGFLAG
	IFZ	1,1
	JMP	SIMPLE
	MOV	0,1
	LDA	0,1,3
	STA	0,1,2
	JMP	OPSW+1

SIMPLE:
	MOV	0,1		;FOR VSINC, ETC.
	JMP	OPSW+1

OR:	COM	0,0
	AND	0,1
	ADC	0,1
	COM	0,0
	JMP	OPSW+1

XOR:	STA	0,SV0
	ANDZL	1,0
	SUB	0,1
	LDA	0,SV0
	AND	0,1
	JMP	OPSW+1

SUB2:	SUB	0,1
	NEG	1,1
	JMP	OPSW+1

CKS:	JMP	VRET	;NOT MPLEMENTED YET

	.BLK	14

.PCLC:	PCLOC
.TRP:	TRAPPC
SV0:	.-.
SV1:	.-.
SV2:	.-.
SV3:	.-.
SVC:	.-.

 SBLK:
	NEG	1,3
	ADD	1,2
	MOV	2,1
	BLKS
	ZERO	1,1
	JMP	VRET

TBLK:
	LDA	1,SV1
	NEG	1,3
	ADD	1,2
	ADD	0,1
	STA	1,SV0
	MOV	2,1
	NEG	0,0
	COM	0,0
	BLT
	LDA	0,SV0
	ZERO	1,1
	JMP	VRET

	.BLK	10

		;*** HERE ARE THE TABLES FOR EVERYBODY
		;*** THEY HAVE NO 8-BIT CONSTRAINTS LIKE CODE DOES

;!!!!SEE BELOW FOR WHAT WAS HERE -- JAM IN THE ADDRESSES WITH
;!!!!FIRST TIME KLUDGE
NPT:
NPTNULL1:	0		;!!!!TNULL-----NULL CHANGED TO
				;!!!!TNULL--ST OWNS NULL
NPTNULL2:	0		;!!!!TNULL
NPTNULL3:	0		;!!!!TNULL
NPTNULL4:	0		;!!!!TNULL
NPTNULL5:	0		;!!!!TNULL
NPTNULL6:	0		;!!!!TNULL
NPTNULL7:	0		;!!!!TNULL
NPTNULL8:	0		;!!!!TNULL

NPTNULL9:	0		;!!!!TNULL
NPTNULL10:	0		;!!!!TNULL
NPTNULL11:	0		;!!!!TNULL
NPTMUL1:	0		;!!!!MULTIPLY
NPTDIV1:	0		;!!!!DIVIDE
NPTNULL12:	0		;!!!!TNULL
NPTATRANS:	0		;!!!!ATRANS
NPTPASTE:	0		;!!!!PASTE
NPTMUL2:	0		;!!!!MULTIPLY
NPTDIV2:	0		;!!!!DIVIDE

PT:
PT1T11:	0		;!!!!T11
PTT1:	0		;!!!!T1
PTT2:	0		;!!!!T2
PTT3:	0		;!!!!T3
PTT4:	0		;!!!!T4
PTT5:	0		;!!!!T5
PTT6:	0		;!!!!T6
PT1T7:	0		;!!!!T7
PT2T7:	0		;!!!!T7
PT3T7:	0		;!!!!T7
PT4T7:	0		;!!!!T7
PT2T11:	0		;!!!!T11
PTT12:	0		;!!!!T12
PTT13:	0		;!!!!T13
PTT14:	0		;!!!!T14
PTT15:	0		;!!!!T15


	;!!!!WHAT WAS HERE--ADDRESSES JAMMED IN WITH FIRST TIME
	;!!!!KLUDGE
;NPT:	TNULL		;!!!!NULL CHANGED TO TNULL--ST OWNS NULL
;	TNULL
;	TNULL
;	TNULL
;	TNULL
;	TNULL
;	TNULL
;	TNULL

;	TNULL
;	TNULL
;	TNULL
;	MULTIPLY
;	DIVIDE
;	TNULL
;	ATRANS
;	PASTE
;	MULTIPLY
;	DIVIDE

;PT:	T11
;	T1
;	T2
;	T3
;	T4
;	T5
;	T6
;	T7
;	T7
;	T7
;	T7
;	T11
;	T12
;	T13
;	T14
;	T15

OT:
	JMP	DBL-OPSW,1
	JMP	OR-OPSW,1
	AND	0,1
	JMP	XOR-OPSW,1
	ADD	0,1
	SUB	0,1
	JMP	SUB2-OPSW,1
	JMP	CKS-OPSW,1

VT:
	INC	3,3
	ADD	1,3
	INC	2,2
	INC	2,2
	INC	3,3
	ADD	1,3
	ADD	1,2
	ADD	1,2
	INC	1,3
	ADD	1,3
	ADD	1,2
	ADD	1,2
	INC	3,3
	ADD	1,3
	ADD	1,2
	ADD	1,2


;!!!!MORE ADDRESS STUFFING -- WHAT WAS HERE COMMENTED OUT
;	TBLK
;	IBLK
;	0
;	1
;	IBLK
;	IBLK
;	0
;	0
;	VOP
;	VOP
;	0
;	0
;	DBLOP
;	DBLOP
;	0
;	0

VTTBLK:		0		;!!!!TBLK
VTIBLK1:		0		;!!!!IBLK
		0
		1
VTIBLK2:		0		;!!!!IBLK
VTIBLK3:		0		;!!!!IBLK
		0
		0
VTVOP1:		0		;!!!!VOP
VTVOP2:		0		;!!!!VOP
		0
		0
VTDBLOP1:	0		;!!!!DBLOP
VTDBLOP2:	0		;!!!!DBLOP
		0
		0




;!!!!SUBR FOR BUILDING SOME TABLES THAT CONTAIN PRTRS TO NREL

BLDRET:	0
TEMP0:	0

FIXTRAPSTABSC:
	STA 3,BLDRET		;!!!!SAVE RETURN
	STA 0,TEMP0		;!!!!SAVE ACO -- PNT USES
	JSR @.PNT		;!!!!DO MANY PNTS
	TNULL-.
	STA 0,NPTNULL1
	STA 0,NPTNULL2
	STA 0,NPTNULL3
	STA 0,NPTNULL4
	STA 0,NPTNULL5
	STA 0,NPTNULL6
	STA 0,NPTNULL7
	STA 0,NPTNULL8
	STA 0,NPTNULL9
	STA 0,NPTNULL10
	STA 0,NPTNULL11
	STA 0,NPTNULL12
	JSR @.PNT
	MULTIPLY-.
	STA 0,NPTMUL1
	STA 0,NPTMUL2
	JSR @.PNT
	DIVIDE-.
	STA 0,NPTDIV1
	STA 0,NPTDIV2
	JSR @.PNT
	ATRANS-.
	STA 0,NPTATRANS
	JSR @.PNT
	PASTE-.
	STA 0,NPTPASTE		;!!!!THAT TAKES CARE OF NPT
				;!!!!NOW FOR PT

	JSR @.PNT
	T11-.
	STA 0,PT1T11
	STA 0,PT2T11
	JSR @.PNT
	T1-.
	STA 0,PTT1
	JSR @.PNT
	T2-.
	STA 0,PTT2
	JSR @.PNT
	T3-.
	STA 0,PTT3
	JSR @.PNT
	T4-.
	STA 0,PTT4
	JSR @.PNT
	T5-.
	STA 0,PTT5
	JSR @.PNT
	T6-.
	STA 0,PTT6
	JSR @.PNT
	T7-.
	STA 0,PT1T7
	STA 0,PT2T7
	STA 0,PT3T7
	STA 0,PT4T7
	JSR @.PNT
	T12-.
	STA 0,PTT12
	JSR @.PNT
	T13-.
	STA 0,PTT13
	JSR @.PNT
	T14-.
	STA 0,PTT14
	JSR @.PNT
	T15-.
	STA 0,PTT15		;!!!!AND THAT'S ALL FOR PT
				;!!!!AND FINALLY VT
	JSR @.PNT
	TBLK-.
	STA 0,VTTBLK
	JSR @.PNT
	IBLK-.
	STA 0,VTIBLK1
	STA 0,VTIBLK2
	STA 0,VTIBLK3
	JSR @.PNT
	VOP-.
	STA 0,VTVOP1
	STA 0,VTVOP2
	JSR @.PNT
	DBLOP-.
	STA 0,VTDBLOP1
	STA 0,VTDBLOP2		;!!!!WHEW

	LDA 0,TEMP0		;!!!!RESTORE AC0
	JMP @BLDRET		;!!!!AND RETURN


	.END
	
