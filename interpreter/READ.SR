;
;	SMALLTALK READ-SCANNER
	.TITL	RDSCAN
	.GETNOLIST	"SMALL.OPS"
	.GETNOLIST	"SMALL.SYMS"
	.GETNOLIST	"SMALL.PARMS"
	.BEXT	GFCH	;IN SMFCODE.SR
;	***NOTE ALL STATICS IN THIS MODULE MUST BE REFERRED TO 
;	IN PAGE1.SR, SO THAT THEY CAN BE RELOCATED WHEN READ.SR
;	GETS MOVED***
	.SREL
RDSCAN:	RDSCC
MKATOM:	MKATC
SEQNC:	SEQCOD
SVALO:	SVALOC
;
SQNX:	SQNXS
SSTB:	SSTBC
ARGS:	SOURCE
ISTRG:	IST1
FIRSTOFREAD:	SIZEC
	.NREL
SIZEC:	LASTOFCODE-.
	-1
;
;to tablscan mask : source type seq isfil nxtchr ( 
;    %next?
;      (CODE 14 next.
;       'CODE 14 is equivalent to...
;       :mask=0?("t_string 1. t[1]_nxtchr.
;		"nxtchr_source next. !atom t)
;       seq reset.
;       repeat
;        (0 = mask &* type[nxtchr + 1]?(done).
;         seq _ nxtchr.
;         "nxtchr _ source next)
;       !seq contents')
;    %skip?("nxtchr _ source next)
;    %read?(repeat
;        (rdtb[nxtchr + 1] eval))
;    isnew?
;      (:source.
;       :type.
;       "seq _ stream.
;       (source is file?("isfil _ 1))
;       SELF skip))
;
;
;	/* AND HERE IS CODE 14 */
RDSCC:	JSR	@.FECH	; :mask.
	JSR	@.IVAL
	STA	0,MASK
	LDA	1,C5	;LOAD UP THE 4  INSTANCE VARS
	STA	1,CNT
	LDA	0,@.ARGS
	STA	0,APT
	LDAF	INST
	INC	0,1
LILP:	LOAD
	STA	0,@APT
	ISZ	APT
	INC	1,1
	DSZ	CNT
	JMP	LILP
	LDAF	PC
	STA	0,TPC	;SAVE PC FOR LOOPING
	LDA	0,CTYP
	STA	0,CTBS
	ZER	0,0	; seq reset.
	LDA	2,SEQU
	JSR	@.SNST
	1
	LDA	0,NXTCH
	JSR	@.IVAL	;AND NXTCH
	STA	0,NXTCH
	LDA	1,MASK
	SNZ	1,1
	 JMP	PUTIT	;MASK=0 ? (MAKE 1-CHAR STRING)
;
NEXLP:	STA	0,NXTCH
	INC	0,0
	STA	0,CTBI
	JSR	@.GTB	; ctyp[nxtchr+1]
CTBI:	.-.
CTBS:	.-.
	LDA	1,MASK
	AND	0,1,SNR
	 JMP	DONE	; 0=mask &* ctyp[nxtchr+1]?
PUTIT:	LDA	1,SEQU
	LDA	0,NXTCH
	ONE	2,2
	JSR	SEQPB	; seq_cchar
	LDA	0,ISFIL	;CHECK SOURCE TYPE
	SNN	0,0
	 JMP	SRCNX
;
FFN:	LDA	2,SOURCE
	JSRII	.FINXT	;FAST <file> next
	JMP	NEXLP
.FINXT:	GFCH
;
SRCNX:	LDA	0,TPC	;GENERAL source next
	STAF	PC	;(RESET PC FOR LOOPING)
	LDA	0,SOURCE
	JSRII	.SCALL
SRCN1:	JSR	@.IVAL
	JMP	NEXLP
;
DONE:	LDA	0,NXTCH
	JSR	@.SINS	;UPDATE nxtchr
	1+NXTCH-SOURCE
	LDA	0,SEQU
	ONE	2,2
	JSR	SEQCT	; !seq contents
	LDA	1,MASK
	SNZ	1,1
	 JMP	CATOM
	JSR	@.SVLI
	JMP	@.ERET
;
CATOM:	STA	0,CSTR	;MASK=0 ? (MAKE UP 1-CHAR ATOM AS VALUE)
	JSRII	.MKATM
	JSR	@.SVLI
	LDA	0,CSTR
	JSR	@.REFD
	JMP	@.ERET
CSTR:	0
.MKATM:	MKATOM
;
APT:	0
CNT:	0
.ARGS:	ARGS
SOURCE:	0	;*CONTIGUOUS!
CTYP:	0	;*
SEQU:	0	;*
ISFIL:	0	;*
NXTCH:	0	;*
MASK:	0
TPC:	0
.SCALL:	STCALL
;
PTER:	JSR	@.QERR
	.TXT	"end of stream."
;
;	/* SEQUENCE PUT BYTE */
SEQPB:	STA	3,SEQX
	STA	0,BYTE	;AC0 = PUTEE
	STA	1,SSEQ	;AC1 = SEQUENCE
	STA	2,SORV	;AC2 = 1=STRING, 2=VECTOR
	INC	1,1
	STA	1,.PTR
	LOAD		;GET PTR
	STA	0,PTR
	INC	1,1
	LOAD		;GET STRING
	STA	0,STR
	INC	0,1
	LOAD		;GET LENGTH
	STA	0,LEN
	LDA	0,PTR
	JSR	@.IVAL
	INC	0,0
	STA	0,PTR
	LDA	1,LEN
	SGT	0,1
	 JMP	SEQ1
	LDA	0,STR
	LDA	2,SORV
	JSR	GROW	;STRETCH IT
	STA	0,STR
	LDA	1,SSEQ
	INC	1,1
	INC	1,1
	JSR	@.STREF	;UPDATE STR
	LDA	2,SSEQ
	LDA	0,LEN
	MOVZL	0,1
	ADDZR	1,0
	JSR	@.SNST	;AND MAXLEN
	3
	LDA	0,PTR
SEQ1:	LDA	2,SSEQ
	JSR	@.SNST	;UPDATE PTR
	1
	LDA	0,BYTE
	LDA	1,SORV
	SOD	1,1
	 JMP	VSEQ
	JSR	@.PTB
PTR:	.-.
STR:	.-.
	JMP	@SEQX
;
VSEQ:	LDA	1,STR
	LDA	2,PTR
	ADD	2,1
	INC	1,1
	JSR	@.STREF
	JSR	@.REFI
	JMP	@SEQX
SEQX:	0
LEN:	0
BYTE:	0
SSEQ:	0
.PTR:	0
;
;	/* SEQUENCE CONTENTS */
SEQCT:	STA	3,SEQX	;AC0 _ (ACO=SEQ) CONTENTS
	STA	2,SORV	;AC2 = 1/0 FOR STRING/VECTOR
	INC	0,1
	LOAD
	STA	0,PTR
	INC	1,1
	LOAD
	STA	0,ST1
	LDA	0,PTR
	JSR	@.IVAL
	STA	0,UB1
	STA	0,UB2
	LDA	2,SORV
	JSR	SVALOC	;ALLOCATE STR/VEC[1 TO PTR]
	STA	0,ST2
	LDA	0,@.SSTB
	STA	0,.+2
	JSR	@.SSCAN
	.-.
	NOP
	JMP	@SEQX
;
;	/* GROW A STRING */
GROW:	STA	3,GROX	;AC0 _ (STR/VEC=AC0)[1 TO 3*AC1/2]
	STA	0,ST1
	STA	1,UB1
	MOVZL	1,0
	ADDZR	1,0
	STA	0,UB2
	JSR	SVALOC	;ALLOCATE STR/VEC
	STA	0,ST2
	LDA	0,@.SSTB
	STA	0,.+2
	JSR	@.SSCAN
	.-.
	NOP	;SHOULD BE SKIPPED
	JMP	@GROX
GROX:	0
;
SEQLA:	JSR	@.FECH	;PICK UP THE BYTE
	JSR	SQSET
	 JSR	SEQLA1	;FURTHER CHECKS FOR STRING ARG
	LDA	0,VALUE	;!! SEQLA1 MAY SKIP-RET AROUND THIS !!
	LDA	1,SEQT
	JSR	SEQPB	;DOIT
	JMP	@.ERET
;
PUTTER:	LDA	1,SEQT	;AC0=BYTE, AC2=SORV
	LDA	2,SORV
	JMP	SEQPB	;WILL RETURN FROM THERE
;
.SSTB:	SSTB
SSTBC:		;TABLE FOR SSCAN
SORV:	.-.
	6
	0
ST1:	.-.
LB1:	1
UB1:	.-.
ST2:	.-.
LB2:	1
UB2:	.-.
;
SEQCNT:	JSR	@.AMPC
	JSR	SQSET
	NOP
	LDA	0,SEQT	;PICK UP THE INSTANCE
	JSR	SEQCT
	JSR	@.SVLI	;RETURN ITS CONTENTS
	JMP	@.ARET
;
;	/* SEQUENCE CODE */ - HANDLE next and _string LATER
SEQCOD:	LDA	0,.QLARO
	JSR	@.PEEK
	 JMP	SEQLA	;% _ ? (SEQLA)
	LDA	1,.QCONT
	SNE	0,1
	 JMP	SEQCNT	;% contents ? (SEQCNT)
	LDA	1,.QNEXT
	SNE	0,1
	 JMP	SQNXT
	JMP	@.EVAL
.QCONT:	QCONT
.QNEXT:	QNEXT
SEQT:	0
;
SQSET:	STA	3,SQSX	;SEQ SETUP
	LDAF	INST
	STA	0,SEQT	;PUTS INST INTO SEQT
	LDA	1,C2
	ADD	0,1
	LOAD		;PUTS BUFFER IN AC0
	JSR	@.ISIT
	LSCLA
	 ONE	2,2,SKP	;SETS AC2= 1/STR  2/VEC
	LDA	2,C2
	SOD	2,2
	ISZ	SQSX	;AND SKIP-RET IF VEC
	JMP	@SQSX
SQSX:	0
;
;	/* ALLOCATE A STRING */
SVALOC:	STA	3,ALSX	;AC0 _ STRING/VECTOR AC0
	STA	2,SORV	;AC2= 1 FOR STRING, 2 FOR VECTOR
	STA	0,SLEN
	SOD	2,2
	 JMP	NOTSTR
	INCZR	0,0	;STRING LEN+1/2
	LDA	1,SCLAS
	SKIP
NOTSTR:	LDA	1,LSCLA
	INC	0,0
	INC	0,0	;SIZE=2+LEN
	JSRII	.MAKI	;ALLOCATE AND INSTALL CLASS
	STA	0,SADDR
	INC	0,1
	LDA	0,SLEN
	STOR		;INSTALL LENGTH
	LDA	0,SADDR
	JMP	@ALSX	;RETURN NEW STRING
ALSX:	0
SLEN:	0
SADDR:	0
.MAKI:	MKINS
;
SEQLA1:	STA	3,SQL1X
	STA	2,SORV
	LDA	0,VALUE	;GET ARG
	JSR	@.ISIT
	SCLAS
	 JMP	PUTC	;JUST A CHAR
	STA	0,IST1
	INC	0,1
	LOAD
	STA	0,IUB1	;STRING - SET UP SMF
	JSR	@.PNT
	PUTTER-.
	LDA	1,@.IST1
	JSR	@.SMF	;THE SLOW AND EASY WAY
	1
	SKIP
	JSR	@.ERR
	JMP	@.ERET
;
PUTC:	JSR	@.IVAL
	LDA	2,SORV
	ISZ	SQL1X	;SKIP-RETN OF SEQLA1
	JMP	@SQL1X
SQL1X:	0
;
;	/* SEQ NEXT
SQNXT:	JSR	@.AMPC
	LDAF	INST
	MOV	0,2
	JSR	SQNXS	;JUST CALLS THE SUBR BELOW
	JSR	@.SVAL
	JMP	@.ARET
;
SQNXS:	STA	3,SQNXX	;SUBR AC0 _ <AC2=SEQ>.NEXT
	JSR	@.LNST
	1
	STA	0,NXIX
	JSR	@.LNST
	3
	LDA	1,NXIX
	SLT	1,0	;TEST END STREAM
	 JMP	ENDSQ
	INC	1,0
	STA	0,NXIX
	JSR	@.SNST	;STEP THE POINTER
	1
	LDA	1,C2
	ADD	2,1
	LOAD		;GET BUFFER
	JSR	@.ISIT
	LSCLA
	 JMP	NXSTR
	LDA	1,NXIX
	ADD	0,1
	INC	1,1
	LOAD		;GET NEXT WORD
	JMP	@SQNXX
;
NXSTR:	STA	0,NXBUF
	JSR	@.GTB	;OR BYTE AS THE CASE MAY BE
NXIX:	.-.
NXBUF:	.-.
RIVAL:	JSR	@.INTN
	JMP	@SQNXX
;
ENDSQ:	LDA	1,C2
	ADD	2,1
	LOAD
	JSR	@.ISIT
	LSCLA
	 JMP	RET0
	NIL	0,0	;RETURN NIL
	JMP	@SQNXX
RET0:	ZER	0,0	;OR ZERO
	JMP	RIVAL
SQNXX:	0
;
.IST1:	ISTRG
IST1:	0	;DESCRIPTOR FOR SMF
ILB1:	1
IUB1:	.-.
;
;	/* HASHING DONE HERE */
HASH:	STA	3,HASHX
	JSR	HINIT
	JSR	@.PNT
	HASHER-.
	LDA	1,@.IST1
	JSR	@.SMF
	1
	SKIP
	JSR	@.ERR
	ZER	0,0
	JSR	HASHER
	LDA	0,STEW
	JMP	@HASHX
HASHX:	0
;
HASHER:	DSZ	BYTSW	;TEST EVEN BYTE
	JMP	ODDB
	LDA	1,PREV	;YES, COMBINE WITH PREVIOUS
	MOVZS	1,1
	ADD	1,0
	MOVZS	1,1	;TERRIBLE HASH TO BE COMPATIBLE W/OLD READ
	ADDS	0,1	;PROBABLY OK FOR NOW...
	ADDL	1,1
	ADD	0,1
	LDA	0,STEW
	ADD	1,0,SKP
HINIT:	ZER	0,0
	STA	0,STEW
	LDA	1,C2
	STA	1,BYTSW
ODDB:	STA	0,PREV	;ODD CHARS JUST STORED
	JMP	0,3
STEW:	0	;HASH ACCUMULATED HERE
BYTSW:	0
PREV:	0	;ODD CHARS STORED HERE
;
;	/* INTERNING OF ATOMS */
MKATC:	STA	3,INRET	;AC0 _ ATOM OF (AC0=STRING)
	STA	0,IST1
	INC	0,1
	LOAD		;ARG.LEN
	STA	0,IUB1
	JSR	HASH
	STA	0,IHASH
	LDA	1,MXATM
	AND	0,1
	STA	1,RPTCK
	JMP	CKOK
INTLP:	LDA	0,IHASH
	LDA	1,MXATM
	AND	0,1
	LDA	0,RPTCK	;CHECK ATOM TABLE FULL
	SNE	0,1
	JSR	@.ERR
CKOK:	STA	1,ATMX
	LOAD
	SNN	0,0
	JMP	INSTL	;ATOM CELL IS EMPTY
	STA	0,IST2	;NOT SO, COMPARE PNAMES
	INC	0,1
	LOAD		;PNAME.LEN
	LDA	1,IUB1
	SEQ	0,1
	 JMP	NEQ	;DIFFERENT LENGTH
	ZER	0,0
	STA	0,ILB2
	JSR	@.PNT
	COMPR-.
	LDA	1,@.IST1
	JSR	@.SMF
	1
	SKIP
	 JMP	NEQ
	LDA	0,ATMX
	JMP	@INRET	;YAY, THEY'RE EQUAL - RETURN
;
NEQ:	ISZ	IHASH	;BOO, THEY'RE NOT - REHASH
	JMP	INTLP
	JMP	INTLP
RPTCK:	0
INRET:	0
IHASH:	0
ATMX:	0
PLEN:	0
;
INSTL:	LDA	0,IST1	;INSTALL THE NEW PNAME ***SHOULD BE A COPY***
	STOR
	JSR	@.REFI
	LDA	0,ATMX	;AND RETURN ATOM
	JMP	@INRET
;
COMPR:		;/* STRING COMPARE ROUTINE FOR SSCAN
	STA	3,SMFRT
	STA	0,STR.I
	JSR	@.GNB
ILB2:	0
IST2:	0
	LDA	1,STR.I	;COMPARE STR[I] WITH PNAME[I]
	SEQ	0,1
	ISZ	SMFRT
	JMP	@SMFRT
SMFRT:	0
STR.I:	0
;
LASTOFCODE:	0
	.END
